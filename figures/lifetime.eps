%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9sr5h82_d8are8_of4.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/9/23, 18:06:27
%%BoundingBox: 0 0 303 414
%%HiResBoundingBox: 0 0 303 414
%%CropBox: 0 0 303 414
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 871 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:ModifyDate="2024-09-23T18:05:11+02:00"
   xmp:CreateDate="2024-09-23T18:05:11+02:00"
   xmp:MetadataDate="2024-09-23T18:05:11+02:00"
   xmp:CreatorTool="Google"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:aa1101e3-b08f-4ac4-b07d-10ac6c173319"
   xmpMM:InstanceID="uuid:b488d0de-2153-4320-bc88-031cda863945">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">lec-w02-proc-thd.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -414 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 414 li
303 414 li
303 0 li
cp
clp
gsave
-6.10352e-05 414 mo
303 414 li
303 0 li
-6.10352e-05 0 li
-6.10352e-05 414 li
clp
gsave
-288 -81 mo
672 -81 li
672 459 li
-288 459 li
-288 -81 li
clp
-288 -81 mo
672 -81 li
672 459 li
-288 459 li
-288 -81 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.490394 .410193 .410193 .0505684 cmyk
%ADOBeginSubsetFont: FAAAAA+Calibri-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FAAAAA+Calibri)
%%Title: (FAAAAA+Calibri Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FAAAAA+Calibri def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-97 -194 859 847} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 228 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C6923342525
31335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77A
FB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99
AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AE
A3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816
818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F30
8DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA
0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981
B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A
380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6
BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA
965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885
D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11A
F573B17CF9F38> |
195 <001C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F
14E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C
2CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE71
528F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE
09822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F9
5265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543
AB1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8
C81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53
DFF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B
9F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD6
79CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084
F99BE2DC9C90C6E2171BED79C2858C6> |
196 <001C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1F
3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED34
FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C6
2BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B224
ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248C
394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E827
BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA86
8484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B27
907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596B
5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB62
C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306F
F743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA266107
C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB158
37CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B555
5DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4D
AA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D5
285DD> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FAAAAA+Calibri-Identity-H /Identity-H 0 [/FAAAAA+Calibri] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNJ+Calibri /FAAAAA+Calibri-Identity-H findfont ct_VMDictPut
FZJXNJ+Calibri [12 0 0 -12 0 0 ]msf
587.086 438.194 mo
(\000\303\000\304)
[6.07196 0 ]xsh
303 11.3686 mo
246.165 11.3686 li
246.165 0 li
303 0 li
303 11.3686 li
78.307 11.3686 mo
-6.10352e-05 11.3686 li
-6.10352e-05 0 li
78.307 0 li
78.307 11.3686 li
0 0 0 0 cmyk
f
.956329 .717403 .297734 .134798 cmyk
%ADOBeginSubsetFont: GAAAAA+BookAntiqua-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (GAAAAA+BookAntiqua-Bold)
%%Title: (GAAAAA+BookAntiqua-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /GAAAAA+BookAntiqua-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-134 -337 1193 1021} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 669 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 19 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
51 <001C60D8A8C9B7D8BE1649497C252B02AAA74486B4DB9478F3E40438EA5F
A3C366516E65D56CD6B000FE3333B4A5DFFE7D87A5623FE393F8FF4C7CC56284
9DB2224BB36994A8EF4BAEC11ABF9C4FFCF595EEDDD4829F4916A0B03EC584B0
67C3D4A405B69FAD6D41623CC77BBBDC149F4969A57BD7014262990B2C4EEA40
3C1652B62E4F5F3E31D7F9D92208BBEF08BB7C7958E5DE1325EB3C713C4BA803
69F124FF519BF0AA57B0524006051A2CE4E3BA5C096818F40AB1338723896227
8B070FA95C99C5BA904B65836FEEC59555B782971C6ADBEA3E9246CEEC2B699F
89CCD318255214CA11A42CA239C9817C1312804236C9CCE4C53A66C35E3DA0CF> |
85 <001C60D8A8C9B7361F398193400143B638AF8BEEF870CEE38493B2A6CD62
BB34E2366377C63E1AA2DFFBD90C13E01B403BAB1D8E418FCDD6A5E696BD7373
DD46B54A5AC66C840CC9FDEC89162CA7AC6BFD787FA2DE79B1BE10689D6C0568
C86C96CAAB4EAB73CB12AF8813C09CE091319228AF7416B834A645579C6040E6
897C0EE5AF93E0FE46DC2FD34FCD41AECCCEAA029174A3CCB2F6ADC9EB91C57B
9C485493B0B94E5EEF1F576764D883E383E45D2F4290A1D910AC848986C0248D
7A92F9800CBCD7FAD4C1E7549FB4> |
82 <001C60D8A8C9B7EF3232066150742FC90BE5E32B49FCD160CE941C04C046
3FE4D9F738CE20D28615AE1DD4D4DBA57158CE98D0E33B552B7AEDA625CA81CE
B960AAA70FC6BE05AB6B3DF3E9EB85954F1AB0EA2E739B74A5A599C05B28EADC
D0594EDF210E2BBA6E66BDAABBC2E4602471B00924548E076557F38F266F2324
414581E0A9> |
70 <001C60D8A8C9B77FE2C18AB1FC68F879BA0C33998E9F0983843AD6CFAAC9
6A22F38598A42B223A23BB17E68EFFCE2A9C2D758F31C0D600D560C1DC27F7B9
E9B9AC3A8023A97D1E8F2FDFC44BAA8F56B304888514954FB629A15B141085FB
7C0B19E05F2BEE5D072D6786175AFCD1DB37E93E1795068025A7A6BF506E1D29
A5C815AA6E1CCB9B1F716E3DA7937FB84FDDFFD6DD63086172AE63E8CD0AB00B
0AF7CF0AE711FE798A42336EBE0779EE8F8A5BCE932D0A7A98C373> |
72 <001C60D8A8C9B7A73DB6A85DC47B2C0DEE21CB32365CB8474E938869492D
7EEF119D5F13E3BDAD398C5F534EE7DE00F1BA660ECB04FD965221289FC33E80
5DA64BD961B18805344CF8C4E6795A3138F49A98BC182C88C2880330B64C99FC
5C3549F6627D2EAD701C145EF17A92FB244EE432D6023FB2C9E2BFD7F5C2C6E4
FD0E79A3DFD1DA5FA96284566D12EC7F61A5BE06BFABC8B83CE3F6F6C05B9457
7875687AD76B1C0231CA04EEDF135219124F844E30C8279536C7F3BC154055D5
37436FD4FF4E> |
86 <001C60D8A8C9B77FE28353BBC84C50684CAF5E81931E5D17E4A061977BA7
669C54427BE61109AEAE6792DF76E4C20A9D567A1D9864270B630ED2E31ED042
A1F1448A88EBBDBA8EDF3F3E73D1A534C79E12554D77CCE366A5500DE54F0FC5
52DFF02222F8CF58818A8CA6651B4397AFC79271D2532B00043A0A00F9D5574E
30EBC7663B1A58BF673F2B93F557DFF2C15AFFC4E4261EB23C9826D0A07AB973
AFBE1F8DB1EB290123EA943E6D2228094D286707C0DFD5DCF301D7CFA10B46AB
D4B328BD33402004858220D610B46FDDC7642204C6655E774B0049C78C3BDB0B
906048A80B12BA5E> |
3 <001C60D8A8C9B8707C25> |
73 <001C60D8A8C9B7361F028FB2E6946C4EC8C6AE6E3D7FCB2802A523587988
2B02F406FE3DDD55DBADABBC3BB74002F0ADE2423D91F75069031C099548BD7E
184B880B7AEEE6BF451CD7E1CA26F94C3D2C22763A7B95D16FC5BE9D610EC919
B4A7E29D07C2564573428D30829B856B62250DAC9759C4396040A48DAE4658AD
03509FA8408915AA2018CC3FA7F6ECB53165FD7B7FD02A1C56E5763829FC945E
06524C9DF24B854649D36250BED150B847E35C5E86097919EC3ADCB5213EE74F
2E284B9E9E0BCCE611A3CDCD3585C2D5BB2ECC1F0D485A8A22F83EF3F789> |
80 <001C60D8A8C9B59F85E7F1918B7D8497106D2E81167B606845D0BEBF6533
DB6CCB9E4512BC46BA8F0D0F77F7C6525B2457DD901AE1BE242D8A35DCD30ACC
9D12C5182FA3058CB43C93AB4AB1ABDE9C48BE58A5FAB743BD629A4DE8EA96D8
EA8D832CE5B31F1166EF2F9F3BAF2A11F21C480ADD99F4F6D3D49D950AD6C9F5
B4D6D575C5A44F5AC29C8551E3282815211A8E1A7B5219D07406E425179E6DB9
EA25667D0A793D44496DD88E5730F4749FB8EFD6E3959186293F107DBD94A759
A44B4B833316D09A15BAE2B596670E12A85C85D8BBB19515BAE0A82722AC4BB4
C3C035AF50FFAE2D00A3763B4DDB69EC2C66E5F3120D22D51C81FAAC1976F992
9E4135D6EDFFF5E395F8E28E24FF9EC0C207B174F1A2ED1E707FCDF57F6E4A4D
87AD7EC2D2357731439FC58CFB10F78EC8D93893520F79412EDB2CE5FFC415A0
3530C8DFCBC707A77156DD21FFA8B909E2A0D1719CCEC8776E7401E1E2BDE085
145F045201FE962C2D92066AE0B3283383CEC1F53243FC5B9420D0BF8ED1449C
5A> |
68 <001C60D8A8C9B7A73DB6843329A1729800EA61D6F565AACB276749045EFF
C4EFF0D08CC7B2442379EF115F49DEBCC8E5A279EE2220FEB741322AEEC69F49
252CDCDAC7AD1557FD0DB4C2820C6ECFEAE3ED0A21C2A6CB22539AA1F0E3AF1A
4D4F5FF1FCA672C2D03F0693D65537767A11672057AECE6F06B1D579639E6281
3B0925D1EFF2FA2D051C696B88FAF4FD02817E7D05BB98B26415B85344A55CFE
9C5262C9E9C6AA0D81F08F310FF217DEB785598D37997CB09BB98C76312AAC17
CEB64E4AB96157DFB9A72EE3E87D4E490FF781D1EFD380E3C6D4BA1C77D79C48
187A2DF5BAEB799349> |
83 <001C60D8A8C9B7D8BE02FBCF6FC1766F1232D503D3F17E5C7066D9F32492
F1D9669FB3E6EDE86B5FCC1B866F9C1F7799C5469F83B7E60948CC7B49F63DA3
D4007640A221E5D79D245A3A5E5E94B4C5DF449E1FC9819C090765342AD53C05
D45065B52BA50CE72F37FB94D181F6C7620B14E7DA4878A55C0D0824A70D438E
8D661FC81FE132E15431802ABB6B1BD176EBA46D88BE5F89B77D69FB1BF719FA
8E792A6B209F20ED0E9D2752725274133F78FE8BF60448EF3C985AD745FA4DDB
27CF7697BA78BC0A9382FA1532F6B4DDCF48C87B43C3877466ACE0AB0E667FF5
059F02D440DD2A70F52824BD67700B76B50D53FE97FDBA580DA90BCBC6A0D70D
4B822CACFE61818B75CE15> |
79 <001C60D8A8C9B81F2C2535B9DDBB1193B2676F56B126B0302467DD76549E
95418A4021B86D0CEC799800DBCADAE43C332920870A794E5E70F08D27587478
6A212BB015C2B6614E163F49A63E6600BD993DCBB996E45B6E56516F030A722F
3CADC58EB9AB599553086A4FB959ADEEBD22935C61DCE8014E67359A678149D2
EE9671AF39E91D7F62C0E55C> |
76 <001C60D8A8C9B81F2C3ABF6B5AB8EAD400204EE1B58543ACE66E828AE7FE
B01E25ABB5421369DA73CD75A9F8E82F9B42561AABC78354E1950B9D09109120
534734598A23AE8A612EF973BE71E6D68D1ADDDAE2FFC783327918FE482707E5
495F5D047D7E2B2ABBB7EA12859124021C675519D4239D4E6A90E5FEE250015D
3BE89C756BDC370F47C651715272F2A582E9DE763BC17059E6E1FFECFC357101
144628BC1CE0AC0142346D2722666839D39429E016EECFB8E944> |
87 <001C60D8A8C9B81F2C5BAF939DF1DCC8A49830B8FEFC5011D3DCB5148B0F
D40B750B8315CDD15AF3BC13A3244F0AC1912F0D8E225CFDD2BF9E32925E2BE6
EA4013ED3415DA4EAF5EF255646F58D153F05DE2E8BB0FC16C929C2BB5746C32
47C65B80BC892423775E20E404C30F6E42E2DAC004B9EF7CE3DDE2B852663E53
B76238DAFE45356AC4FFE6D8341377A6E4ABD2EA0B42CF4746CD07EEC64701FC
DD7B0ED97939CCBE4D9FDCE8F6A9EB4B51EE166F9EFE7DDEA7BC46E05BCD> |
81 <001C60D8A8C9B7D8BE160B77335746F75750745C4390CF988E9EDF044F5F
8BBABC48CFEAE7B932AB1E63AE6E983A9D83256F3A47F6A6CC5EBCE854DF4C10
6EE2FCCEDBE8D2999C02A324645B7E638B9DFF9A9EC4F5B07542FDBFBCEDB672
63A4A7B2A32251844A027629367E76C022ED67F4C316D95F0E0937467475DCB3
ECF74B04454B401A5CDEFC2DDB8B70C89C52AAF6AA750C2E9504C6799587CB61
51F9B4E773BBE0005B332974741E596AF685AF2DBC8771B1969E328D5ACCE0C5
6E5CC8D13F59102EFE408CA60EDFD6454F7931965DED3982685C9354B3CD2D73
1C86B28511C294F8DC42BA3A962370574CBC6F1725A1C2315D07D6FC9F19D641
905096D4319F9FAADCCF1C> |
183 <001C60D8A8C9B854D0F131E36D8789542A11EC052181AD9434FF4423817
69722BDC4A591B2D1761137685658E1EC2C9536071307C36DFF1D> |
89 <001C60D8A8C9B7EF3264F4B42CF16DB118DE18C1A7378625D3F5B44C4E6B
5E5607694E35D6926372D48D926B887A616E8BAEEAEF5B5BFBA1C24EB6690113
BBF743CB96470ADCA0B5237E2D119202F6618F3D87CC5B39C3DB8941AD64B213
5872274637C0DAA3C6F0895E00B6542E303323BDF4F66BEB251833C60A968EC5
D323C4A2B746D8EE5C04959D5B95F1B7E281C0533D21ABF51BC89BC2> |
90 <001C60D8A8C9B6B41C8B44E9B6606A67502BF07C1C609AD2135F1DF1A718
A670E0F391D0BAF22B7FCC0D07E2B4BC70C7D7F77A2E2613C870EA096A7B882C
677395BB9E5CF0D95BAC06A78DEE31E6E20D7AFA0E21394C2788F2C1EC692FA9
ED720D20CCFC3FFB8C18C57301F4419D8DBC3DAE261F913C37377FB9DBFFD29B
152BE537D9B94EC4F80634A59AE8C81C6F8B7BF0B2AAE98669223320BC6A8EBB
CF665D69BB95CCEB0244B5055E209B317E9B721E243F37E23CF28E8F52679115
A756123D60D5F77E06820D> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /GAAAAA+BookAntiqua-Bold-Identity-H /Identity-H 0 [/GAAAAA+BookAntiqua-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNK+BookAntiqua-Bold /GAAAAA+BookAntiqua-Bold-Identity-H findfont ct_VMDictPut
FZJXNK+BookAntiqua-Bold [36 0 0 -36 0 0 ]msf
-215.25 -11.8335 mo
(\0003\000U\000R\000F\000H\000V\000V\000\003\000I\000U\000R\000P\000\003\000D\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q\000V\000\267\000\003\000Y\000L\000H\000Z)
[21.96 14.0043 20.016 15.9478 18 15.9478 15.9478 9 14.0043 14.0043 20.016 32.0043 
9 18 21.96 21.96 11.9877 11.9877 15.9478 18 11.9877 11.9877 20.016 21.96 
15.9478 7.992 9 20.016 11.9877 18 0 ]xsh
110.362 98.3722 mo
110.362 95.141 112.982 92.5217 116.213 92.5217 cv
214.26 92.5217 li
215.811 92.5217 217.3 93.1381 218.397 94.2352 cv
219.494 95.3325 220.11 96.8206 220.11 98.3722 cv
220.11 121.773 li
220.11 125.005 217.491 127.624 214.26 127.624 cv
116.213 127.624 li
112.982 127.624 110.362 125.005 110.362 121.773 cv
110.362 98.3722 li
.168582 .049897 .00476081 0 cmyk
ef
110.362 98.3722 mo
110.737 98.3722 li
110.737 96.8588 111.349 95.4923 112.341 94.5003 cv
113.333 93.5089 114.699 92.8968 116.213 92.8966 cv
214.26 92.8966 li
215.712 92.8966 217.104 93.4736 218.131 94.5003 cv
219.158 95.5272 219.735 96.9199 219.735 98.3722 cv
219.735 121.773 li
219.735 123.287 219.123 124.653 218.131 125.645 cv
217.139 126.637 215.773 127.249 214.26 127.249 cv
116.213 127.249 li
114.699 127.249 113.333 126.637 112.341 125.645 cv
111.349 124.653 110.737 123.287 110.737 121.773 cv
110.737 98.3722 li
110.362 98.3722 li
109.987 98.3722 li
109.987 121.773 li
109.987 125.212 112.774 127.999 116.213 127.999 cv
214.26 127.999 li
217.698 127.999 220.485 125.212 220.485 121.773 cv
220.485 98.3722 li
220.485 96.7211 219.829 95.1376 218.662 93.9701 cv
217.494 92.8026 215.911 92.1465 214.26 92.1465 cv
116.213 92.1465 li
112.774 92.1468 109.987 94.9338 109.987 98.3722 cv
110.362 98.3722 li
.749752 .679194 .670527 .901579 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: HAAAAA+RobotoMono-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HAAAAA+RobotoMono-Bold)
%%Title: (HAAAAA+RobotoMono-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HAAAAA+RobotoMono-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-504 -271 778 1048} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 888 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7C3C91B> |
33 <001C60D8A8C9B7C3C9E216822A6B3226A149E509FD6E203B27BC27E43E8C
7E6F9EE7B915B3086778A059497AF208B58D28CFD11FB09E01B995D49A4A07CA
2950C75CDF75779AB11270500F514008A03059B73306A30EA934E1ED933B7535
A78FBA8C819E1C87FB6F92DCB677235203B4C54F5B32ACFE943F67B18D7B16B7
088799EF5EA2BD85EAF8566957CBCC2ECA> |
42 <001C60D8A8C9B7C3C9DB5D8E5463E3B1DEB53DF634B0E8981DB4EA72D0B1
7DDC88596DC96EBA11BF5D4BC170A507C4BCB8356D3B13EBE67BB2CA5EC4292C
9915509458F1DF55D257CB8C0D36065FEA3D873EA3CE5F65075D80D970503C21
3DB5B822524FF8F4D61360D61CA391CE6D143968898B719A73D87272CD1DF049
DAA3E0395B479D16BE0347EE3262087E56549E4393DD15B668C5D2F6778B7988
56ED56B343254DE4AD6771D526766D670D9F47FB11B6A799501C2314B3D3D45B
F28B5263650AF56EA37C4DF4260774DBCE11313224CE4AF63E9CEDB703FFD760
B7A40559BB3512E90D84D703F5438F0B110A6299D90651628B0A58860B01CA> |
45 <001C60D8A8C9B7C3C9EDA465E0F64645A8493DAC7CB33AD990AA2CD5BC01
4FEF9DCE681C39FF15403A4DA01A13B970C561ECFA133335C1D073896B7B8210
0A4EFDD5E0EBA0395B6537265A30DC71F742ADD3D1B92D33A4203690FC746D60
141F162041AA861EA21E9EADBF1C> |
38 <001C60D8A8C9B7C3C9E2280981FB65EF5A7924E97552CBB2400A0179A3B9
7471D5FC0BDE24B9FDD1A384327DD6BE4EA7A764BE001526D079F07A376E> |
116 <001C60D8A8C9B7C3C9E20DC1FE585D4375CA31F6AAE843E741FB42533A9
7C1F061CFEC5151E60546556F2C03D61F993CC85549C272CAECF3B86B2AF2843
1E6869B4CF7F94A2AA9CD8C398CDAF28CBBB075ADFC301C219DA23067B00244C
1BADADE8FF0F69F7F217479BB63F6DF966158E0050CF0E2A5B34050D671C7680
9F8C5DC39A1731DB75B61A95B0AE32951FEE90940A7F2CE74B8217844DC70206
EF3F9185AEB32BA197B7445A6B38C4CE7E07EDFB28C094BC53036F2319104957
6F489C5A8> |
117 <001C60D8A8C9B7C3C9ED1E6738CF8ECE7AB0B15904BB7EF33BEC4E11C28
EEC265DE3276C872C59AD35671486E20056D4839A1B4CC7CB94C0F91C272CBCF
DBC10CB002890F7B0C197718447D8AA61CD3AAE04182C89F2CA8106447F0883D
A718AD604696C32663B41AE3F9D3BD243B6B5699936155EDFE7E425C7CF580DF
C46A3C0622467297264B00F0CF5D9D38CE645A5B2031D383C83A1CC43FE78112
6B82807608E72E398E1D687EFEA3E78FA4AD94085F68A57233020ED4C4A30494
8AFBD8548> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HAAAAA+RobotoMono-Bold-Identity-H /Identity-H 0 [/HAAAAA+RobotoMono-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNL+RobotoMono-Bold /HAAAAA+RobotoMono-Bold-Identity-H findfont ct_VMDictPut
FZJXNL+RobotoMono-Bold [20 0 0 -20 0 0 ]msf
129.244 117.273 mo
(\000!\000*\000-\000&\000t\000u)
[12.0001 12.0001 12.0001 12.0001 12.0001 0 ]xsh
190.11 190.87 mo
190.11 187.639 192.73 185.02 195.961 185.02 cv
294.008 185.02 li
295.559 185.02 297.047 185.636 298.145 186.733 cv
299.242 187.83 299.858 189.318 299.858 190.87 cv
299.858 214.272 li
299.858 217.503 297.239 220.122 294.008 220.122 cv
195.961 220.122 li
192.73 220.122 190.11 217.503 190.11 214.272 cv
190.11 190.87 li
.00665293 .0357366 .220615 0 cmyk
ef
190.11 190.87 mo
190.485 190.87 li
190.485 189.357 191.097 187.99 192.089 186.998 cv
193.081 186.007 194.447 185.395 195.961 185.395 cv
294.008 185.395 li
295.46 185.395 296.853 185.971 297.879 186.998 cv
298.906 188.025 299.483 189.418 299.483 190.87 cv
299.483 214.272 li
299.483 215.785 298.871 217.151 297.879 218.143 cv
296.887 219.135 295.521 219.747 294.008 219.747 cv
195.961 219.747 li
194.447 219.747 193.081 219.135 192.089 218.143 cv
191.097 217.151 190.485 215.785 190.485 214.272 cv
190.485 190.87 li
190.11 190.87 li
189.735 190.87 li
189.735 214.272 li
189.735 217.71 192.522 220.497 195.961 220.497 cv
294.008 220.497 li
297.446 220.497 300.233 217.71 300.233 214.272 cv
300.233 190.87 li
300.233 189.219 299.577 187.635 298.41 186.468 cv
297.242 185.3 295.659 184.645 294.008 184.645 cv
195.961 184.645 li
192.522 184.645 189.735 187.432 189.735 190.87 cv
190.11 190.87 li
.749752 .679194 .670527 .901579 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: HAAAAA+RobotoMono-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HAAAAA+RobotoMono-Bold 3 GetGlyphDirectory
32 <001C60D8A8C9B7C3C9E2201EC5E2E529F47798E34115652AC91EF6E0C935
EF15B3BE223A6735DA0D13199D64589B06F288A6183479C6D3E5300AB5F76BF5
FD11CDE5D65C89B4EF3870968F142FDE9722CA1AB698BD65FABA762FAEEFC0BE
E4DCD14043D257727D2FB219F02DB4439670DD4786C02212C9EFF2C6EE9372D6
D1D62FE45821D25488CCA023757B3D97173F9415E6465FCD188B02FB8C6FDFEA
5C7A3585DEB083D077A7E24618928AB20F17C6E627899B89FBCEA8ECC9B28707
6E38500933F23C4BAA74C7E87685C2588E4E751C8FFAB87F55B059E808319A83
BE1C5CB5AB6B832DF23ECB> |
51 <001C60D8A8C9B7C3C9ED16E57E730B4974790651938223F3019F624ECD99
EC8194D9719AC0CF29A901C7FFD3B7900FB121DDDF2C2AC3B620D515C1617ED3
6C> |
30 <001C60D8A8C9B7C3C9E2A3D8DA205712B2DD215839AE5FDE36880DD47EAD
BA64CD99E429FC4AE95F45182FC859A2C844C59349914561113DE44E98632752
8E0EA64D4990C0E224CBF7652F14BD3027124C7BD6BD8B8FD6E4571C0A9F88CC
96D1989D6D724866A7635BD723256C67BD70D2EA17BB304718533DF64D797828
4D31B2A496B8B9F9738366A4CF47A3D8C2E2D517C01A59F161C5C268FD353EC3
F35D8D88036850E54D76F36C506F5066AFFAAE7D224F6B80A778A817B3E4B49F
14A8E3AE3A00E2BDC154C24D78EC5C01A4FBE1A395E4637424C3EFBCA19F7030
20593977CD18401B6946B12D4A9BCA8AC6AC3FE545E15ED6AAC79D> |
!
end
end end
%ADOEndSubsetFont
FZJXNL+RobotoMono-Bold [20 0 0 -20 0 0 ]msf
208.992 209.771 mo
(\000 \0003\000 \000\036\000t\000u)
[12.0001 12.0001 12.0001 12.0001 12.0001 0 ]xsh
190.11 293.669 mo
190.11 290.438 192.73 287.819 195.961 287.819 cv
294.008 287.819 li
295.559 287.819 297.047 288.435 298.145 289.533 cv
299.242 290.63 299.858 292.118 299.858 293.669 cv
299.858 317.071 li
299.858 320.302 297.239 322.921 294.008 322.921 cv
195.961 322.921 li
192.73 322.921 190.11 320.302 190.11 317.071 cv
190.11 293.669 li
.00665293 .0357366 .220615 0 cmyk
ef
190.11 293.669 mo
190.485 293.669 li
190.485 292.156 191.097 290.79 192.089 289.798 cv
193.081 288.806 194.447 288.194 195.961 288.194 cv
294.008 288.194 li
295.46 288.194 296.853 288.771 297.879 289.798 cv
298.906 290.824 299.483 292.217 299.483 293.669 cv
299.483 317.071 li
299.483 318.584 298.871 319.95 297.879 320.942 cv
296.887 321.934 295.521 322.546 294.008 322.546 cv
195.961 322.546 li
194.447 322.546 193.081 321.934 192.089 320.942 cv
191.097 319.95 190.485 318.584 190.485 317.071 cv
190.485 293.669 li
190.11 293.669 li
189.735 293.669 li
189.735 317.071 li
189.735 320.509 192.522 323.296 195.961 323.296 cv
294.008 323.296 li
297.446 323.296 300.233 320.509 300.233 317.071 cv
300.233 293.669 li
300.233 292.018 299.577 290.435 298.41 289.267 cv
297.242 288.1 295.659 287.444 294.008 287.444 cv
195.961 287.444 li
192.522 287.444 189.735 290.231 189.735 293.669 cv
190.11 293.669 li
.749752 .679194 .670527 .901579 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: HAAAAA+RobotoMono-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HAAAAA+RobotoMono-Bold 2 GetGlyphDirectory
36 <001C60D8A8C9B7C3C9ED34B6A81225CB5F98685D2AC5981E9AF614282C3A
308A991C7392744ED57AFF0F30AE17A876E962BCE47A9DF938562A460935E6CA
F773B9F1DCB502A19A82788EBDD9D49FFC1FDDF431FC32DC6E110E5B006FD8F9
F84E3BCE9CE5BEC5F4CBEBBE76ABDF7550C4CE385F966312577113D2DDA0F6D9
E3F26D5A137E92> |
47 <001C60D8A8C9B7C3C9E298B666056108C6FA227267C76432C2431624F88A
505E5A1CD42B822236D7973FA45CB6E827E7EC562D240E069BBD3DD25A491911
F5C95958997B3EABC9F0766309DEDEEE2E86C60CEC3C86C708FBE00D9A8E6BDD
E5A3A870E14AEE3163A93EF583CBA7B078DCDDE7FBE452AC9B3590C49E98CE0A
1850833FAECC668512359753269A058B1D5D73412D6B1DF388928012881EE0E2
90> |
!
end
end end
%ADOEndSubsetFont
FZJXNL+RobotoMono-Bold [20 0 0 -20 0 0 ]msf
208.992 312.57 mo
(\000 \0003\000$\000/\000t\000u)
[12.0001 12.0001 12.0001 12.0001 12.0001 0 ]xsh
24.6141 293.669 mo
24.6141 290.438 27.2334 287.819 30.4646 287.819 cv
128.512 287.819 li
130.063 287.819 131.552 288.435 132.649 289.533 cv
133.746 290.63 134.362 292.118 134.362 293.669 cv
134.362 317.071 li
134.362 320.302 131.743 322.921 128.512 322.921 cv
30.4646 322.921 li
27.2334 322.921 24.6141 320.302 24.6141 317.071 cv
24.6141 293.669 li
.186587 .0897536 0 0 cmyk
ef
24.6141 293.669 mo
24.989 293.669 li
24.9893 292.156 25.6014 290.79 26.5927 289.798 cv
27.5848 288.806 28.9513 288.194 30.4646 288.194 cv
128.512 288.194 li
129.964 288.194 131.357 288.771 132.383 289.798 cv
133.41 290.824 133.987 292.217 133.987 293.669 cv
133.987 317.071 li
133.987 318.584 133.375 319.95 132.383 320.942 cv
131.391 321.934 130.025 322.546 128.512 322.546 cv
30.4646 322.546 li
28.9513 322.546 27.5848 321.934 26.5927 320.942 cv
25.6014 319.95 24.9893 318.584 24.989 317.071 cv
24.989 293.669 li
24.6141 293.669 li
24.239 293.669 li
24.239 317.071 li
24.2394 320.509 27.0263 323.296 30.4646 323.296 cv
128.512 323.296 li
131.95 323.296 134.737 320.509 134.737 317.071 cv
134.737 293.669 li
134.737 292.018 134.081 290.435 132.914 289.267 cv
131.746 288.1 130.163 287.444 128.512 287.444 cv
30.4646 287.444 li
27.0263 287.444 24.2394 290.231 24.239 293.669 cv
24.6141 293.669 li
.749752 .679194 .670527 .901579 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: HAAAAA+RobotoMono-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HAAAAA+RobotoMono-Bold 2 GetGlyphDirectory
50 <001C60D8A8C9B7C3C98D38043FBB69A3A7487A3520CBDD00CE10EB5AED45
FB3D1BE218093DB6EE398A154BA8CDCB1AFA5C6949DF86FEBC65478E15BDE68E
D17A833DC3644950E3C4E967A5> |
28 <001C60D8A8C9B7C3C9ED3210E8810D46BBA140A0875F7AB283BECE95610F
E30101F119EB358081AD5D32C2915A9ED821193E71A1818CE7EC7623154D8EFB
A7341577F880C2B01DC70F1702D271EBEF70F9095ED749E2789A73F4B702E57F
0AD980475969037DA0EB2F1B4DB0394BD6F26B8A02B3D61FC9140CA8304D1705
D5B450BA2120D397155132C3AF252746B01B17FF6413892BC68E9F111D85C541
9BB68C8AB0FECDD5393BC47AEE53123B9FBAB4FFBD5B8A90CD416F1F9CAF79F1
ECC0C054168E355F037CB6E158730F316DB2643D38290293024077F9A091F1A2
519B3FBD590410AA05F342E0846B157822953C141E948F489004999995D5B156
319169A997247A09D417CABB69D9DE6F4B83432C2F4ABDD1E33BF4C9DE4F2906
63B95A6D678101CAA986C53D802DC55748414ECF26952635239F24FBD2E4D88F
AF70EA1EE2A8FB1B0B1305431FD817B2C0E9C08FC9533CC4774CEA3C> |
!
end
end end
%ADOEndSubsetFont
FZJXNL+RobotoMono-Bold [20 0 0 -20 0 0 ]msf
43.4964 312.57 mo
(\0002\000\034\000$\000/\000t\000u)
[12.0001 12.0001 12.0001 12.0001 12.0001 0 ]xsh
79.6259 287.444 mo
79.4887 287.444 li
79.5035 281.1 79.89 275.263 80.5891 269.853 cv
82.0773 270.041 li
82.0909 269.934 li
82.1248 269.674 82.1592 269.416 82.1943 269.158 cv
82.2652 268.641 82.339 268.127 82.4154 267.617 cv
82.7218 265.578 83.0737 263.602 83.4676 261.685 cv
85.0434 254.016 87.2902 247.28 89.9886 241.15 cv
94.2659 231.432 99.6877 223.228 105.391 215.285 cv
106.098 215.285 li
79.6259 287.444 li
0 0 0 0 cmyk
f
79.4883 287.819 mo
79.4883 287.693 79.4884 287.57 79.4887 287.444 cv
79.6259 287.444 li
79.4883 287.819 li
.74902 .678431 .670588 .901961 cmyk
f
128.906 171.655 mo
122.104 171.655 li
136.348 132.829 li
135.915 148.619 133.088 161.061 128.906 171.655 cv
0 0 0 0 cmyk
f
136.405 128.583 mo
136.402 148.306 132.798 162.992 127.405 175.251 cv
122.01 187.509 114.792 197.36 107.487 207.313 cv
100.188 217.264 92.8008 227.318 87.2431 239.941 cv
84.4647 246.251 82.1477 253.2 80.5288 261.081 cv
80.1241 263.051 79.7629 265.08 79.4488 267.172 cv
79.3702 267.694 79.2948 268.221 79.222 268.752 cv
79.1857 269.017 79.1503 269.284 79.1155 269.551 cv
79.1148 269.556 li
79.1011 269.664 li
82.0773 270.041 li
82.091 269.933 li
82.0902 269.938 li
82.1244 269.677 82.159 269.417 82.1943 269.158 cv
82.2652 268.641 82.339 268.127 82.4154 267.617 cv
82.7218 265.578 83.0737 263.602 83.4676 261.685 cv
85.0434 254.016 87.2902 247.28 89.9886 241.15 cv
95.3839 228.892 102.601 219.042 109.906 209.088 cv
117.205 199.137 124.593 189.083 130.151 176.46 cv
135.71 163.839 139.409 148.668 139.405 128.583 cv
136.405 128.583 li
.695949 .631678 .620325 .58584 cmyk
f
75.6434 269.549 mo
79.7565 283.441 li
85.5352 270.156 li
cp
ef
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
75.6433 269.549 mo
79.7564 283.441 li
85.5352 270.156 li
cp
@
244.984 185.026 mo
244.984 185.026 li
244.984 185.024 li
244.984 185.026 244.984 185.024 244.984 185.026 cv
.74902 .678431 .670588 .901961 cmyk
f
244.785 184.645 mo
244.455 184.645 li
218.067 165.651 li
238.083 165.651 li
238.861 166.961 239.565 168.311 240.189 169.699 cv
240.327 170.006 240.461 170.315 240.591 170.625 cv
235.373 166.634 li
244.785 184.645 li
178.11 136.89 mo
173.291 133.422 li
174.765 133.701 176.38 133.968 178.11 134.246 cv
178.11 136.89 li
0 0 0 0 cmyk
f
244.984 185.026 mo
244.455 184.645 li
244.785 184.645 li
244.984 185.025 li
.74902 .678431 .670588 .901961 cmyk
f
163.736 127.624 mo
163.734 128.197 163.871 128.772 164.126 129.273 cv
164.611 130.223 165.418 130.866 166.334 131.367 cv
167.95 132.237 170.065 132.78 172.664 133.301 cv
176.553 134.069 181.51 134.721 187.021 135.732 cv
192.529 136.741 198.581 138.106 204.602 140.273 cv
214.391 143.793 224.175 149.471 231.443 157.02 cv
235.08 160.793 238.09 165.03 240.189 169.699 cv
240.714 170.866 241.182 172.061 241.59 173.283 cv
241.793 173.894 241.982 174.512 242.154 175.137 cv
242.151 175.127 li
242.177 175.224 li
245.075 174.444 li
245.048 174.348 li
245.046 174.338 li
244.859 173.663 244.656 172.995 244.436 172.335 cv
243.996 171.015 243.491 169.726 242.926 168.469 cv
240.664 163.439 237.443 158.923 233.604 154.938 cv
225.919 146.969 215.767 141.106 205.618 137.451 cv
195.47 133.8 185.392 132.388 177.936 131.179 cv
174.216 130.58 171.138 130.017 169.154 129.324 cv
168.163 128.985 167.464 128.605 167.117 128.295 cv
166.941 128.141 166.852 128.016 166.804 127.921 cv
166.757 127.825 166.738 127.753 166.736 127.624 cv
163.736 127.624 li
163.736 127.624 li
.695949 .631678 .620325 .58584 cmyk
f
243.626 174.834 mo
239.836 171.936 li
244.405 180.678 li
246.525 171.045 li
cp
ef
243.626 174.834 mo
244.537 173.643 li
235.373 166.634 li
244.984 185.026 li
249.443 164.759 li
242.435 173.923 li
243.626 174.834 li
244.537 173.643 li
243.626 174.834 li
244.817 175.746 li
247.716 171.956 li
246.524 171.045 li
245.06 170.722 li
243.825 176.331 li
241.166 171.241 li
239.836 171.936 li
238.925 173.127 li
243.906 176.937 li
244.817 175.746 li
243.626 174.834 li
f
245.031 287.444 mo
245.031 287.444 li
245.008 253.802 li
245.008 253.858 245.008 253.914 245.008 253.971 cv
245.02 262.37 245.031 270.77 245.031 287.444 cv
0 0 0 0 cmyk
f
245.031 287.823 mo
245.031 287.444 li
245.031 287.444 li
245.031 287.57 245.031 287.696 245.031 287.823 cv
.74902 .678431 .670588 .901961 cmyk
f
245.008 253.802 mo
244.996 245.458 244.984 237.061 244.984 220.497 cv
244.984 220.497 li
245.008 253.802 li
0 0 0 0 cmyk
f
244.984 220.497 mo
244.984 220.497 li
244.984 220.373 244.984 220.247 244.984 220.122 cv
244.984 220.497 li
.74902 .678431 .670588 .901961 cmyk
f
1 lj
8 ml
244.984 220.122 mo
244.984 237.046 244.996 245.508 245.008 253.97 cv
245.014 258.202 245.02 262.433 245.024 267.723 cv
245.026 270.367 245.028 273.277 245.029 276.583 cv
245.03 277.542 li
.695949 .631678 .620325 .58584 cmyk
@
245.03 277.542 mo
241.655 274.168 li
245.031 283.437 li
248.403 274.167 li
cp
ef
0 lj
10 ml
245.03 277.542 mo
241.655 274.168 li
245.031 283.437 li
248.403 274.167 li
cp
@
134.737 305.417 mo
134.737 305.417 li
162.377 305.394 li
162.33 305.394 162.283 305.394 162.236 305.394 cv
155.331 305.405 148.424 305.417 134.737 305.417 cv
0 0 0 0 cmyk
f
134.362 305.417 mo
134.737 305.417 li
134.737 305.417 li
134.612 305.417 134.488 305.417 134.362 305.417 cv
.74902 .678431 .670588 .901961 cmyk
f
162.377 305.394 mo
169.236 305.382 176.141 305.37 189.735 305.37 cv
189.735 305.37 li
162.377 305.394 li
0 0 0 0 cmyk
f
189.735 305.37 mo
189.735 305.37 li
189.86 305.37 189.984 305.37 190.11 305.37 cv
189.735 305.37 li
.74902 .678431 .670588 .901961 cmyk
f
1 lj
8 ml
190.11 305.37 mo
176.173 305.37 169.205 305.382 162.236 305.394 cv
158.752 305.4 155.268 305.405 150.912 305.41 cv
144.643 305.415 li
.289464 .230655 .233677 0 cmyk
@
144.643 305.415 mo
148.016 302.04 li
138.748 305.416 li
148.018 308.787 li
cp
ef
0 lj
10 ml
144.643 305.415 mo
148.016 302.04 li
138.748 305.416 li
148.018 308.787 li
cp
@
79.636 354.473 mo
79.5998 346.744 li
79.636 354.473 li
79.5858 343.744 mo
79.49 323.296 li
79.5858 343.744 li
0 0 0 0 cmyk
f
79.49 323.296 mo
79.49 323.296 li
79.4883 322.921 li
79.49 323.296 li
.74902 .678431 .670588 .901961 cmyk
f
1 lj
8 ml
79.4881 322.921 mo
79.5927 345.244 li
.695949 .631678 .620325 .58584 cmyk
@
74.6377 345.267 mo
79.6566 358.858 li
84.5479 345.221 li
cp
ef
74.6375 345.267 mo
73.2304 345.787 li
79.6771 363.244 li
86.6829 343.711 li
72.4883 343.777 li
73.2304 345.787 li
74.6375 345.267 li
74.6445 346.767 li
82.4125 346.731 li
79.636 354.473 li
76.0446 344.748 li
74.6375 345.267 li
74.6445 346.767 li
74.6375 345.267 li
f
162.329 92.1465 mo
162.329 92.1465 li
162.246 74.5218 li
162.329 92.1465 li
0 0 0 0 cmyk
f
162.331 92.5217 mo
162.329 92.1465 li
162.331 92.5217 li
.74902 .678431 .670588 .901961 cmyk
f
160.642 52.2058 mo
160.746 74.5289 li
163.746 74.5148 li
163.642 52.1918 li
160.642 52.2058 li
.695949 .631678 .620325 .58584 cmyk
f
157.291 74.5451 mo
162.31 88.136 li
167.202 74.4986 li
cp
ef
0 lj
10 ml
157.291 74.5451 mo
162.31 88.136 li
167.201 74.4986 li
cp
@
163.417 414 mo
-6.10352e-05 414 li
-6.10352e-05 363.244 li
79.677 363.244 li
79.6771 363.244 li
163.417 363.244 li
163.417 414 li
0 0 0 0 cmyk
f
79.6771 363.244 mo
79.677 363.244 li
79.6772 363.244 li
79.6771 363.244 li
.694118 .631373 .619608 .584314 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: FAAAAA+Calibri-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FAAAAA+Calibri 12 GetGlyphDirectory
48 <001C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AEC
720DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F19
EB2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD4
34CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F57
4C6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4E
7B6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E847
669D322216405EAED7> |
80 <001C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55C
F4C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B4
4CFB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA
6B08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BB
E3CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D
3CDA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B
3F5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B146
61497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E
12DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |
73 <001C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E083
9C715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62F
CBF09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE
22E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99
D24AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02
DD61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013C
F0832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8
D58BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEA
AFA402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A56
7478E4C81011D9D8D5DAD9CB1F948F5FCE67> |
3 <001C60D8A8C9B888C146> |
69 <001C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC02
625554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1
EDBE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF
40D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA
4EA25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B1
398AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6
B5FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9
D11EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91
CC593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC01
478225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457E
A291D6DE23> |
93 <001C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C1
2EAC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6
F54555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B3
1EE69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433E
C67800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE
98DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46
B48C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC0696
4A16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |
91 <001C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55C
F4C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B
3F0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F31337
982CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F44
4AFA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D6
248BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B5
808B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE26619
012C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C44
87AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |
106 <001C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B5
33C9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8
435DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA
67EEAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D10473
0DECDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571
4151061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABE
C190F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80
DF322060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1
C4E0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB5508
2A1E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |
81 <001C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AF
B58D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42
D2D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC
7DD61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E0868
8BC2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D
7426B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D1529
3CFC> |
107 <001C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211D
C3688D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D223228
18FC76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896
B708E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E72596
8E2F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EA
A4BEA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A95
2E22AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888
E4F660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F
875BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |
104 <001C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08
2679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C
4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED
0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357
B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786
9638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC
0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB
954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301
370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E1
88B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74
E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A56882993
52E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2
5861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE6
7C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21
B0D386F88> |
114 <001C60D8A8C9B76A0D39202D65B3E28787C1CC43B503732F31391DBCE57
2A2CA2079F64BC5B594607AA87D000626A2545C2F92C4488974BEE02BFDB5EF8
46BF92A6767B071A1575D7917AC4A860992133465690B1A7D35F13489CCB65C6
8A551A50F7D5FE7268F974AE88AF02F0676DC68E49F56F9749803892469EB313
C816FA79F4E722677598E3E97FE77F7E623BDC63C2F2C92A6A872F78617F1E4F
886E2D0FE3546DBCDFFFA5E4DDD143D076BF94A42BE3EB61D005FC9D628F696E
707AC2730FB246E5D69586A7207A5C66CA927382E61516706448C9FC049414B9
7AFACB4BF470D99F74F500BB6FED6F03C0B03924527D6EBE063E7443300BBFAE
73D541C5D7B5CED7E3DA24F8B93E2A8ABB9> |
!
end
end end
%ADOEndSubsetFont
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
2.30905 387.274 mo
(\0000\000P\000I\000\003)
[8.76599 9.44989 8.94589 0 ]xsh
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IAAAAA+Calibri-Bold)
%%Title: (IAAAAA+Calibri-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IAAAAA+Calibri-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-103 -194 885 856} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 228 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F119478
AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D19042FB8B
7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28AEC2A0
702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D929B0
25DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF43A5FA
51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D8D270
BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FFE381E
622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A6E83C
18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF19D085
C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EAE508C
E290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF1599689F
A1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB398CE8A
C4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787220FB
A75DA1E45C945> |
100 <001C60D8A8C9B78256DD05CEB4DA9E965AB07EBB69AB364D14F4B8A1E61
29E1A1B57A9F6AF54A3080C4C156F4713FDECBA67C18FBD4873468229BF2E56E
47555C842162EA8AFD838229FDC9DDEF310896F702CA81E89654B1920C456B61
22904925826DCCF02D5C1E273B9B70F686A52F233CB0BF53CA99DE0726AB8843
AE18A2F544EEFCCB9368EBBD2EAF30818B845E8A149610E23EA632E165F5F7A4
520EBF45E5F0A7C6C568F3780A23188579ACA934B1151F60150BE69611E3BBA1
C15169CC459A53E1BC79B4E95D0D1E38FE34738BA484CC420DDF487453BC7EA4
4E7585361232849BCEDF40AAC7FE11F5957D235AD9EDF320D6585B01D68C46BE
5D9691D1F0D2A2633C87BEE9F7062A178C86B69B109CEB96764C1C8FBD01DA9D
DE36AB596536073622CAD7E9206511E05DBC09A13A3DCE8DBA476EE29BA282BA
82967374BCFCA66C6C7134003DFF5B8CBD8A2DF42CA27C9663DE571271A8218E
1F5A8F5301D> |
60 <001C60D8A8C9B7AD0A34D5A33DA54D708C09070E3263DB3F8B204742934F
45464C864E5219DC64C17C21334728C70A28136E97F8B50DED54E9169E494DCF
FBE08054CD1ABEDFE9442047B18ABC511F07776D5525C7536F54A7020A4D0666
0444EA4587557797F3D30E946423D7B549AB2AE4911FA9B4137E2A2722357A50
6A6A05F91A214894E28FEC6B492CDF90F6872AAE0C40180F5DD11FF249C62B74
37E3A71BA232F3D2872FD555E1C9AC4E7F4B48457EB6186F604DC3EE6103F0F8
81A966A4A53DB93C1C7AD28044A61CF0FCE7D40BA68015641BB746FB7DDE0D2F
135B3E72C27DE147EB6127162600CEE2FE996BF71B8B39FDE57DFC392DDA09C4
BF60254D74CA373499967C5100501D06A31B9AF30F8F868E5E3B054E309214BE
ED4F999B3B55712B0FD812D6575581ED3C4A080C3FC359594852C6FA23B784C4
DB4B1AC424E90B4505E356F1C575F8C57FE52642AA261D219ED5B82760638581
CA02> |
103 <001C60D8A8C9B8096E3702EF2E87B058AE842B207DEF574BB847CCD9511
2A7D3AF2292BD58741562B9BCC6292F597F1D5EBCE0E807704FFEEE94A1C26C1
217A6936D01C623E2C5895684B5E303EB80975424515B84C7D69EC348651F119
29DBDB8CCFDA7B6F9C1B9009E28D94026AB5BD0038F56495AC64C32BF2B47869
240B887B12AEF109BCAC343F49ECBE16F183F080759D157DB3263D01310CAAE2
C54DDFFEC62D46A41ECF6143B8F31D2939D6A574F5434EA593BC099DA68B97E5
EC7884FCC239BC4456DDBC4F814CD1EB45CF26D8A7ABC526080AD2183CF51F78
6640C20279AD04AC16902E6B89034C7C376D1FE7A7CD7A590466C8F02B429577
E182F4F0EAD1CF88B5E7E78E67C50CD4796431188A92962F05200A8DB3D5ACE7
A4B4F41560DE12E28A90ED4FC728B93C15758> |
73 <001C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E9263877
94826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10B
DEE7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA0767835
E16CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD1
0CA1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A7
1DED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5A
F1021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944C
11C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276FA
7871C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEEE
422DBAD62FF97870FD2250B1790169B64F76> |
91 <001C60D8A8C9B78256DD09855002C1F642102EC28B82F48E21B28CD8D116
1804F5A9A747AD2624D941564B1DAE90411653B58E89369C53390A39373C180E
921901CFF6CB5B97D1E2F6881105A39AF049AF7BAB6A1217A5C2B8A9279563CA
1276FC02BACD1EEE8432C4000AF8AC8B81C2B3B82F6968BF9741308293C4341F
D8C1BF06F82527B4BB1BFEB05C7AAE16687F72280798047F2DE0F0B0C1A73D4F
FEFAEDFA40DAB27F9393250746B607E6DD1B8488942E5E65DC28EF4BF6100003
8A490B102DA889E711AC446FA2AE5AF546DC759185DC2C75747BB2C76E9F9009
21B79B64F414F07BA72B97757066640FBFE321B86C7EC04E0E0AD1B078011E47
9036E3D4D1746C4387436B0F75E38AB678D2BFE9BAAAF021F8> |
106 <001C60D8A8C9B811DA5D4543EFE763FE07FB96B6C57E1041B720B123957
55AD170E1C95BCAF4A2E07F08B3527B85FB4B749D3F56190F68B968E525451C3
AE3228733358D3B0A4C671159FB2D66F4623773F95AB53B6E5F82C4D1162EF1F
1D4E57FDA1EEF70327DBE4F94D4CA953DA49B009A6CE451FDF5FD819F6892B65
7B7073F3DB90026C98348CDA83213F5FE3803287637443B9875961ADEC93A662
F367D30B1D64FEC94C3B7D13A776301EC9C6F446E01C4556C7599D35348744BB
4C07BEDF72B7B19A9909847F0BA47C222B2E533F87C4B7AA516B5A1E0E736524
2B5879EFE81A74993AD272F8F9838C2A26DF98C12A45718CB59AC62E5107E8E3
4F27910F2367476C7C04E0E4233AFE86333074EFF0032ECDB6435F19DBFBCDB1
9D0579CF4055335373B7C3C1BD559B22725F49EA0166722B1401585> |
3 <001C60D8A8C9B888C146> |
93 <001C60D8A8C9B78181CF98F408291F4DD5CDCB6D065079E3C32B2DC7574F
85010122317EAC4CB787C5DCCAEA2DCDF59718E98AB798D0A7C1D0A4AFDAF289
8702DB340B4925E43E83E5146EC936D266F11A185F61F58114BA94B80C81D7D8
DCD3FC28BA75D8A38DA3AC10DA8DE7F6935CAB2D98F05D04B7C0D79A2CEACAB6
61A11B789E89B6D4B148DC1A7CB3550A2956556AF6D6068A328964C77CAC19F9
8775B69DBB8B2282422672CD9527E49182094C282B5043D56AD150402E5BC1D0
FBCC13812FC82AC63ACFCEEF5D77A3A595F46555D44C6632B4645C234C6CF48B
E68F54878A59D4C863675CD2B4AF968FD7298C1FD09F77D9> |
69 <001C60D8A8C9B719BD263F1C66E176AB1A9B9A5A3A8367D7DDD55624575D
8330769E89EDE2B210CAC0C33466D934E07EE8C5D0A40F156D15CC57AF923B25
0573D6A3F9259B0A3431793F366C2A4E1951E4FEDD7CFAEAA854A72A9831B3A1
8934A1E3BA67B1825DD68D168A926FEDC2EA7260DFA821668535829AE8FBDD79
7481380CC39C4AF2C6ECADB05FF3DA8E4A111EB4A3E3B59FFB126A3A37C4B5A1
13868987F4611BA41E12178776F476582469050F58D9C2434F2F75015CEE522E
D8E12899B67502531E8AB98B42F667383D35B65B55576BE7A1323FDACE70DEAB
60FF6C739F5C1FBD6BC404A862F611E798DE5F7D20626F50E2F0A84DB6262D7A
A298F592743052BB8FB5A0340AD9FF86B3B347A6731F17F7E35046670F71F409
67A7BFAB9BA0179B380201FC6F3EA37CFED86A9E1255880201A87ECC18F17716
BB9085A306CE> |
104 <001C60D8A8C9B70C3961F94CC53AE3C44F5C46AC95D939CE1FE52948C4E
EE785E0FF2F5DF6799D25AA3A56FE93A6DDD98DB4188430DEDDFD51DDDD0EC4F
B2D10B9991F4B7C4CB67E794966F2D33D75FB1F2DDE6EFD4602642CFD9DACD32
FA36EDA8C51397D987B567B7680BA36338AB94FBCABA34B92422BB4A6BB2CBE6
206F57AA0A2A8A2C374FA199F756B8C6892CB5299CACCD25A505726792E9EDF4
4792CB8DB652BC2C1E7DA21138C5E5015116A1741E17007ED6C22C23344D4AB6
8621949E14CE8A88829C82C8B15CED1FB4CCBFE9D40DE0799FB0EF64F8A219CA
309825B69AD031354812E61F884D22EE3AACEE031A6653B1519602284061900E
2F827432CCC337FB59A551E141C30CC55CE4632D5C31E3FC4C5BA252294FEB6F
D8075BB079C3F24431E8D5C774D59E09AC7C64BB8C53AB6E9F8C7BB53DE483CF
4234705F7D8C8DAE52A381BB24528B826C29FDDB8CF4F5222BFD577514759571
98351D7133DAADA661E1D1810802FDA79930F2C9526AA05D8290ED2102740497
D7344C308314BA0C891CD0738B84DA16A83588E2CD4B55EB551DFD1259DA456F
C9912D108BF1E0B750B68510C7DC36D8861FED79A1710E9E95C8C80B37227AD9
7F0B3CDDD> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IAAAAA+Calibri-Bold-Identity-H /Identity-H 0 [/IAAAAA+Calibri-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNM+Calibri-Bold /IAAAAA+Calibri-Bold-Identity-H findfont ct_VMDictPut
FZJXNM+Calibri-Bold [18 0 0 -18 0 0 ]msf
33.563 387.274 mo
(\000d\000<\000g\000I\000[\000j\000\003\000d\000g\000]\000E\000I\000h\000h)
[9.64792 8.87393 6.19189 9.05411 9.48587 6.22787 4.06796 9.64792 6.17404 9.66605 7.52399 9.05411 
7.16391 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
2.30905 408.874 mo
(\000E\000]\000[\000j\000Q\000[\000k\000I\000h\000\003\000j\000]\000\003\000I\000r\000I\000E\000k\000j\000I)
[7.45203 9.48587 9.28784 6.01199 4.12207 9.44989 9.44989 8.94589 7.03812 4.06796 5.84995 9.48587 
4.06796 8.6759 7.32596 8.94589 7.59595 9.44989 5.83209 0 ]xsh
246.165 53.1575 mo
163.646 53.1575 li
163.642 52.1918 li
160.642 52.2058 li
160.646 53.1575 li
78.307 53.1575 li
78.307 11.3686 li
246.165 11.3686 li
246.165 53.1575 li
0 0 0 0 cmyk
f
246.165 11.3686 mo
78.307 11.3686 li
78.307 0 li
246.165 0 li
246.165 11.3686 li
f
163.646 53.1575 mo
160.646 53.1575 li
160.642 52.2058 li
163.642 52.1918 li
163.646 53.1575 li
.694118 .631373 .619608 .584314 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: FAAAAA+Calibri-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FAAAAA+Calibri 15 GetGlyphDirectory
4 <001C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F2
2F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E
0C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D9
1764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BE
A5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794C
CB8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A3
08F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |
100 <001C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E3572
2532C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE
54B9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED
971ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF27
4FFE1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9B
F18F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A3
30877D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE
9430EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E2
96730C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D40
9BB55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47
A8C1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E30
95964CC84> |
60 <001C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA
57F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA1
0501967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E3
2D9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44
BE33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E35
4020A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA
9319522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE439
4FED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B78
140CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF
41845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F
70E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC
70> |
103 <001C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A
722A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D
2D5B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE00
8B7993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF
1C0B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5
C47D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5
832FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0
688822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20
889D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BD
CE878453F5E6DCAD449D1F3B7D54D32C49DA0> |
89 <001C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CE
EB752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61
F4A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB
55EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F893729
319FB81429> |
71 <001C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F
3F003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB5
161C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A21
8BCA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A
2CF6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D31
0ACCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE6
99E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2F
BF94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A1
5545986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F
77872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD
97C6> |
141 <001C60D8A8C9B8707CDC942CCCB390E2EBDECE84299C1D70B94D48EDEFC
24B81F8B75DA3F1918432B2F409095DAC0582173DC4C65D9100D9F1EF0E29589
05CA03900BBC017CC2C22078867D9B93E99C98F73B8E920E64E58EEAC1F48E6F
F3AFDD35294E3193433723D3D3D96A7A9DC268DA248D35EA485B997E6CEB982E
59BFA79BFF841543DC2846254603C28F3C8573C4B1EA3072066B804365A5C417
413B2C8DDE73D> |
113 <001C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71
B032F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72
515DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07E
BED39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE
9095E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09
3952061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349
006897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF931
0B124D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81
702937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930
B940AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA151
46D5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524
D8EC40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |
90 <001C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED8
23786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E30
35F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE6
9B38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949F
DAB683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B
538683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB7
6AF894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDC
CB40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC
808623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D5
9A8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5C
ED8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87
A06867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28B
D59A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497
E6925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |
115 <001C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E3654
28EEA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE
9866EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B
7438090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06
F534EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0C
CC6D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA
13492A2A7CF82E9D18F6E0413> |
43 <001C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA
1CDE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083F
A2B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C57
9C4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C19328
72FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD
53A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8ED
ADF4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DB
B6727B1AB10957F28903A4930A> |
25 <001C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702
B19492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306B
F0344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF3
01F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A
35B46CD69D> |
146 <001C60D8A8C9B8707CDC94303E37DBF814430AE13F466399AF45F4E2B3F
89F1331392514CB2CC316EBDD1ED64213514C809EB3DE2C0E51BF343AF1E2D21
72C7FC5B88D1E2483154F0B2F142C199067BB94ED6CCDBEA1D87A6A43C0E6DE3
3C235013A584D74F400F48B067A133859AA79832E88C5D96E9349092CC48DB7A
D229E7276B19762957ECC66EACF2162CEC78C94CF76E3E6C9C47CF30E47D165C
EEEF5666DF36F79> |
79 <001C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D41
2C8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450
F6F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A
0CBCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A33
26D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EB
ED17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD392
812122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380
BE2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F
4DFD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496
F0E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D2
83C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E7
2EDA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D58
31197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4E
E7C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549
FA9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2
F6778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D20794
7A0FD5903276> |
78 <001C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2F
430B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8B
9BA6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3E
F14FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A386
DF00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D24
CB372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B7
9AA73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A6850
0306E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBCB
C0C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55F
26525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B6
BEE15BB0B269E8ACB562> |
!
end
end end
%ADOEndSubsetFont
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
100.972 19.0064 mo
(\000\004\000\003\000d\000<\000g\000I\000[\000j\000\003\000d\000g\000]\000E\000I\000h\000h\000\003)
[10.4041 4.06796 9.44989 8.62206 6.03012 8.94589 9.28784 6.01199 4.06796 9.44991 5.97601 9.48587 
7.59595 8.94589 7.03812 7.03812 0 ]xsh
130.306 40.6064 mo
(\000I\000r\000I\000E\000k\000j\000I\000h)
[8.6759 7.32596 8.94589 7.59595 9.44989 5.83211 8.94589 0 ]xsh
346.583 105.012 mo
(\000\004\000\003\000E\000P\000Q\000Y\000G\000\003\000d\000g\000]\000E\000I\000h\000h\000\003\000Q\000h\000\003\000E\000g\000I\000<\000j\000I\000G\000\215\000\003\000q\000P\000Q\000E\000P\000\003\000Q\000h\000\003\000<\000\003)
[10.4041 4.06796 7.59595 9.44989 4.12207 4.12207 9.44989 4.06796 9.44989 5.97601 9.48587 7.59595 
8.94589 7.03812 7.03812 4.06796 4.12207 7.03812 4.06796 7.59595 6.03012 8.94589 8.46002 5.83209 
8.94589 9.44989 4.48187 4.06793 12.8521 9.44989 4.12207 7.59595 9.44989 4.06793 4.12207 7.03815 
4.06793 8.62207 0 ]xsh
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Calibri-Bold 3 GetGlyphDirectory
115 <001C60D8A8C9B741FC3342012EA60F1002BDD0438156B641629D59554CF
7CB9EAD9463221AEC8B8F5B253729623B7A2EF0D3CFCE8A0130ACFED15CC8931
C576C134F7B0DC6BA69FCC1D3B142D638D30211D94FC190C6BA94FCE9E281D42
66EF1E1305A6F90C18351A8F4A9A33B5818F8EC054C92678D4BE0D61C5CE2944
03BEE15CA5325E2AAAD3AEB808F7725DFC94D606CACC435FD59BA7C1EA17757F
E45E337025587E49E7B457DFA96B9D8F7AF852A0E6D6A474CF9C7627B8F6CD71
58A8A50DC613ABA1515C2> |
78 <001C60D8A8C9B82E34BA8345420AB5B56C87B3324072F79B333A2AD398AB
D9C1C2EA51C46F3AA79B9C5266C362128101000FF25B7A09C7921D6A60C7D0E2
302A477F9DC8532CE311A572FE415EAC33F5FC6FE7C4AC619462BA3766FA3CE7
BE5313F186A0229CA736603FEB693F616D863B5B4610A5D1DDE34F5BDDDB1A7B
7561887626CC89D1027D74B6A998B7626618615399077A821334F1F5A19E1F45
2D28FFB1112D5B47580426B77C77FD9755334A2C539E1B1B16EDBD30BAAC896B
DFB62834EE3B21E483B720E8F54CFA44EF352AD3E1EF66415D18B0B1EDC21E17
0EF0C474188E1941A2E77A77C7A324282126B693416515B1B7991E79AF0D9D9E
ADCFE7BA25EA1E03872AF7BBCDBEFEFF2D0DF2E3DB323ADEA69D5185321166F6
E12C828675970E363E6F0FEA1326F0F80F9B9751A4A0339F653F69FA8ECC3338
F90338A7FE0450C8F1D9> |
81 <001C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F30557
96FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EED
72B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7AB
1831CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9BF
A44F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B56
3D37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A3
06CE> |
!
end
end end
%ADOEndSubsetFont
FZJXNM+Calibri-Bold [18 0 0 -18 0 0 ]msf
346.583 126.612 mo
(\000E\000]\000d\000s\000\003\000]\000N\000\003\000Q\000j\000h\000\003\000d\000<\000g\000I\000[\000j)
[7.45203 9.66605 9.55783 8.51413 4.06796 9.66605 5.6879 4.06796 4.40991 6.22787 7.16391 4.06796 
9.64792 8.87393 6.19189 9.05411 9.48587 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
346.583 186.609 mo
(\000\004\000\003\000E\000P\000Q\000Y\000G\000\003\000d\000g\000]\000E\000I\000h\000h\000\003\000Z\000<\000s\000\003\000k\000h\000I\000\003)
[10.4041 4.06796 7.59595 9.44989 4.12207 4.12207 9.44989 4.06796 9.44989 5.97601 9.48587 7.59595 
8.94589 7.03812 7.03812 4.06796 14.3641 8.29797 8.13593 4.06796 9.44989 7.03812 8.94589 0 
]xsh
FZJXNL+RobotoMono-Bold [15 0 0 -15 0 0 ]msf
523.981 186.609 mo
(\000 \0003\000 \000\036\000t\000u)
[9.00006 9.00012 9.00006 9.00012 9.00006 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
577.99 186.609 mo
(\000\003\000\004\000+\000\031\000\003)
[4.06793 10.4041 9.28815 4.51813 0 ]xsh
346.583 208.209 mo
(\000j\000]\000\003\000g\000I\000d\000Y\000<\000E\000I\000\003\000j\000P\000I\000\003\000d\000<\000g\000I\000[\000j\000\003\000d\000g\000]\000E\000I\000h\000h\000\222\000\003)
[5.84995 9.48587 4.06796 6.03012 8.94589 9.44989 4.12207 8.62207 7.59595 8.94589 4.06796 6.01199 
9.44989 8.94589 4.06796 9.44989 8.62207 6.03012 8.94589 9.28784 6.01199 4.06796 9.44989 5.97601 
9.48584 7.59595 8.94592 7.03809 7.03815 4.48187 0 ]xsh
346.583 229.809 mo
(\000Z\000I\000Z\000]\000g\000s\000\003\000h\000d\000<\000E\000I\000\003\000q\000Q\000j\000P\000\003\000<\000\003\000[\000I\000q\000\003\000d\000g\000]\000O\000g\000<\000Z)
[14.3641 8.94589 14.3641 9.48587 6.33609 8.13593 4.06796 7.03812 9.44989 8.62207 7.59595 8.94589 
4.06796 12.8521 4.12207 6.01199 9.44989 4.06796 8.62207 4.06796 9.44986 8.87396 12.8521 4.06799 
9.44989 5.97601 9.48584 8.46002 5.90405 8.62207 0 ]xsh
346.583 300.333 mo
(\0000\000P\000I\000\003\000E\000P\000Q\000Y\000G\000\003\000d\000g\000]\000E\000I\000h\000h\000\003\000k\000h\000I\000h\000\003\000j\000P\000I\000\003)
[8.76599 9.44989 8.94589 4.06796 7.59595 9.44989 4.12207 4.12207 9.44989 4.06796 9.44989 5.97601 
9.48587 7.59595 8.94589 7.03812 7.03812 4.06796 9.44989 7.03812 8.94589 7.03812 4.06796 6.01196 
9.44989 8.94592 0 ]xsh
FZJXNL+RobotoMono-Bold [15 0 0 -15 0 0 ]msf
541.419 300.333 mo
(\000 \0003\000$\000/\000t\000u)
[9.00006 9.00012 9.00006 9.00012 9.00006 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
346.583 321.933 mo
(\000\004\000+\000\031\000\003\000j\000]\000\003\000j\000I\000g\000Z\000Q\000[\000<\000j\000I\000\003\000Q\000j\000h\000I\000Y\000N)
[10.4041 9.28812 4.51813 4.06796 5.84995 9.48587 4.06796 5.83209 8.94589 6.26413 14.3641 4.12207 
9.44989 8.46002 5.83209 8.94589 4.06796 4.12207 6.01199 7.03812 8.94589 4.12207 0 ]xsh
18.8759 139.163 mo
-6.10352e-05 139.163 li
-6.10352e-05 80.9822 li
18.8759 80.9822 li
18.8759 139.163 li
0 0 0 0 cmyk
f
.749752 .679194 .670527 .901579 cmyk
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-260.579 105.012 mo
(\0000\000P\000I\000\003\000d\000<\000g\000I\000[\000j\000\003\000d\000g\000]\000E\000I\000h\000h\000\003\000k\000h\000I\000h\000\003)
[8.76599 9.44989 8.94589 4.06796 9.44989 8.62207 6.03012 8.94589 9.28784 6.01199 4.06796 9.44989 
5.97601 9.48587 7.59595 8.94589 7.03812 7.03812 4.06796 9.44989 7.03812 8.94589 7.03812 0 
]xsh
FZJXNL+RobotoMono-Bold [15 0 0 -15 0 0 ]msf
-80.6491 105.012 mo
(\000!\000*\000-\000&\000t\000u)
[9.00009 9.00009 9.00009 9.00009 9.00009 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-26.6403 105.012 mo
(\000\003\000j\000]\000\003)
[4.06796 5.84995 9.48587 0 ]xsh
-260.579 126.612 mo
(\000E\000g\000I\000<\000j\000I\000\003\000<\000\003\000[\000I\000q\000\003)
[7.59595 6.03012 8.94589 8.46002 5.83209 8.94589 4.06796 8.62207 4.06796 9.44989 8.87393 12.8521 
0 ]xsh
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Calibri-Bold 3 GetGlyphDirectory
80 <001C60D8A8C9B78256DD098552A13EB08FA6FA0D6709438B3D102551767C
A1A9E996A468589FBA293078984D3CE935CE0231F88F2DC01EAD3D4D7C30F367
B4FF8590AB3DC282E07D2BBA78BF8F6BA1A9D28C699F2490709333B2A7C7AB58
F9879C4857A63288F65938A4C40EF9DE33C4B5617CFAAAA9D228423A38CF0BAF
30AE63C9A38E0A50BB8D2C76240754A3BB0D75EA5E0E60276B334DD25FF24277
F3E187BAF4700B1AD1BCB29E368AE110915D56F0FC3F4CD7DD4385E5BCA564DC
E492FAE459FD4A2AF8DF2CF0ED2C290B57C2260C120EFB0A6113A9C2037BAB70
76D8E7A3A0B41FAD04D3C3848E3E5A113E98F22BCEA62166624A15F5EE45C801
EAEAC69B6F067944425A7B9C87F60A063958733EC34ABF5DA43D> |
89 <001C60D8A8C9B874A685BEE6A5E28F9948AE1E7D147199A7FD5C3385C67E
A3BE0E4BDDEEBED94EEAEFFC708E6FBFBB110A4FD3B0B2C6A50B9DF51D26DA8F
79E50A98C439853420902774615E5C4AA802BC14286E49C6715A4394D046A168
5B7F2557950D872EDAE985E8B69D5B3A1679FE91E5F44DD94A755B4DC7CB2094
A762633492> |
71 <001C60D8A8C9B78256DD14A89B5C5761E51CC6D0784EB7F41BE6BDEA5F82
55D1FE24990FE1D15D28EF8F0C7762E519633FBA92FD296338DBAB81155F27C9
1D1316EB09C02392CC558827E85C7882426438ED0C996E6AF5FBAE3E4865B837
61EF22FDB1EFE24248D3B29570D3BD8C05EE4D4D69B81EDAFB096EDC81F15627
6853B908EFB15EC41828B5226E127DAF4B807D256A2E4F1FA53CE3C1E83FC9F5
99D0D693317C924E42F44A22D2B6AE0DB64F8C1AF35225ECB5B9AEAA2C23E515
F95B653AF3AAC6CA0651281FD546D48B6A07C75CDB334548DE80447540B25382
6671E04C7BA03594D53214958E122B2F845054AC5F5E297C0C37736732726AA3
C727298E5B49D9D588DF2AD7FFFA7F426D61B6C814687C386CB5C77EDDB4A48C
D16C454E1C3DCC2832833F01D8523A139255C5F9D553BFD44D8DB07E9C0CCAE0
8F8D58> |
!
end
end end
%ADOEndSubsetFont
FZJXNM+Calibri-Bold [18 0 0 -18 0 0 ]msf
-162.704 126.612 mo
(\000E\000P\000Q\000Y\000G)
[7.52399 9.64792 4.40991 4.40991 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-127.011 126.612 mo
(\000\003\000d\000g\000]\000E\000I\000h\000h)
[4.06796 9.44989 5.97601 9.48587 7.59595 8.94589 7.03812 0 ]xsh
18.8759 345.386 mo
-6.10352e-05 345.386 li
-6.10352e-05 265.402 li
18.8759 265.402 li
18.8759 345.386 li
0 0 0 0 cmyk
f
.749752 .679194 .670527 .901579 cmyk
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-260.579 289.432 mo
(\0000\000P\000I\000\003\000d\000<\000g\000I\000[\000j\000\003\000d\000g\000]\000E\000I\000h\000h\000\003)
[8.76599 9.44989 8.94589 4.06796 9.44989 8.62207 6.03012 8.94589 9.28784 6.01199 4.06796 9.44989 
5.97601 9.48587 7.59595 8.94589 7.03812 7.03812 0 ]xsh
-117.212 289.432 mo
(\000Z\000<\000s\000\003\000k\000h\000I)
[14.3641 8.29797 8.13593 4.06796 9.44989 7.03812 0 ]xsh
FZJXNL+RobotoMono-Bold [15 0 0 -15 0 0 ]msf
-52.8053 289.432 mo
(\0002\000\034\000$\000/\000t\000u)
[9.00009 9.00009 9.00009 9.00009 9.00009 0 ]xsh
-117.212 290.602 mo
-56.8746 290.602 li
-56.8746 292.222 li
-117.212 292.222 li
-117.212 290.602 li
cp
f
.749752 .679194 .670527 .901579 cmyk
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-260.579 311.032 mo
(\000j\000]\000\003\000q\000<\000Q\000j\000\003\000N\000]\000g\000\003\000j\000P\000I\000\003)
[5.84995 9.48587 4.06796 12.6541 8.62207 4.12207 6.01199 4.06796 5.12979 9.48587 6.26413 4.06796 
6.01199 9.44989 8.94589 0 ]xsh
FZJXNM+Calibri-Bold [18 0 0 -18 0 0 ]msf
-152.183 311.032 mo
(\000E\000P\000Q\000Y\000G)
[7.52399 9.64792 4.40991 4.40991 0 ]xsh
FZJXNJ+Calibri [18 0 0 -18 0 0 ]msf
-116.491 311.032 mo
(\000\003\000d\000g\000]\000E\000I\000h\000h\000\003\000j\000]\000\003)
[4.06796 9.44989 5.97601 9.48587 7.59595 8.94589 7.03812 7.03812 4.06796 5.84995 9.48587 0 
]xsh
-260.579 332.632 mo
(\000j\000I\000g\000Z\000Q\000[\000<\000j\000I)
[5.83209 8.94589 6.26413 14.3641 4.12207 9.44989 8.46002 5.83209 0 ]xsh
145.488 215.285 mo
106.098 215.285 li
106.827 213.299 li
107.848 211.892 108.876 210.491 109.906 209.088 cv
117.205 199.137 124.593 189.083 130.151 176.46 cv
130.838 174.9 131.498 173.299 132.125 171.655 cv
145.488 171.655 li
145.488 215.285 li
101.706 215.285 mo
-6.10352e-05 215.285 li
-6.10352e-05 171.655 li
122.104 171.655 li
110.568 203.101 li
109.546 204.508 108.517 205.91 107.487 207.313 cv
105.555 209.948 103.615 212.591 101.706 215.285 cv
0 0 0 0 cmyk
f
106.098 215.285 mo
105.391 215.285 li
105.868 214.622 106.347 213.959 106.827 213.299 cv
106.098 215.285 li
f
110.568 203.101 mo
122.104 171.655 li
128.906 171.655 li
128.423 172.878 127.922 174.076 127.405 175.251 cv
122.77 185.781 116.792 194.533 110.568 203.101 cv
f
105.391 215.285 mo
101.706 215.285 li
103.615 212.591 105.555 209.948 107.487 207.313 cv
108.517 205.91 109.546 204.508 110.568 203.101 cv
116.792 194.533 122.77 185.781 127.405 175.251 cv
127.922 174.076 128.423 172.878 128.906 171.655 cv
132.125 171.655 li
131.498 173.299 130.838 174.9 130.151 176.46 cv
124.593 189.083 117.205 199.137 109.906 209.088 cv
108.876 210.491 107.848 211.892 106.827 213.299 cv
106.347 213.959 105.868 214.622 105.391 215.285 cv
.694118 .631373 .619608 .584314 cmyk
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Calibri-Bold 1 GetGlyphDirectory
43 <001C60D8A8C9B7876E7B6051918B0CB59DE076B64C8C49A5DA02FCDF071B
DFFAD7C92735E6137051509AC8CB684E8479BF8D6E587DBA864F50A4E9968B90
0101533A81B7315E5635E910F633B3C8F74196CCCC1B0507109F1B1BB9A29E7D
812E4438818B1C7D155075E4CD25D535EFA79BAE24E64D32CD5F9BC09B4F74C2
78A3C1BD035A40B815B3035706B0AD5FD304DCB7953E153A1AFAA729815057B9
B918248D356F4E0C23746C525E6E30C1CDD3880B36A24277890D67A7BAA12BFD
E85E896F0F4E0CFD215BEC86CD1A1AAEDF5027F5D656DD8EEF175D1789024226
8FCE601EE1354322C31F441CD975> |
!
end
end end
%ADOEndSubsetFont
FZJXNM+Calibri-Bold [24 0 0 -24 0 0 ]msf
28.8227 201.446 mo
(\000+\000<\000g\000I\000[\000j)
[12.312 11.8319 8.25586 12.0721 12.6478 0 ]xsh
303 165.651 mo
249.247 165.651 li
249.443 164.759 li
248.761 165.651 li
241.531 165.651 li
239.414 161.738 236.712 158.164 233.604 154.938 cv
225.919 146.969 215.767 141.106 205.618 137.451 cv
195.549 133.828 185.548 132.41 178.11 131.207 cv
178.11 127.999 li
214.26 127.999 li
217.615 127.999 220.35 125.344 220.48 122.021 cv
303 122.021 li
303 165.651 li
218.067 165.651 mo
178.11 165.651 li
178.11 136.89 li
218.067 165.651 li
0 0 0 0 cmyk
f
214.26 127.249 mo
178.11 127.249 li
178.11 122.021 li
219.73 122.021 li
219.667 123.435 219.069 124.708 218.131 125.645 cv
217.139 126.637 215.773 127.249 214.26 127.249 cv
.168627 .0509804 .00392157 0 cmyk
f
214.26 127.999 mo
178.11 127.999 li
178.11 127.249 li
214.26 127.249 li
215.773 127.249 217.139 126.637 218.131 125.645 cv
219.069 124.708 219.667 123.435 219.73 122.021 cv
220.48 122.021 li
220.35 125.344 217.615 127.999 214.26 127.999 cv
.74902 .678431 .670588 .901961 cmyk
f
238.083 165.651 mo
218.067 165.651 li
178.11 136.89 li
178.11 134.246 li
180.829 134.682 183.832 135.147 187.021 135.732 cv
192.529 136.741 198.581 138.106 204.602 140.273 cv
214.391 143.793 224.175 149.471 231.443 157.02 cv
233.999 159.672 236.245 162.552 238.083 165.651 cv
0 0 0 0 cmyk
f
241.531 165.651 mo
238.083 165.651 li
236.245 162.552 233.999 159.672 231.443 157.02 cv
224.175 149.471 214.391 143.793 204.602 140.273 cv
198.581 138.106 192.529 136.741 187.021 135.732 cv
183.832 135.147 180.829 134.682 178.11 134.246 cv
178.11 131.207 li
185.548 132.41 195.549 133.828 205.618 137.451 cv
215.767 141.106 225.919 146.969 233.604 154.938 cv
236.712 158.164 239.414 161.738 241.531 165.651 cv
.694118 .631373 .619608 .584314 cmyk
f
249.247 165.651 mo
248.761 165.651 li
249.443 164.759 li
249.247 165.651 li
f
.749752 .679194 .670527 .901579 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Calibri-Bold 1 GetGlyphDirectory
13 <001C60D8A8C9B78AC3254CB836613B50FEE731C2E5FF280A909853D6AAC7
5704A475106F343DA61338D6EE17C81455E5E94E3F2741FBC5A7A55DD147D129
E99F091EF153D9400A04C295AF15CFE8E5EF897CA1760331E3EC16FF6DDF59CB
E4B8B189FBC000E1020B39AD4C860C477A6DADD3B61FF9666F144B51FA295CD7
47BE0B0975C46FB9A64CF31B5B38EC2E16C2393646605BF1D7CFFCC4A2898D2D
56C78772F400DB0DEED21E9AD336A75503A00BDBD615F8BA93E3CAB6C42A285B
4AEA5BF202EF5C37256592BD4040034E3A7EBDD1E055E2381646DDB411A05665
A7BE606403C9AFF5D744DFBFAE5AFB2DC42D9F6BC86ED0962C547BBABC78E279
A53D52EEA95D4976CD7142776F2988E43A7BE44D2CDF85216C769CE74967C09E
A48A353B8AE0C3F6529C709DBE56EBBF40E019180A2AC98F4F24B439D8B50372
6DC1BB6799D23A36A5761BC46D9B39706FD587C314645EF07556EBA44DDF9958
2B6E> |
!
end
end end
%ADOEndSubsetFont
FZJXNM+Calibri-Bold [24 0 0 -24 0 0 ]msf
236.914 151.811 mo
(\000\015\000P\000Q\000Y\000G)
[12.6962 12.8639 5.87988 5.87991 0 ]xsh
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FZJXNM+Calibri-Bold-Identity-H uf
/FZJXNM+Calibri-Bold /CIDFont ur
/FZJXNK+BookAntiqua-Bold-Identity-H uf
/FZJXNK+BookAntiqua-Bold /CIDFont ur
/FZJXNJ+Calibri-Identity-H uf
/FZJXNJ+Calibri /CIDFont ur
/FZJXNL+RobotoMono-Bold-Identity-H uf
/FZJXNL+RobotoMono-Bold /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
