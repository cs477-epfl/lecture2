%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A92w75nm_d8aqsi_of4.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/9/23, 15:04:53
%%BoundingBox: 0 0 396 99
%%HiResBoundingBox: 0 0 396 99
%%CropBox: 0 0 396 99
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 871 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2024-09-23T14:59:54+02:00"
   xmp:CreateDate="2024-09-23T14:59:54+02:00"
   xmp:MetadataDate="2024-09-23T14:59:54+02:00"
   xmp:CreatorTool="TeX"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:1a3a1652-fc02-49ff-88eb-29b6320824cb"
   xmpMM:InstanceID="uuid:c92ccb69-f3f0-49ae-819c-2ba04b878d0c"
   pdf:Producer="pdfTeX-1.40.14; modified using iText® 5.5.9 ©2000-2015 iText Group NV (AGPL-version)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -99 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 99 li
396 99 li
396 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+NimbusRomNo9L-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FAAAAA+NimbusRomNo9L-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /F put
dup 99 /c put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 117 /u put
def
/FontBBox {-168 -281 1000 924} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/BlueScale 0.0396249 def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38 43 53 60 73] def
/StemSnapV [78 85 91 103 109 115] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/F <1C60D8A8C9B7EF322BCE349315DC362BCA8CFE4FA18BB639D443336F7111
E2FACF60D2E19F1D435E96E49FD0AF135C8F4D593F674BA833D2635B8F02FCB2
BA0EA4D7637689C705ACF839A843947A142679A187B852855766FB975C8A7F4A
36CBB0767C130BA6A421FFE56B2026B49CFD6C7C20869DFF5A9F134D0B5DB06E
3DBFFEF295> |-
/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD7913AEB5D830EAFE
778D8CA9FE61C9F1D7F341AAC32F9CA6E189A5065ADF2D5F773BF6F8A8426463
FFD760FDD2A3FB2FF93A8F0D901F4D79430D0C49AB088DDE46CA955357CE80E9
61F17603291AD5A9BCF763> |-
/i <1C60D8A8C9B854D08887A9543335390AEE4DB40199897ABD16F19F24E0DE
858E4CD6E00B26B1829973C0FE01CFA3E329A9D0E2AFEC96CBC670DB940EEA7C
A262004364C378CC527E7F0DFBFD9ADBA6EF6E2301F19CF6860BAC9BB8A50A02
F9217A15FCE88184A4DF0C717E46391573826F599D2DFE27F4F9D82251BA41CC> |-
/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C630F986F2AB3ECE6D2
578D5DEC50402B578B4E6CE0632E8947CBBCEB7543031081448F167C88EBA303
B4D2C70599E4B2DBCDA2B9DA37C571B7CFFA556EE2B6CDE54270E5EAA3F80E68
09540E2D41E62BFC6D0AC69B3E0C88DD3AF2AA5C4EA7ABFC511536F434A8C9EA
34BFE186> |-
/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34D2E8E7AB07F99
F61992CA50ADD51C5A93B4B134C15D36CEC8323CBBE9C0D3A63155E9EC74B781
308A5B21C88AA604D5E026CDBDC830C30107F5FE4F678EF57725AF37DE4B> |-
/t <1C60D8A8C9B854D082F829CADA2402D0C363E188624B3DC91E66507A8AF7
69E833E0645176BA592C3DD44ECFC4C7D84DE06A044A230214D945DF321A4D72
94F214FA4A69DDBFFDC37CE6C0694F8A402CC82FE94C2B9274D4DCEAB0696C3D
253D2964904B34E1D9065A46BEE535DCD936F67C56C176C8E7F77F2F60DE69B8
6A560016E73AE51935CC218444D0EB76BA0FFF40D1297093F9> |-
/u <1C60D8A8C9B7A73DB6F2A4B59B2312EBBBE2417FA44F369C1F0ED6D6A369
96AE53A137DB00AA7567A9CEC49CE2737379BD17250255FC7E3093655F665038
8D1064F7AC48308F1DF9CB661A2773CC10559E7C61A5DCDB640FF06049B6ADB9
F9495291BF4F69DA004975E0967945B04D0D1E0AADFA85B338744A9D49B5C34C
0392DD8C9A2D5D0FBF7A81667B636E9E308B1316F61183357C46ADD0B9B8732D> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMA+NimbusRomNo9L-Regu /FAAAAA+NimbusRomNo9L-Regu findfont ct_VMDictPut
/FZJXMA+NimbusRomNo9L-Regu*1 
[70{/.notdef}rp /F 28{/.notdef}rp /c 5{/.notdef}rp /i 4{/.notdef}rp /n 
/o 4{/.notdef}rp /t /u 138{/.notdef}rp]
FZJXMA+NimbusRomNo9L-Regu nf
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
11.352 8.36902 mo
(Function)sh
.398 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
82.535 11.955 mo
82.535 6.10351e-05 li
@
%ADOBeginSubsetFont: FAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMA+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1A3F05995A9E21B3
849012DBE3E5D9BEEC357D7966D622D0BDA2A87D7DF76C988A3C6DB72B7AC755
68902A6FAD90FC53E6498F9E166085199E8D84083DB27D286921A07C13F283E6
EF1D868FB1C61773EE28620908EC2A5479956F05B0F020BC9E52293B72C896E3
409360C9D09608CE13546B> |-
/R <1C60D8A8C9B64EDF88216CFE4D3F3D06C439990B9502E48B1E9505CADB19
021894EAC2A555525553B38C5C90F2EB03B1EAA9C843F3EC6B1FDF49C4D2529B
157D754C9D04B9C2E4D5F9153F875E924C7C70B9AE574EA090FB61D41C37FC51
04946381820B77D1612851C3FA0E44B55800E05B6E555083090B55D924DA4751
63F3F85730D71659BCB18AB61841F49D0C395BFB5282E1ECCB55DDA64334BE28
FCDB0DD4220B74399C87C53A8CCBF542DE115866523BA0> |-
/S <1C60D8A8C9B7EF3225294A5FFA2220B3A70A7F29A870B3BAEE7DFF2B94C6
9EBE02BC5C072804E44299D7CD5195B2B62440E331BF680EB99E90C8D38CE947
04C41DF179991352DDB1E57AF890781C25959AA3B7BFDF862D34BECCC3DC0893
FC4126E7ABEE67256549F5A2A6CFFEB66EFE3C866BD2872F8C1B7A2ABDDA6D8F
5E1298D98292AA28BF3CA599A78D591197DCA6EC3B7EEB172439C64EFD164E42
7DBBBA3E18B9157A9BDD8BAC44A0627E4C08D45A6CE6CCFD19F304834876F210
34F9D8D789834201D1B0F60CFC76F29AFE4E29BC48F795> |-
/V <1C60D8A8C9B6079F150BE669E10D0A89FB4B4A79E924F118832305224132
22E2A9A1CA143D92C4493C7C521082241671767794552BBE0C72C572F506851B
9FFC5646BF7C80A1B249DE720E4EBC4B3BAA42C2C22BCB20793D277D6ECFB9BD
2B6241E55E3D01802787A6> |-
/a <1C60D8A8C9B77FE2B8A4D22D65455054518A9081A02F6171B4D6753717B5
C4BCFBE68C976641B0DA567300A37FD1F7BE0E53E951AF39FE7187820E58AB7E
16899451090BE178FB9A491AFEF8E37FF1C5BDD8D0256C28A39196FBCF43F894
58E78497ED2727A4DE9FADAB50CC878B363C604914D69E8722C78AB472A690DE
86045D5F8F45A8F711931993BC8981E4EC5F1265B4496A3A3138E85E75C304A4
1129F5747FC321FC219DE10F0876B8AE64C30F976EE673CA77E26C723368D2A5
BAFCD92094CBCB0C1DAAAB41901C661D72AF00> |-
/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB4598F87C338598C4F359D15
4701105B91D71789866B8BBDD17C51AE2B80B6E9F47C5014A178B7C760E089E4
D6B50937639285A177B2DF2F9CD9B293DCADC3AA4DBEC7EDEC1EDE937DA59145
B9D8A5509D89ABB6F024A66CDE0F535E3C7B64> |-
/l <1C60D8A8C9B854D08887A941088E15019368529A0C411CDB31B6270BDB21
E6F24215DA6EAB48951C8DAFF38285C17967F3E2D31A5645B4CB7848E783EC24
2D0750B83BCD4D9A2F> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC36CFC8347F
8B8E738CF4CF4D1809A80A85D86BFA110670A045293350272C5F45FB77C527D1
F2930D0378ADEDC7688C13D3561051EFE72DCA1312160E6190220B69FF2CC393
85ADB7B9FA12F1BEBDBD9D878BFF3BD03685B77D07FB95D12B8B813430FA3185
D7AFA5CE12372E2F5699928B2C0F3AE08B114EAE456B389E7295ED8892CA8D2A
68CBEB3EF1E32DB99917A5DF402A16D8590243BEA627189E26BE24948A498003
EC603B5D13E615> |-
/r <1C60D8A8C9B81F2C46F2EFDE84D89C8CA27978F2B1BB49B09209CD1A52AA
0883E159C0BCFCEC840E4AF4AFD0AF12CC05AB7610067AFD32B1652EE398EAF1
DF9DCBDAA912A22D36A52AAB2ABE36110186ED1FE34787D24198929398156D9F
0AC35E6BD99313253DDFFC34D01333EFCC> |-
/s <1C60D8A8C9B7361F0DD2D2259B4AE3E4ACCB44FB8872BFAC621D64E450F5
14624BD4700B917EA1CE8D60019D3B1C42E0F7377CE112D5333D1612736D0EDB
07B34DD4BA1403D44985C1A0543D99F912C9BC9DC7E96430EE2781E418322823
5F9935573E82940F1E761BEFBA74A42BEDBB36268156C77D28FAFCF48800821E
AC277DD0C93425B27A2041FB9E67F885F359D5FF9B96714513F4D2945088A893
D87F8B4D3A6600FAAA0EA12384184218B424A8492A8E97821E10762E83A8B2B1
7B9DE8ED2A20C9152C561D7EAED2> |-
/y <1C60D8A8C9B7A73DB5828C8EB6692FACE27F93F009F946C390116926A043
617DCF82B76B3921AD1CAB060694C724481443C88DCE9CCDBD4C5105E503E45C
67DC21FA0E146B65B0F0EA2429259DEF9F5CD456C1B4E1A4CBC49AFDCA5F37B1
AD742660BF135BF9BE1A2789C070C0A4FB4767FBA0411908E30D692396427C73
1EB9FE493ECBA19FDDC5F0C50E54D346D5DA656C79E40808BBE549> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMA+NimbusRomNo9L-Regu /Encoding get
dup 67 /C put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 108 /l put
dup 109 /m put
dup 114 /r put
dup 115 /s put
dup 121 /y put
pop
%ADOEndSubsetFont
/FZJXMA+NimbusRomNo9L-Regu*1 
[67{/.notdef}rp /C 2{/.notdef}rp /F 11{/.notdef}rp /R /S 2{/.notdef}rp 
/V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
FZJXMA+NimbusRomNo9L-Regu nf
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
111.506 8.36902 mo
(Return)sh
141.115 8.36902 mo
(ValueSystemCall)
[6.08716 4.4234 2.76959 4.98129 38.2962 5.53922 4.98129 3.87552 2.76962 4.42337 10.2416 6.64511 
4.4234 2.76962 0 ]xsh
5.375 12.154 mo
390.625 12.154 li
@
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
11.352 20.722 mo
(Create)sh
%ADOBeginSubsetFont: GAAAAA+NimbusRomNo9L-ReguItal Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+NimbusRomNo9L-ReguItal def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle -15.5001 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 108 /l put
dup 119 /w put
def
/FontBBox {-169 -270 1010 924} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 432 452 653 673] def
/BlueScale 0.0396249 def
/StdHW [23] def
/StdVW [78] def
/StemSnapH [19 23 32 38 43 47 53 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/C <1C60D8A8C9B64EDF7ACDAD27FC7B2DBF66A88CDF54CD328D7FD24369B2FE
D33EDD2352F5FC4BCBC7C1A4F5DC71ED9B84E5E65E7E13A2B9A3B72FF47DE9B4
D20AAE993D30DD7D9C69B6DC812C06CC421CB55A2A83853F6470EC0A60D48FBC
B56AB218A84EA160A4794FC71A721BAF78F5B6AA73C60EE0DE> |-
/l <1C60D8A8C9B854D0838A1108B53790159DD3B4EA9A1AD8636B0628F820FD
D5F77683DE15235D1FD339E9EA97EC21485FAAD28EC53B019AD5B813C84FDEA8
E91A6EF405E10B821029B8F161246B85F33E1B773CCB78341CFCF787EB8263F3
78D06DE7AFE2110DF0B39030FD> |-
/w <1C60D8A8C9B64EDF7AEA0EDE46BB2B4D4250D45C5A314BEDBFBB5C404D00
6819CC104B235BCB66E7F1F3F99A7BBFB5B7190CFF88198D6B881865D920AA2B
C58E1B748412F78D3E1E309A964A1FD8EBCDDA6CAC5380B7160C15CD4607C6E5
6601E845B1F9DDBCEA14F97FE5A78D408685775DC0ABD4AEA9EFD5BA5AF55D13
7453957ABFEAEB4C074E2463EF2D1A6393B1C8F73569B6F2673CBE3880CE5AFF
058D3124D436BC3D0C91EF30E3EFAA06181C5BD9D7381A70074C67798291C0C6
8EED74682F335943DCAE60CEFF64AB2741278AD2F82D6290D50F94AC9F8F> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMB+NimbusRomNo9L-ReguItal /GAAAAA+NimbusRomNo9L-ReguItal findfont ct_VMDictPut
/FZJXMB+NimbusRomNo9L-ReguItal*1 
[67{/.notdef}rp /C 40{/.notdef}rp /l 10{/.notdef}rp /w 136{/.notdef}rp]
FZJXMB+NimbusRomNo9L-ReguItal nf
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
39.845 20.722 mo
(lwC)sh
82.535 24.309 mo
82.535 12.3541 li
@
%ADOBeginSubsetFont: FAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMA+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34C10FB5B45A8FF20C81B99897830644196B
9F0B77D18F1E2415B32643B9BEFB32917C4D47B1853CE389710AFD496390E0F7
93FB9D427EA0C5D4BB5FDA148EAFEE0C20062EA421DE85BAC5> |-
/parenright <1C60D8A8C9B81F2C34C10FB5F8CB4FB0C01CBD8EB5118892552
E140106D8CE6C92507D29757CD6290403441A1EA7693B4F3C96FFB476C2C573B
7D2E57D40483AABB12672AA2C522BCD98D28F543A66D4C9ADFF> |-
/comma <1C60D8A8C9B8707CA2FD797333ADE4A97DDAD77B582F5CBD0659CEC2
54CCAA47E940636A08F827925CD9A1666856A55DD075D3D80919EBA1DBDA0C08
A49DC0170BF91775E03F0E3F84EA866F24DB4E0E5C25C184B2DD7B> |-
/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CF
D85> |-
/g <1C60D8A8C9B7A73DB582976F788935A228E33A2F9BA837718EB44913857B
7DF2B08937FF3593A626EDE6CCF55DB88F671B0ACF0E0BF6EDE603335F61508C
BD99213F6A996E978EE78EC5AD0C1CE4169AAF8ED27DA5119BB90C33C9447085
BA17B797E462B8F0977A661167FBA44D02B1BE8517861232196A81989A462F7F
2FCF08A5E9EBA1DAEB8CCBF341DCDE2423F1236D5142A49C668E169F9EAF2F25
102C1FB112EB576652F83324C585B8F161182918C8C79BC3194BCD6500A04D2D
22D177CFDF96C8E4C849F7239608F6F7453202FB5504E13F8033A5FE2FB7EA35
06AF00C9E3C825E1554EE013BCEAF50C41410225B6E0A012AC7F7FF737456D43
38> |-
/p <1C60D8A8C9B7A73DB58119388AD28C6EB26113B395FAEB5BB1A92787CC00
CD17996991481186ABE86940E24AB594D9A474B01D5D0752783C6F719E685638
4C42FC6FADE6220E0D5360188934499D6C788FD6225163F3ED610B71BFF6B877
481E0736BEF6EB1112BB14B3A87DE8D1E721238F8F2E426DBC236319E17981A4
C07831306A73D6A3E6AC794689B59CA316CE67D8D4C94BF2EB8F108645A3CF1B
50AB6566123326> |-
/braceleft <1C60D8A8C9B75BE517FC1B818197D651408C872526D8637E6EBE
870DA54E2231E463DC107FA674252B600659445D2D1CA8BCD48A7D2DE09A9936
3C7B70D82970C0B0EA05D606441317A7458462F45CF16C39CF698E6A002456AE
A3CF93884232001DFE8583FD332E4E5C38> |-
/braceright <1C60D8A8C9B75BE517FC1B8181ABF12BED70B3EBBEC8F9CA135
83BF53F829A605371AF68D6AA050D6D56959EEE39CACEA5635598096108F01E3
1718812CE7A115263E46841D425F0D7FC000721878AE32B4AA44DB6C5C8A09A5
01DDFEAB21D3ECA27C8F6DB3F9B1F2000A7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMA+NimbusRomNo9L-Regu /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 103 /g put
dup 112 /p put
dup 123 /braceleft put
dup 125 /braceright put
pop
%ADOEndSubsetFont
/FZJXMA+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 21{/.notdef}rp /C 
2{/.notdef}rp /F 11{/.notdef}rp /R /S 2{/.notdef}rp /V 10{/.notdef}rp 
/a /.notdef /c /.notdef /e /.notdef /g /.notdef 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y /.notdef /braceleft 
/.notdef /braceright 130{/.notdef}rp]
FZJXMA+NimbusRomNo9L-Regu nf
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
88.712 20.722 mo
({)sh
%ADOBeginSubsetFont: GAAAAA+NimbusRomNo9L-ReguItal AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMB+NimbusRomNo9L-ReguItal dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DCEA80DF8A035E6052CC982C976E52805ECA17E96ED85
358DAEDA8137772CDA5D0D5F7C4275C1A5E4026261E2C3B38D308543B0E1AE71
3B517F7E54F0F5CF956209F612780761A2B71144A88A7046841A56B11D93FFB7
995D2EA00522953A8040D863497047DA14446BB2067ECCA8ED4D837CAE01ACE7
B46971340ABC15D79E32B004512A5DC5059BB56C2E7C594AD5A68E2BF959502E
9DADE6C7214B6F03755BE1A81CA309BC3F4F893EA7111D43D400FD21B368B73A
A2E3205E67> |-
/c <1C60D8A8C9B77FE2B98067ECA4D192682BFDB9E0521383E33AEF2AB13B6C
DDCB44DC5120998F37998811E16806D92A99440332371A54614042CCE9C92086
58B4DA3084C9D34213BEAABE4A6FF1F8DDFDED091410C941873DF78E52217871
1690A9E31F99D607B4F2E450328ADA> |-
/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FB14EBA73D87B1A4
D022DF8523FDF49BC255F6353D4EC7286276F638720F53775551090EF627DE32
99167E228A46C7C9F7600C313C9DB3D95EFD29DAE4921482D8BDA0C17CF165AE
54F2E4EAE86D7BC98FAA78761A40F55BE22953DF97061B> |-
/n <1C60D8A8C9B7A73DCCC2CF5CE401F1233B06D0FCF55836E538C58E814EEA
E6634460655FD290AE7488CE32E814759E0AF2C2482D7ABBAB2541CE23A2082E
8ED41FB38E252A6CF76E3507FBCD76F6FFBE5683A3516B6ED6647539D8D688FE
36EA596FC13D794F6D3DDE908BBDA3068338531638CB57995C08C38697724D14
8D71913F92B471AD67329A2D4B1A2188889C10BEBFE0E915562767D4E2D95C76
B539DE865FC66F5538DC89EE812915B3922908D3579330F65A44> |-
/r <1C60D8A8C9B7361F7E31A316A5441472A3D5F0BBE187EC79A442CBC96388
45592AF85C4E4C7D40F5739783C28CBA686CB4EDBADD3DF864045E1617F9EF64
EF28B75F06BB7DB3735A4D1B8449A08901B30CEFEBABE09F310BAA3CE48486D6
4D9403EE527234C18BDC9B0C77031AC2437A48321C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMB+NimbusRomNo9L-ReguItal /Encoding get
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 110 /n put
dup 114 /r put
pop
%ADOEndSubsetFont
/FZJXMB+NimbusRomNo9L-ReguItal*1 
[67{/.notdef}rp /C 29{/.notdef}rp /a /.notdef /c /.notdef /e 
6{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r 4{/.notdef}rp /w 
136{/.notdef}rp]
FZJXMB+NimbusRomNo9L-ReguItal nf
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
93.494 20.722 mo
(new)
[4.98129 4.27397 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
109.394 20.722 mo
(,)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
114.375 20.722 mo
(caller)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.618 20.722 mo
(,args})
[4.98129 4.4234 3.13814 4.98132 3.87552 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.0401 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /arrowleft put
def
/UniqueID 5096651 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/arrowleft <1C60D8A8C9B5EE310D75E4BB540F5F8E498DEE0ABF56701815B7
E8E03489E6F726A3CCD9125F7EDDB608BD6F0A0B80DF996F52C200F2F2504890
6FAB0B90ABD457B7970DFDE3B9F0AF498C7BBAEFFAA214625DF8420770430B2E
1AFE666F8E842341195A1C17824B33DED9A1B8347C3105A24E220FD7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMC+CMSY10 /HAAAAA+CMSY10 findfont ct_VMDictPut
/FZJXMC+CMSY10*1 
[32{/.notdef}rp /arrowleft 223{/.notdef}rp]
FZJXMC+CMSY10 nf
FZJXMC+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.754 20.722 mo
( )sh
%ADOBeginSubsetFont: IAAAAA+SFTT1000 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IAAAAA+SFTT1000 def
/FontInfo 6 dict dup begin
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 97 /a put
dup 101 /e put
dup 108 /l put
dup 114 /r put
dup 116 /t put
dup 119 /w put
def
/FontBBox {-208 -360 1374 838} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 1 431 440 612 623] def
/OtherBlues [-227 -221] def
/BlueScale 0.0396299 def
/StdHW [100] def
/StdVW [50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/C <1C60D8A8C9B08A95D13D7C49AAF58B31B89FC8B0DC69DBC73D9F26F75C92
026AB5F82BEC5CD148D3CB54981C32452C78745514433F736E5BA7CDAC6BB396
21AA5994EE8FD9522678DA7A2E3ABD8397A9749AE472072174B9555A23AACD01
A51C2C5D2E9808A9DA3CFCE083A1FBA1E73042F75301A2D947ADE2842FDA827F
A391F6BDA34BF62A40EBB8FEA4> |-
/a <1C60D8A8C9B08A95D13D7C49AAF5F217259D4BB353889734B179A0FDB764
C872F42BF843A2C164BA6603D19CABA12478B188B16851762B147B383AD4BD16
1149DFD5BC9438EA7B8F7AD129E9A1CAE80DC423C781F13E6C2663C11E8FA3E6
9D206B0EF07480B762FDFA6CAF5F1598FE5F4B83A554D150C922E2FCAEFF9309
E65B8DBEBDB7EAD6ED37A922FF88AA5943EBF5F7E2486A78953B54019F10D5D1
9C92EA27DFCF2AAFA74438E3CA94447BC94C990E65D3D74B92DD88D3605E45AE
3CF51D58694CA32AE9C9> |-
/e <1C60D8A8C9B08A95D13D7C49AAF58C00D0989724B19E9D3C4E44957427C1
6E2F6F007FAF3CB9A5477737D45266C8AC55119C427E4342BC1F8A7885D0395C
ED8BFADFAF3D252356A270A5180775AB2C0F774C96980C71052CEA1248326991
3A98745B5CD43E0374A8AE45C3A30CBCC7D4724513353779CF2391976FA7E1F4
74AF9A1624C9348B68D6> |-
/l <1C60D8A8C9B08A95D13D7C49AAF586392815ED32ED222075F85CBF480F2D
0890C4AFAEC03E5B7CF57F0316F3C9D48304BBCCC3DE2D7147D2291115E827FF
F3F9F5374FA09F6FDDD9F65D077EDC9866ADAE804614AC8AF1> |-
/r <1C60D8A8C9B08A95D13D7C49AAF5A01FB37D3FCA029BA3C736AB8A5E3479
3D3C289ECDD241CF91D33061A30FAE0FAB839C5DE94ABC48A819BC8DA5FE8626
A07D99053A9D05F384FBE330F6C88B80EFAB3E4F02291CBA202F1D220DE39A3B
5BE9872E681E9D294226426C255DE6D0AA6FFA94E07171FB4C2060F3371D355F
9365B96BEE7C3D6C148C39F18B6EC1A5F352712192C36E571F529C3EA0D18618
349BEE88ACE82381795691A5A61C76A5DEA33B8DDF40B6ABB11E303273B92D60
7DC8A6545F8AE367ECF664AF872A295FFC62F9052B> |-
/t <1C60D8A8C9B08A95D13D7C49AAF58C00D097F3B0D49BE61D4C4596FEDAAC
91F729E04494C6CAABBDE4B61D6CAAD6F595F1EC79AD5CE7C8D56FB70B090C97
7202C8AD9066FDDB343F301AA64A5A00659A7389C046240D9A310B7815E4C827
E7CE1F0214BDE455C5D1EFF28112DC72AB2E2F366B4E0F1750BA52002FB0> |-
/w <1C60D8A8C9B08A95D13D7C49AAF5F201ED9DBA3E2FEB9C8F4F7AE06EC8CC
7C0E1D0230B0ED82B70C194D2556DC01A52DB7378DA2D5877290D4CBE0468D21
C6DD60D2C105D070BD73294BBF6F6FE601C7B1B6E7C847D28AC2542DD6145041
7A1505DB563A1668B915F005FB0B9FF121ED1BBF5F425315280CEA01ABC8B630
0C26A8A614F7525D3A8897B3D7D3F2AA3A85BBEB878A34AB2CA5646FD952C2E1
525EADAB4790C0C5ABB49AB6DD1DAF0D3A6404D5787B78CC> |-
/.notdef <1C60D8A8C9B08A95D13D7C49AAF504> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMD+SFTT1000 /IAAAAA+SFTT1000 findfont ct_VMDictPut
/FZJXMD+SFTT1000*1 
[67{/.notdef}rp /C 29{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 
5{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]
FZJXMD+SFTT1000 nf
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.672 20.722 mo
(lwCreate)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.505 20.722 mo
(\(resource-spec,)sh
302.568 20.722 mo
(options\))sh
82.535 36.264 mo
82.535 24.309 li
@
%ADOBeginSubsetFont: FAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMA+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7A73DC549024A8346FE9FE9D7E1CFA5F3A3542DDBE4C5A916
A5024A59CE0EA5149D6EA79ED65490BEFEF9C3C348201E7A69F357C223E56920
09826F3A927DADAF422165EC130205D6C94EDE841416A6709F1685CEE6DEF083
AF9B4CF1705AC60AB37B96773E8FE945D56F9115B299614B0DC15F528F328117
D5F2914E00B04A31> |-
/w <1C60D8A8C9B6079FE827C15FB749C5E2D59AF07BCDCB23600A9E54DC7F64
C7E827C38E4CA3EDC141AC5EDC06F362661B84CB18900C724B81D9620EF76D18
0ED63FA9D5A5F924854335916B03AA4F91AFA0C7C0C6CB02E2839A0511DD63E5
74762EF80F517D5F038A6BF8C6AA8B2D183A3AB23FCFA16E562D70F6716B39E9
98C527890272681E7128A4D20258D13EE2F2B8FA152F655FEBAEDC8C60259050
DBA81825B0CDCAC66195D9F1022749> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMA+NimbusRomNo9L-Regu /Encoding get
dup 104 /h put
dup 119 /w put
pop
%ADOEndSubsetFont
/FZJXMA+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 21{/.notdef}rp /C 
2{/.notdef}rp /F 11{/.notdef}rp /R /S 2{/.notdef}rp /V 10{/.notdef}rp 
/a /.notdef /c /.notdef /e /.notdef /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w /.notdef /y 
/.notdef /braceleft /.notdef /braceright 130{/.notdef}rp]
FZJXMA+NimbusRomNo9L-Regu nf
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
11.352 44.633 mo
(Switch)sh
41.5188 44.633 mo
(to)
[2.76959 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
51.76 44.633 mo
(lwC)sh
82.535 48.219 mo
82.535 36.264 li
@
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
109.593 44.633 mo
({)sh
%ADOBeginSubsetFont: GAAAAA+NimbusRomNo9L-ReguItal AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMB+NimbusRomNo9L-ReguItal dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73DB58EA1BABB86F5673E58177B13D1689217184648646A
C0CE49A237A8F103AFCDB5EC056581454943D22FAB127F5C1E1E8B9D6E918057
E41E57DC52684AD5331B647C59B7E247B500C8501462047450C98D0B8241197F
7468EEABB23B6BE6A7CBE76395CF8839E2B115BC98F6FA00D46DDFE6768E493A
3C0344DC7EA7D3699B1F8782B909183D69E072358DA2A49D119AC7EDA36AC077
37F930D0C75C1F1BCB60AF1EAF20DDD5E35335A0BC9EC8E0CE2E4A3CD6851439
F3DA9D850AF5975B35E3C0F98171603731A62B92C94E104B5375FD3CA4280A4C
C5653EBF95230E8F334DA161BDC71F51D2AC3CF2759DA1D1B2BF0F0FB9FBB3DB
4CA56B5DDF9EBC89C937B97D72AE185FFA5EE4F1CC1FCB4460BBA25A82EF5CF4
F8653AA4B26755A26D8BF3E9248CABA6BFFD30E08F> |-
/t <1C60D8A8C9B854D083A90EFBC938A92D26787E8A2985BDD732F5F3979320
973AE05469589D37F6710993FA8C4F22B07BA5CDB62E8203EBC0D0A817CECF14
3F719975302FFF456E372C07C4540089BA89691B08F22F6B687DBA322D090528
19E08BEFEC85E919D4B4433340CE06E3E3F5538367ACD04AC81520E078F70831
E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMB+NimbusRomNo9L-ReguItal /Encoding get
dup 103 /g put
dup 116 /t put
pop
%ADOEndSubsetFont
/FZJXMB+NimbusRomNo9L-ReguItal*1 
[67{/.notdef}rp /C 29{/.notdef}rp /a /.notdef /c /.notdef /e 
/.notdef /g 4{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r 
/.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]
FZJXMB+NimbusRomNo9L-ReguItal nf
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
114.375 44.633 mo
(caller)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.618 44.633 mo
(,args})
[4.98129 4.4234 3.13814 4.98132 3.87552 0 ]xsh
FZJXMC+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.754 44.633 mo
( )sh
%ADOBeginSubsetFont: IAAAAA+SFTT1000 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMD+SFTT1000 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B08A95D13D7C49AAF58B31B89F24F73159A0F79D52DF1AC189
150DAD046049EFC6AD2DC8AE63C9536364CC57074AA2E3EDA230682E84159BD0
BFEB655633BEAEDBF42148809CCCB5F37806FCE7566B1DD30454C8C04FBB5BC3
0597065DD60F33DCEA2DDC4033C581FFC1A69E41F7D1ECD18C8201B70BF92E41
39A407E7DF162E8426539FF0D5FB42D72901928F6AE391A511660138501FF07F
1B07856B1FF57DEBCA497EF38BEDB074996B43CF4F0403174FD874E5BBD168AE
A0D6502E00985DE1FDA8433F24AEEBFDB8> |-
/c <1C60D8A8C9B08A95D13D7C49AAF58C00D097FAD5E5C6547C2BE6302BB1C4
92E04760FC35A41ADB7BCC43293DFE186DD525154795BD037B6242F0A252A704
37CDB50E290A5DB2CF7A12A8854FD549E71EACF37122DCE7FDCF10E89C8A0AB0
4906BA558ED9DCD898FD362504D24BD820BC001FDFA917F69437601590F21D45
6695> |-
/h <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE45641238A2FEBE159FC5C8F8
93EBF559C88E7726E366942B064BD6035E5C017D2EDF03B078F88647070D36CD
82B2AE1D8DB6F87F433E0AEBDBDD57671B01501FF670A9588C8F50760D48E37E
F0DA8DF8733BD6B611E53E20F828C6B9FCC07E7C784670858A945833852E3BF8
9A4AF41102C1C71FC24D8375AE6A368FA4E26481BA4D654402A5AC36CF79A69E
9AADC18F80520D30F900338C> |-
/i <1C60D8A8C9B08A95D13D7C49AAF5F201ED9DD081A854E0BA43C99BE48460
6086C31E73AC5345CC7433B879D144E45AFF225AB929F70FFD401670DBCEC959
8E74387463991BFFEDB43312519E466FD1940271EC9C0D963BA1B127D89BC754
D7F7E7BE3A0B991CAF1BA52053D62A8C75F1AA619C93C8ED97A60E902196F180
B0EC1EDC168370BD431A38339A95F38D30BA8B483DBA60EB594F286562BFF3C6
2C1077C728AC5E2451E5D0AC5D7E06C22DD31833> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMD+SFTT1000 /Encoding get
dup 83 /S put
dup 99 /c put
dup 104 /h put
dup 105 /i put
pop
%ADOEndSubsetFont
/FZJXMD+SFTT1000*1 
[67{/.notdef}rp /C 15{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c 
/.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 5{/.notdef}rp 
/r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]
FZJXMD+SFTT1000 nf
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.672 44.633 mo
(lwSwitch)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.505 44.633 mo
(\()sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
242.823 44.633 mo
(tar)sh
254.081 44.633 mo
(get)
[4.88168 4.4234 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
266.155 44.633 mo
(,args\))
[4.98129 4.4234 3.13815 4.98129 3.87552 0 ]xsh
82.535 60.174 mo
82.535 48.2191 li
@
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
11.352 68.543 mo
(Resource)sh
50.9136 68.543 mo
(access)sh
82.535 72.13 mo
82.535 60.175 li
@
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.105 68.543 mo
(status)sh
FZJXMC+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.754 68.543 mo
( )sh
%ADOBeginSubsetFont: IAAAAA+SFTT1000 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMD+SFTT1000 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE4F14942A40790B613101E36D
0AFB0EC204DF8DAD749F3E1771BA38D3F4E61AB3D32D877A01748612293DF819
A732E91987B633BDE86B49E11493E2C808979C454F9FD1C10A5E3684F56656BB
D868A3B758115FD0BBE9B4E5DB4955E3FD34E4519A8AA836CB2D14721792B043
FF2C865244909C453F0BFC7D8E1CFD6254A503C889411D09882CCA26171BE1A7
6781AAAC9246172F025A087B3A29A8E6C5086D0D8E609AF4A05E90DCA9942CA4
CC9EF823D118D44BE2D75F7CCA3751A01FDF5DF6593CF6294CE3B3976A768CF3
9F43EDE3DAD1582A065489D0AC88E30D1373EF2A41D9BFA6D82D36EABD226BA8
EFA02A6603A4CFE89373FCBD5DB33E69D1373F19582A1260> |-
/s <1C60D8A8C9B08A95D13D7C49AAF58C00D097D72C82D1F2CFB694A87C731F
65256515B32CEED721F6D04B078F7CD6244BBE8040A4103B7F501B8092556241
3E8CE919623A99BB19398096BF261ECBBD8D1D5CEFA080225AC3C30200908B29
14490A0681956E2427E2E2734AAB9F9BCDD1BD228FE8A0766CDCE7DB26E10C64
EC1139A8DEC5120D1F09E23B01E85AD497B89EF56970AA2FDCB95890EDD9D63C
B4B797FBC669055CDB4955609C92463DCA53583B759B48169CFC5D50FD3BA75A
F88AA41603927EDA86C1E8D9B0ED9799ACBE8FE6CC04590642> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMD+SFTT1000 /Encoding get
dup 82 /R put
dup 115 /s put
pop
%ADOEndSubsetFont
/FZJXMD+SFTT1000*1 
[67{/.notdef}rp /C 14{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef 
/c /.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 
5{/.notdef}rp /r /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
FZJXMD+SFTT1000 nf
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.672 68.543 mo
(lwRestrict)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 5.22937 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.963 68.543 mo
(\()sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
253.281 68.543 mo
(l)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
256.05 68.543 mo
(,resource-spec\))
[4.98129 3.31747 4.4234 3.87552 4.98132 4.98129 3.31747 4.4234 4.42337 3.31747 3.87555 4.98129 
4.4234 4.42337 0 ]xsh
82.535 84.085 mo
82.535 72.1301 li
@
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.105 80.498 mo
(status)sh
FZJXMC+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.754 80.498 mo
( )sh
%ADOBeginSubsetFont: IAAAAA+SFTT1000 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMD+SFTT1000 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B08A95D13D7C49AAF58B31B89FC8B0DC1D0DD2A5BE5302F487
395856F4CD85CC677BEDBF471966020BB41250BD4818E453A3F549DABE4595B8
9967166B64D8BA7FB53BAFD5975E418C135289EEC0169AF0D6173B57092BE642
E56DF15DB9B76566715A44CD663BDD405CAA4937F55DBBE4C2FA006C2E5E3CDF
BBE7E9EBF9E15DAA77AB0E8F4E82D763EF0D2E9D351A5CFA45D48E77A98D95AD
C13DBB95D3FC8FB112C136FAF5265EBEF43017935A82273A54148A42609217> |-
/v <1C60D8A8C9B08A95D13D7C49AAF5F201ED9DBA3E2FDD1D5741C6DAB96242
0CFA0CF395B303F85DBC6E4D71D033B9D07E75E75BCC3B667D4654A74A61380B
2E44B5C17EB6E8FF7F44D69F78B2B126DA4DAF8580FE1781BEED164B6E2CAC8A
2ADF7124DE4761A0EFEF0C83A7CD6F9A79EBFFF5EB3F33848514745799F6F75D
BC5D6E3368D5A6BEDDEFEC235081C8E1A21D53BA65F5A5EE9021BA48843AC21E
2E383253D27E200311E22E5F1E527D130C62D3C4CC615D4D33328A49774A355D
9DDC651D> |-
/y <1C60D8A8C9B08A95D13D7C49AAF5F201ED9DDCC543C2A46266E2C2778288
6C5B67472A2C4CABD4982D165A19D96DCFB3CCB7F364819970B7506C0F24E9F5
A693F9630BA8213159C8736180B81585D2548632EFFAE94CD35D44E251B33910
8188091FDCF211B331EBC6C141CF8739B138A5EC12FD4B3170FEC07681B53825
A995BADFF550E20FA53492D31BB13BDAFE44A0F5FD905B9E3285189E961BA922
839A956E6A50DFEB3D9BBADFAD029CA85A5A8A597220280B374DAA97AE8A2635
54349F4833A1B33E40D0AB2D71661D3C2DBB1A982BD867A94218D60BCDBB3152
FAA3B34D8502E969DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMD+SFTT1000 /Encoding get
dup 79 /O put
dup 118 /v put
dup 121 /y put
pop
%ADOEndSubsetFont
/FZJXMD+SFTT1000*1 
[67{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e 2{/.notdef}rp /h /i 
2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /.notdef /v 
/w /.notdef /y 134{/.notdef}rp]
FZJXMD+SFTT1000 nf
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.672 80.498 mo
(lwOverlay)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.734 80.498 mo
(\()sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
248.052 80.498 mo
(l)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
250.821 80.498 mo
(,resource-spec\))
[4.98129 3.31747 4.4234 3.87552 4.98132 4.98129 3.31747 4.4234 4.42337 3.31747 3.87555 4.98129 
4.4234 4.42337 0 ]xsh
82.535 96.04 mo
82.535 84.085 li
@
%ADOBeginSubsetFont: FAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMA+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B81F2C3563ACD6650DD362B964D01F0CCE6A6381E
7AF5ADF5753B3592425016EDBD8EC34B3257C151FCF802999CCB500CD6DE38CD
30C802D6639CEEB7878488445> |-
/period <1C60D8A8C9B8707CABCFCFB7572BA26C4F342CB44977C4D272DE413
3DB5EF66FB5CBCC13D7> |-
/one <1C60D8A8C9B7A73DC549024A66BCA9F4353026BD17B6210A66FD5D4176
116945A2F6BAB903CF6DE4F4D3C8542E96270F5E403BDB0773406DE9484D2E0E
A2DBD71107DE79DF70216D3BFEAA2172D8D68DEE8378CE1279ABF171> |-
/three <1C60D8A8C9B7A73D33B7A780A4FB6D478F9DFFD1DA2730E109F94628
9022DF44AA9C6B3C7A83D30909F0BAB42A6E1D1548FDDC248F7C953CDE5A28D8
689A27CB59F87D356A314D4EFED0475CC0AAF39DC03786C824DDF509843103FC
7FA496FB5DCC5A8557EAC7C07B47467CFAA928DDE85F766B75A88715FF4FBE39
5D793AA936CD181919EAA5062E994CBA144301D3C748F9AB1671C4DDDDB4E131
7F6796560BFDDC9A58> |-
/five <1C60D8A8C9B7A73D33A88FEA12959A734E0957E304D49DC85E4BE1FA3
9EAB2AF48D0318F3CC26662E787C00C247C6E0112180BCE6759D50FF9BBD9846
DFA361CDEB2512314B6E62318760F370D90F648D279E929D53983BF8D2AC98EF
81CED8855AB0EC5338E13ECD1542C111649132984A10E95D5EFD7471329778D6
74DBEAC9048068A00D504E5675BFC58E3AC> |-
/six <1C60D8A8C9B7A73D33BF1B90A18439D8A405D7C2C2CE39F3D6CF44883E
BC665B1BC22C1A295E570F87EE932C7C5AE5AD7FD71556D1DD18D897666F411A
91C0C83F9464A64F6DBA41188C7B70D6EB3CB783FF623CD0556DEA7D75906C65
3696A52A8075AF3CF1D8B71CA3050CC39364621D99C880412847981F1F9B66A2
73E16CCD8B82> |-
/seven <1C60D8A8C9B7A73DCDD9F59C989262D4C837ECD30CDC197CC53D803B
FEC41706B8BD5D4AFE4F1DDC03AF8B5A096985BA058506805DD9> |-
/colon <1C60D8A8C9B854D083E206F04B4C3DD188754390434C4FB50EB4672E
AEE8A85520BB1D78CE2A6974387875B94CD46C379E034A7804D304B20C0AC31F
F325F5883A400828> |-
/semicolon <1C60D8A8C9B854D08A49DE8ABE00A3F56845F7C789B1D092D769
97EFACFC31B8EA3193D55F08B870AB735BDAB3E62041101CDD0BD1D1D6BEFEBA
20B83E51E7F8BBC73125BF217AE48D948654CE4651FEDF3EB4DBCACEC48ADEBE
9556E72AA1D2EA8C03523F47A75C326AFDCB83105752D16B9EBFAEAB49BE8CE0
E45C5F7CC0B86B9DE5> |-
/A <1C60D8A8C9B6079F1E495237E195FB086879F6BCD60DCB240CDB4816DCDA
7E7D74835F693D24CCD6C338D68869D7AF0A42511BFE8C5AA9C0FDA69D2F0CC3
FEEA1E37C9F5A5B0401E78C533D84B405A09584E86C2A416FFCA03B71FACE3A1
46D6DFD53C2043C5A98FBBF0B70EB7EE652DFCDC5B6B> |-
/E <1C60D8A8C9B7D8BE6A6FAF13E57A5D0C2C66821CCEEF24B4E4419847787E
D4C8A98BBE3EBCCE15D1DC333F323E4C7D43FF48D1C1F11091632F6F11174D4D
B924B1BBA6DF69EF4ADB27C45D6BAFF8FAE037CF2DD63F0C99022D146FEDA01C
CFEE96DE599AE8069A8E5F6B8E0F74979F0CC193D875C6765F26CD248D1D0923
817F3CBDA21B14A62B3E828ED4997E1F5E3EED19C373DD0855950863084BA232
08116185FD3DCF> |-
/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7A4C9904C14F3C78DD8A216
6C79F417AFFBE3B86093B7A5C9E5643BE68ED9E3DF5945A598D6DBA4A9E1182E
708E6DE986B0C684C3> |-
/N <1C60D8A8C9B6079F150BE669E05A86555759DA107B43AB61905A62645A66
3DE63B767402DC6894A5DFEDB84E4BDD1D351CED404CF8174231DE9B67002319
4AC38274F20C1FD6D4B8DAC4F0C8BAF545ED28910A7DBCC99ACA30CFE6FD8C85
EEB2F3221A60E51AFB01492A579996C127A28D4FA98C92096380068298F29040
ACE78F68E55A11F391A0536D2E67FD1C08CF11> |-
/O <1C60D8A8C9B6079FE817D875D2CBFFB503E7661914031DEF82D48C90EF37
02517DD03C8E65B1C85769ED6887A24289D9AB99F5B1BDE82993DEACC2DDC39A
E11851296B5BD32A727B69731E92C7B0DB7ABEFABCF42140BCA1DA9DAA31FC27
FA6483912C36637F02E27FBD8C9B9BE19A703CEB20A6852E97F86CBFE152A658
3E5E69CA94CEFA79FBBF39D4558C7345137E92> |-
/P <1C60D8A8C9B7EF322BA184F1B466A5F9E0510ACA70CC36BD5B876749AD4F
E16EDC508BA233A1AAAC6BA273FF20CF31BB17B9F1092A4BB71099575FEA4868
93AD4E3A7525913D0CD05606C6D78ACC32E189D016D7274A626F44BE17623E20
CF682C39158B1AF28D3051A12E160F64DF843604F0E5D5C417DF0F4700F18E24
35DD56AAB71313C4C2D0A2D81AEB42E579BF0FFF6DE110A340F6AA3B51D151D4
9C34D4B8C12908> |-
/T <1C60D8A8C9B7D8BE6A419732DB5F024C0509628A5C1F3C8AEF4E7D00CBC1
830EA50E7630715A3443152766048C069B0A4C72A78E94AB6D91F59E64DF9B5E
3A2935C3883FA28660A00DBD8C0553BBB6DF7158E8BBDF61D18A> |-
/W <1C60D8A8C9B5D6EF35A61E5C76A324B31A56F3B1CFE26126626F91A2A4BA
CB1AFAA605E0E99F36A77DB54F2E6AD346FFEBAF72E8228330EFB65AAE1194D5
7BEB271028701B01DDDAD430D9B1C5E6D2484E89D44C9AF9F0018889671FF0D3
BE9234ABC3DA9D8C8004B7B21325045A51F5AA0FE20F5CDACE9D24E8264E834A
6CC230947F02E113668F0DEC36085CC5DE7FE47E19E6F994D361F781D02378A2
2F044298> |-
/b <1C60D8A8C9B7A73DCF483CC3D064C5D3508B11AE282C299523D8D2A309C1
7B70A170029C0F65CF90DD2BE591B98673683525C4890D287920F2AE4A535CEF
E47857E6491D69196894FC8103DF0EDDDC2D4539CDA22F565FDFB14A75B6689D
6F3BBF9428A6B06753AEFCDF61504E25> |-
/d <1C60D8A8C9B7A73DCF5C5F318A67A421CF99702516EE66DD46F0A19A39CD
2B5B742B889350B6027EFEDA3412AF17D7447FE125ED85A03529B863375064C8
442F844291318DB0203469A078E9359BCEB35DF8F23C36890A37B169F260AC05
C273B3B8D223D18F700437592FBE0590BD27CA2E484106160C2D3CA8D60D3B12
6EF2BAA957015ACD17B66CCB4B5794278CE2D6> |-
/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF
77C72C9CD398FF8891FD585C23641F8AE8F6E3020ADECFAC4A393E9FF54C49FA
B5A21E2F4C1179F83C25D9862068548F63557CBD68840FA2E638617AF24BDFC9
D81568C2C6E1A315E20924BB4D9FEEC5799B976A> |-
/k <1C60D8A8C9B7A73DC549024AEE55A0365CA53932E5214D92E03447BD2708
2733F8BC4B52390213A989FF43E960E136400BFBE15D14D9BA4C2D61B09B4F05
0FBF7DCACD230C4E8767F21A80F637BF5694F2161773ADC9B25B69CFE9C32887
671F39202B1661FF55FACF361DF983E96161F84FF87D28B0AC0FA43709B6CB55
E1E44E07E3A733E7B5F64E7A67A496C0C4D5E21D4A198AB4487F8ABDBAE25A8E
986F6B42BE1053CBBD4E723DD568DBDCFB> |-
/q <1C60D8A8C9B7A73DB5811938DD329AF5702F449C4C3015239F3E0A7732DF
C9E0828332DA51F1D7FDE724DF869BE73384BD1B7136B03BB11DF051325EE7A7
668042B3ABF69CE2C13C47BD4E4C9A86DDCBB9CAE3222F43A69A8FF1ABBDD409
F18B51721F47402665B69C88AC7610BDEE6B922DEBE4B9A5509B50F0E0D3E071
713E6B4ECEE647E52C37F2D1A72629A17EE40EF1260847BDA48E1E19> |-
/v <1C60D8A8C9B7A73D3387F33511357F5C470E09351F77CC276AE129494BAE
19BAE0CA39F2A5A776A3E65DC754DA89AD1C5CC64A59E7F0B5EC70F5692EBE0E
0FB9D1DB1A31CC7BBB43C8920E79F728121E780030958DB645DD328A17F8DFF9
82D1DC59D2D6959A7E783D9C1D0AA54F17D353136E> |-
/x <1C60D8A8C9B7A73DC54C6E6F1E1B2347F151B660B24776F2E8D8FE0D08BE
B090A51431058F7336381763833F21F79669FB1758E4A45605BCF730FFBF7CFA
2C722F5A25EBB940FDF2BA7B9B5ACDDB0A61662A5F4610A72EC6495E2E42CD0D
A0ABD967E5F1DD106B1FD129929FE9D5A5F6068F5AC837D5D03F8F6EF1AB141A
71105EC102F68544C432C4D0444E5DAB600D38EB3AE2F6AF3A06CD69455C91A5
6BBAB338293B6D0E> |-
/z <1C60D8A8C9B77FE2B2232EA49D913A831C97B47563501A79DCA41E417E74
E20F3E3020C6B422D96B1171C7F6A868EEF4F80EC234E8C81C6D5907680692B3
D53F97E8CC04C61D64F59B524A639C52> |-
/fi <1C60D8A8C9B7EF32570AFF8231DCF4ABC5DEFD5B6D550686CFFCC91C267
F1252BA4F4DAA274A3A6688691900FFEF7A839B52553AB9F891F187F51351F44
C21EAFE0C45D0394141E4F8BAFD06377AA51E37B7097AD1CD66EBD9853CBF817
2875228C37FE0953ECA0AB863FE32A47EEF2B7DF444F4BC2717645C8B4ECA894
32D1027B7AF6DE75966098D9C73E00129B4A704F85D81AF7D80671478639E183
CA75D9BD8666D9EFCDBB6B3C3084DAC79574807631815CB8BE737035BB77F054
C44C971E29217D4> |-
/fl <1C60D8A8C9B7EF32570AFF8232948073BB5AB8BA9958E12740BD6120DA0
9BA71CD6F811C2BBB563106B582150E5A1C24BDA9759826DFC4919C1848E76E8
9761DBE4C4B2E6609DA375C7A7C8FEB3898BB254249657F8E306ED10A632687E
A2482F80F700AFD51B8B9A14589974C2A50465ABFAC5C01138999D96D63B7FC9
3C2BDB14C1CCB20E9D6A098294573BB579B56FF29BC82CD8DCA8CC6EA9AD2C62
FB1204B7951E6BCEA1D929F1CC1D7421119653F57C1E42B46EF0F374674275F6
1F798605ABED38C3641617B72BD49933BAA7F84CA6C418DE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMA+NimbusRomNo9L-Regu /Encoding get
dup 39 /quoteright put
dup 46 /period put
dup 49 /one put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 65 /A put
dup 69 /E put
dup 73 /I put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 84 /T put
dup 87 /W put
dup 98 /b put
dup 100 /d put
dup 102 /f put
dup 107 /k put
dup 113 /q put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 174 /fi put
dup 175 /fl put
pop
%ADOEndSubsetFont
/FZJXMA+NimbusRomNo9L-Regu*1 
[39{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 
2{/.notdef}rp /one /.notdef /three /.notdef /five /six /seven 
2{/.notdef}rp /colon /semicolon 5{/.notdef}rp /A /.notdef /C /.notdef 
/E /F 2{/.notdef}rp /I 4{/.notdef}rp /N /O /P 
/.notdef /R /S /T /.notdef /V /W 9{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y /z /braceleft /.notdef /braceright 48{/.notdef}rp /fi /fl 
80{/.notdef}rp]
FZJXMA+NimbusRomNo9L-Regu nf
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
141.105 92.453 mo
(status)sh
FZJXMC+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.754 92.453 mo
( )sh
%ADOBeginSubsetFont: IAAAAA+SFTT1000 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMD+SFTT1000 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B08A95D13D7C49AAF586385B85160CB0180BA1C1497057E97C
EF97F49B2B35447BC969E96947A098AF3DCBBD3FB527202809575C1B7E94E7AF
5D0674D06484C87FEDC592DD40171208496D8C273B2F27C8EB2371629F186970
4A53010C81B2D773E86FEE1ED1A72EF81352C1D8E07E7EE96AC63569449805C8
F502676A68C5757B9B1700BF375B358799D822793B9F6F7DBDA6A5B25D4CC56E
04236AF381D92AA6DF3564673FD565993698087767BC7C3FFE89BE81BF32F90E
8674A1B88EA3D7B2A1580BDC21492D228277F17316E21E994D43F95074152740
B3B903D7A43EC99457BAE2321FAAE4A531277BBF00CE1E04089A2F7340> |-
/D <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE722F7AC91DC257B074D947E3
9BACE24035A0D12C62307DE622E6C7284E73ECC2C5D037E3AC505FD93CDD4AF5
251ED75670071071E973647B08045CA9B6FDA53EA50B09AD734A880AF760AE0F
30B07FBE5FF8481251C6DD45C0E7B61355A2C2B5BBE2EABBAE1F2CCF7CCB4E9F
0B359C0B5C1C029E8EDE782EC2A79449A511C0ED047352DA9FAAB37AAC1FD058
449DD4D696525AA2426B9F38D61B2105140877C9DAED71566D2178> |-
/E <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE45641238A2FEB12E61C47225
80CCD83173B424315F5564C8AE8E76C7390CA5F2490430C28A4241ED45673386
C826095CFFBBF3F327D4C5587EC955536E67CACBBCC603953D848252BD33E5EC
49AC6F83A9AECE89067F91E8C6178521B61212C289CDA7FCA1A1B44926462F23
70C6F7BA54FB158DD5AE9D72DDCA02D530214AD33877FA3CA3807E38BA15E74A
E7763A405DBE3F804914E300EB37EB48BFB127ACF2030965314E8966FC23D96D
740525DA27404CE9C7F1B167BFCFCD4EBF23673A424802A3FF450DE0F235DF1A
C2B0E93100087CB3020749C4FF601D721E3E7E690A2303AF8398F01201D67F3B
5C8DB12C9C99788F1450C17BFC> |-
/H <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE4F14942A40790B7D4505FA26
90E54FD1ADEEE4A18D59B97F4294C1ADEA35F6C33447001AF1D5874864C32AB4
BCC3AF130141917395163CE7DDCC3D98C5035B49F6E1ED0F0F257993635BC8A7
D9CB693FDC0366B4017BD3667BF62A70EB1C074093C537720633EA077D640BF3
BE8E430A77B56A08CBE59876B0F1BDDB3DB74BFF7DB10CEAA6989C5DD9889E6D
355927CFD476F155DE9A8E96E0DE5B21CA1312C3739ED0B00D6931A9D4CFD152
B1698056300A1CA673FD8896F1516DD41F81A429AA83FD6A9FECF9AA40C7087C
5EEC56D82C27B6E683FD5C4261D50095C55092D1C5D0AE86FD655F49F74DA9E9
EB76E94E3183E43A4064385916D5FBA44C00F1481229B76E337E516C81F21309
A921B3C6164264225E0D208C1BC51F2CC08DE74477821BC3A2701C0ABEC2C599
3549C1A4C5533C2ED1522EE636B2D4A021286C36AA43E5D8BADA16D480094AE3
8C89EA815214170B6DC7208D525E85DF056E047C32E1049799B82030E8AF510B
D93FEFF27BB9176CF39A9E792F896F05E884B8F86C70CB80E7E1188C1E1FE423
AEC861F011E2AC6B03AA3A71B718FB36898C876FA7E8E4B4B90D920EA974E2DC
716ACDCDA36701087CA38E6DD13FE08702222177BB2070A713EB7C68108F1434
4ADB55BBDAF822BC8A87456E8B18AF99369D802845772B762039BA3FA0DF60E4
BC4BAC8145793406E6AC927C39CC2B094ACE7BA35096EAED9DBD094138AB> |-
/L <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE59D6DC14BCA861C9A69137A3
82356EFD289FEAF3651F7ADE31DBDD245273237F9A9C85243C9761EA513AFCB6
0B887DABED7E4395B6FA6EE6621D546756260945FAACA50C0FEBB218EC2D722E
A057B7FD880F9760C8D8775ECA00A146183C53FDB250FD5E1E5B0D84BA6686AF
7FF84ADAF641B834EDB67857EBB53C605638D09D0E6CC65AE00FC8433F1D1775
729399> |-
/M <1C60D8A8C9B08A95D13D7C49AAF586385B8A8E42CD17C57AC73AA298ECF4
1304F2EF562DF9FBA269FF527D484CD6757F020EAFE2BEBBDB54AB246518F648
7F284DC24DDE105BB31AB4D7BF0579944336FDE2A71F49BB9BA99385A6A2C7D5
7309509E8A7F16435D610DBD44D08F3925997BC87396CD15EA2B5B47D116B06D
4CED9B4C44BF64F62E5F6C1B8EEB78EADBE71073CD56D2E2BAD13686E49EB014
BA8F490B62AD90E1F028672EDADD3FA751117E9A4224A9588E67BE300286E3AA
F92709B509C1A04D2A8FE0B01A98D607478825851F7FB746F28087CD8DC45534
AF263E71E72F475F42D12454B0CF9405E860DA0D95A1DCCA2D9AE1D3D8790075
4B5F> |-
/N <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE4640A7ECAB13F1FF7A686CF9
64902DE822017F6A24911C8D80127F220782BBFD8E7E189CD05AD13142BD2D8F
7E0B14980E2DFDED4ADBE2B1DF04FFFF7F48756D00B04B9508D6A30993410AD5
51C1E9AB9AC91D0BF4F8465E0B62704843D41AE3B3563004021650273D969AC8
AA987A105F742B78B44CFF4DE20EFA28211A2F14623F47A0B4AB7B2965B7219F
E3E61852E8E42D330DCB9712007299A4BDDF96D21DB99B0FCB1A7804CCB678F4
74D127736D9360C96DC2CB61922D4A7F3F6B161BA15CE58B20AA9752E47CD227
41886B4E65DCCA07FAA5057BFB0C74EB2E75D1221EFDB6700D3EEEE84B239197
ECB5A9FDC7E2C61DEC059CF7B13C7A68635B4F0357FC6659862EED240EF125B6> |-
/P <1C60D8A8C9B08A95D13D7C49AAF58639281AD56C6776BB88706303F3F334
F9184EE1FCAC7ECE8976D80E1BFBCFD447A71A0661347496FAED8931FFA48154
0CC8697641FB1C963FA355E6D50BF3C2650A2E124483841980D47733B3819F75
B1E366BCB0670345456C1DD50B3DEB5E8FACA1CC02FFCB6290062DCD1B5FD175
9ED1F5C829C273> |-
/U <1C60D8A8C9B08A95D13D7C49AAF58B31B89FB5EE67B3B85BFC0EB248FAD8
F9CACA9F0E105A9B828EEC28FD9D10FB9CA3E6D881F52611565877D471D757E2
F6BB5F4186E7490048521A6951A420557F3C998D5D0E7D8DA5D25A939E19CA7D
F3BBBC1BD185164DAF0DA2F6D2DB700680F38064786A0D1AC0054C4436AE7B8F
DB78DD1BB71BB35C4FC4CC2E8BE03F13150B52DDD091A7D3FECF09E3290382CB
D9E64AE4E33B35> |-
/W <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE371D5E2F0DB736536103600E
446C761A1E42F9C25B71CBEA80C04B75B682E2F8611C546AED535716907D0D29
0889D6111B3F063A32BFAAAF54F0FFE3DB433209FC5285CC4ADD133B509A8021
E1FAECBEFE33E1B2EB5B7163F2DD855977C92E5149DDE4E06FC902C4DF2A2BC4
E751E1C885382902C0CAC84E018565B92744C5D191DA3A09D67171B442BFD013
DFC06100DFC42E86A168D05158B53C0E912FA519867FB266114D6024A4B1565A
9D18EA429CEE12828C387DF48C97CC96B7FD844F45F37BBF5CB9E075C4385A93
3C55A04F3D449E24D625C1E37A234231F4B5CE5596A607541D6CC572596C4AA0
349024789DF55701701C0FAB64112630AEAD947F285FF4FF2D4783109DAF7C94
02E7090481AB0B> |-
/underscore <1C60D8A8C9B08A95D13D7C49AAF52786F368A28B004A5E8FDF0
C66105CF008CAE27E18A621727287A244E5016E7A5138DEC606602E83A6F94BF
8E4> |-
/d <1C60D8A8C9B08A95D13D7C49AAF5F2BC27BE592C286A5E6F0400D0D5A9B8
0E8E3D446260BEE37472DC0BB80D33E4ED1DFAA4BA5A10B4FE96CD17127B0C11
94F00A1256691313A11E8E5A57CF4F83E75D08524627391629C27189B46A4DCC
4CD1BCF7130245754257B5AAF485D5AE9FE1B647D2EE1C8D9A73E741F646FC8D
B1CC9B0C1BBE5786B320EAAE9D70C123CD38F68FDC422837AC7D91BCE243246C
43661493401629CFCB5492728A460B7C1DD833A5C103FD25CAA56943C8320A2C
6CD413AF0F5685750CFFBDDCFAE02BA889F26686> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMD+SFTT1000 /Encoding get
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 72 /H put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 85 /U put
dup 87 /W put
dup 95 /underscore put
dup 100 /d put
pop
%ADOEndSubsetFont
/FZJXMD+SFTT1000*1 
[65{/.notdef}rp /A /.notdef /C /D /E 2{/.notdef}rp /H 
3{/.notdef}rp /L /M /N /O /P /.notdef /R 
/S /.notdef /U /.notdef /W 7{/.notdef}rp /underscore /.notdef 
/a /.notdef /c /d /e 2{/.notdef}rp /h /i 
2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /.notdef /v 
/w /.notdef /y 134{/.notdef}rp]
FZJXMD+SFTT1000 nf
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
197.672 92.453 mo
(lwSyscall)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
244.734 92.453 mo
(\()sh
%ADOBeginSubsetFont: GAAAAA+NimbusRomNo9L-ReguItal AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
systemdict begin
FZJXMB+NimbusRomNo9L-ReguItal dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CBBCDCD2F001BBE788476BF095E47CF14E2CE49EF
9CA2B7A5BD99BFE693BD109792E1F7C905A135699BDF5AEB> |-
/hyphen <1C60D8A8C9B81F2C3AEF8CABB00AA0848D99DDA5FA3929309DD8608
1> |-
/period <1C60D8A8C9B8707CABCFCF9DA0E740BAF14381B46E7EF43F488F487
2E9294321A54B0280> |-
/b <1C60D8A8C9B7A73DCEB657E5279EC2813443F9DAA13C3B06DADED01890F2
26DBFBD5F2874F07980708B7D744478E771576F3EF0405F8408690E6A059941B
0451407AA0CAD51E11196873594D0D4ED28D93AD92EA8DDF1325C4E1CE7631D7
A468CA8C2A7F418D1F6E7224BF609195DD17830E2D332E69032AEC307FA2DD6C
8AC8B3B34D51EC7E61F7C549FBC664B905B07F673C> |-
/i <1C60D8A8C9B854D083AFE4C873AEC1E7FDB9EE859797A45455327B9BDB70
760240E8ACF666DC8D59275277C3F3C252A46BC2A92D5BC509D2A0906FF0489A
6A2863B6C52E12014E0BA262008BDC08AE94865A26FD90663B8FE13B433E5668
3A79BB00550E9151E21E522B2D2B5D71B39AD827ED501C13C2B901FC1670356A
6C436566AF4075B7579EA6C70A85F6C747F08B> |-
/o <1C60D8A8C9B7A73DCEB4B8D8F0C1B91E5FCECE20C383B5A3A04C5E300C44
73F1758AD6EBD68AF3342250ECA77E8264601968E8BB73C8BCE96E285325E4E5
F9A5427A9867F5E01A213534416D8FA7BD45D53E120FBAFC16324C55CE0B8ECC
A30F4FDCBBCADFF556EA> |-
/p <1C60D8A8C9B7A73DCE8ADACD4C270B1786D169F3E20E591ACA0CE0F9229D
EE17149E57EA8C388BBBF5AE30EF5200D4A0F04C5FB938FADE53A36AA852E300
38E1FA465FEEE81384F5AC9A894FCBDF86FEF2356D791085E73D3BAC227D40C3
D40A0ABF220A13538E735EB867A89FE7F997755F8A45044BE6AD11D1FCB29BDB
76E0B5A99487831F30A755181A44C79BEC9E7A2E620A0A8F0F68B5D6A210CFBB
2A4B6BC0BD97267D664E7703B3442231F4316A57450D866947A8A78B101E2823
43E74357967E784FE808D25ACE69CE8C0752F22F39F56CA80C2FD357DE0B> |-
/s <1C60D8A8C9B7361F8BB5EB474F071A14F6886A6A71311E11AE8DF8D62DC3
BA85E254787E7DE96602C8D214E85040DD2CD59A86CF2994C7DBEBE3497C89DE
48A5193513118D9558DD3565C61BBDDA73580B36F71CB4E32D78B6DB4E5ED4D1
267100D1262D415027F043F562CDF11A5D7AA04FB2DDF5C58D3789142B59E5C7
AE5B5B52E6A06FCCAD6BA1E60EEC10FDF0D840DA95B7FF8BF26E189AC01FA90D
B18C7828CCC68A7BB8906A516C79B12ED0B2A14494F039D484536482D2FB3F95
00> |-
/u <1C60D8A8C9B7A73DCCC2CF115CDAEE6701EBB7DAD888B67B0C8DDCCFEB35
3A816606D3C7255E276ABC3A30631E5FA535F8FE33D5EDFC4C30AE54E17616AF
675EAA45CF42558EDFE865243B3D929C8AFA5A005A2DBEAEEB334455243825CE
104A81C6FB29B5FD80F553583B3A8C9ECC2F2690C5846CB01F62DA5A76497F9C
F8A833611EA650200ECA71FA61505A0FFB632F91152F22512D8142E76932C548
4D5B5A5A7D3D3567F5060DB7648F68BE648F39ACF0F933B98F8FC889> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FZJXMB+NimbusRomNo9L-ReguItal /Encoding get
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 98 /b put
dup 105 /i put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/FZJXMB+NimbusRomNo9L-ReguItal*1 
[44{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C 29{/.notdef}rp /a 
/b /c /.notdef /e /.notdef /g /.notdef /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s /t /u /.notdef /w 136{/.notdef}rp]
FZJXMB+NimbusRomNo9L-ReguItal nf
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
248.052 92.453 mo
(tar)sh
259.31 92.453 mo
(get)
[4.88168 4.4234 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
271.384 92.453 mo
(,mask,syscall,syscall-args\))
[4.98129 7.75092 4.4234 3.87552 4.98129 4.98129 3.87555 4.98129 3.87552 4.4234 4.4234 2.76959 
2.76962 4.98129 3.87552 4.98129 3.87552 4.4234 4.4234 2.76959 2.76962 3.31747 4.4234 3.13812 
4.98132 3.87552 0 ]xsh
-36 114.371 mo
(Table1:APIforinteractingwith)
[5.29006 4.4234 4.9813 2.7696 7.06348 4.9813 6.14692 7.19301 5.5392 5.9476 3.31747 4.98129 
5.95755 2.76961 4.98131 2.76959 4.4234 3.31747 4.42339 4.4234 2.76961 2.76959 4.98129 7.6214 
7.19299 2.76961 2.76961 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
98.189 114.371 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
114.249 114.371 mo
(s.Parametersinitalics)
[3.87553 6.01741 5.38976 4.4234 3.31747 4.42339 7.75092 4.4234 2.76959 4.4234 3.31747 6.50565 
2.76959 7.6214 2.76959 2.76959 4.4234 2.76962 2.76959 4.4234 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
207.715 114.371 mo
(new,caller,...)
[4.98129 4.27396 5.9079 5.16064 4.42337 4.98132 2.76959 2.76959 4.4234 2.76968 5.17059 3.98505 
3.98502 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
270.822 114.371 mo
(are)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.623 114.371 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
304.319 114.371 mo
(descriptors.)sh
354.052 114.371 mo
(Argumentsargsare)
[7.19299 3.13815 4.98129 4.98129 7.75092 4.4234 4.98129 2.76959 6.50565 4.4234 3.13818 4.98126 
6.51563 4.4234 3.31744 0 ]xsh
-36 126.326 mo
(passed)sh
-6.86923 126.326 mo
(during)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
21.721 126.326 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
40.355 126.326 mo
(switches;)sh
80.0561 126.326 mo
(resourc)sh
109.366 126.326 mo
(e-spec)sh
137.391 126.326 mo
(denotes)sh
170.397 126.326 mo
(resources)sh
210.596 126.326 mo
(\(e.g.)sh
231.637 126.326 mo
(memory)sh
267.413 126.326 mo
(pages,)sh
295.188 126.326 mo
(\256le)sh
310.491 126.326 mo
(descriptors\))sh
360.095 126.326 mo
(that)sh
377.619 126.326 mo
(can)sh
394.017 126.326 mo
(beshared)
[4.98129 7.00366 3.87555 4.98132 4.4234 3.31744 4.4234 0 ]xsh
-36 138.281 mo
(ornarrowed.)
[4.9813 5.80812 4.9813 4.42339 3.31747 3.31747 4.73223 7.193 4.42339 4.9813 0 ]xsh
-36 168.548 mo
(tent)sh
-18.8145 168.548 mo
(state.)sh
4.93638 168.548 mo
(The)sh
22.6697 168.548 mo
(application)sh
69.1751 168.548 mo
(may)sh
88.5723 168.548 mo
(achie)sh
109.344 168.548 mo
(vethis,forinstance,)
[4.83185 6.65503 2.76959 4.98129 2.76962 3.87552 4.78204 3.31747 4.98129 5.55905 2.76962 4.98129 
3.86557 2.76959 4.4234 4.98129 4.4234 4.4234 0 ]xsh
-36 180.503 mo
(bybarriersynchronizingsuchthreadswiththethreadthat)
[4.9813 6.89412 4.9813 4.42339 3.31747 3.31747 2.7696 4.42339 5.22033 3.87553 4.9813 4.9813 
4.4234 4.98129 3.31747 4.98131 4.98129 2.76959 4.4234 2.76959 4.98131 6.89412 3.87552 4.98131 
4.4234 6.89412 2.76961 4.98129 3.31749 4.42337 4.4234 4.98129 5.77841 7.19299 2.76959 2.76959 
6.89413 2.76959 4.98129 6.33621 2.76959 4.98132 3.31747 4.42337 4.4234 6.88416 2.76962 4.98129 
4.4234 0 ]xsh
-36 192.458 mo
(calls)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-14.877 192.458 mo
(lwCreate)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
26.955 192.458 mo
(.Athreadthatdoesnotexistinthepar-)
[6.69487 10.0523 2.76959 4.98131 3.31747 4.42339 4.4234 7.84058 2.76959 4.98131 4.42339 5.62888 
4.98129 4.98131 4.42339 6.74477 4.98131 4.98129 5.62886 4.27396 4.98131 2.76959 3.87552 5.62888 
2.76959 7.84058 2.76959 4.98129 7.28265 4.98132 4.4234 3.11823 0 ]xsh
-36 204.413 mo
(ent)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-20.759 204.413 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-1.63402 204.413 mo
(atthetimeofthe)
[4.42339 5.83808 2.76961 4.9813 7.49187 2.76961 2.76959 7.7509 7.48192 4.98131 6.38594 2.76961 
4.98129 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
71.251 204.413 mo
(lwCreate)
[5.22939 5.2294 5.22939 5.2294 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
116.15 204.413 mo
(may)sh
136.374 204.413 mo
(not)sh
152.175 204.413 mo
(switch)sh
181.246 204.413 mo
(to)
[2.76962 0 ]xsh
-36 216.369 mo
(the)sh
-21.3351 216.369 mo
(child)sh
1.08078 216.369 mo
(inthefuture.)
[2.76961 7.47195 2.7696 4.9813 6.91404 3.31747 4.98131 2.76961 4.98129 3.31747 4.4234 0 
]xsh
-26.037 228.324 mo
(The)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-2.48502 228.324 mo
(lwCreate)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
47.409 228.324 mo
(call)sh
69.8547 228.324 mo
(tak)sh
81.9294 228.324 mo
(esseveraloption\257ags.)
[4.42339 11.9353 3.87553 4.17433 4.83185 4.4234 3.31747 4.4234 10.8293 4.98129 4.98129 2.76962 
2.76959 4.98129 13.041 5.53922 4.4234 4.98129 3.87552 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+SFTT0900 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JAAAAA+SFTT0900 def
/FontInfo 6 dict dup begin
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 89 /Y put
dup 95 /underscore put
def
/FontBBox {-210 -359 1376 844} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 1 431 439 612 623] def
/OtherBlues [-226 -221] def
/BlueScale 0.0396299 def
/StdHW [100] def
/StdVW [50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/A <1C60D8A8C9B08A95D13D7C49AAF5863C955601F5AC595DE220AC24446D6B
EC5783122E6C6CB7B6C81C95EF0BA0FBC2E76999A87F447DD642174E21EEDAE5
FBD06495EB3AD69DE255D4CCF02DA3091D7573352B03E1855FD9056E3BBA6DA3
397C8B4BC7748B7191E5A4841224BAF6EC7487BFC6E97693243F06C49B556B19
F377495084AD8E52ECD3F9E71D33E21C555A23D479D67FDDA914F704EE595046
1272BBD88839E11360E55BB12EE132540D0B7C402D1679D9DC2D61CD9FCC9B01
B011C3AF38DD9DFA2979C2CCB9493DBEE433B0F88E25A5A308305BACA490141E
BDEA00BDC41A1DBF85505FBF91B5E6CC54E120A38E1947A9BBDE77A6EC7840D2> |-
/C <1C60D8A8C9B08A95D13D7C49AAF58B35F26D69BEEB78AED4059DB510F829
6F9C0935E902CEFBC2FC07C0E5D06650E41D66D885ADB16EF8C2303E71F32EB3
EDA6293AB84860BF796FBBA5421D6E5FBE1EBBCFD1E31D3D5615E4E519550F73
5E4452A1C3E8D13418EC456BA2D446F04C3A4499F7C4944FD418C6C16AD29DC5
3CC828CB48376F5C3847DD6B79A9C4A93AD6C99AE3055E3CBA> |-
/D <1C60D8A8C9B08A95D13D7C49AAF5F2B08E91765EDA9865799C60DFC5185C
16E0CB0F5114DE38D23688A997A386C120FDCDB668D7AFEB8BFBE8599BEF0C02
41BAF0E794AAD8DC12E9991D8810E7E521DAF5C982380BBD359CF5666E153283
B9291C0D28A4919BB864742B9ACFEE203723FCEFC9838C4723A973A74E7DF686
6CE7B9BE852053D1D40ACE0903A60A3456844A7434B844E58E90C9893E3F6A58
AAE2B75AA1CE28AA397D7DC3965956FA9A9390BAE59814212A23> |-
/E <1C60D8A8C9B08A95D13D7C49AAF5F2B08E9145DCE6AFCD4211DCC5EDC613
C74965995E8BD1E6E65F3BF66A9196EE2571C4D93347D014112471E7C6195F07
F79B1CCC6DAE7A9FB31C5232441561D1A950F4E8EC22A1E718DADA8D443FE8B8
E67B43C359C47254A40A1BDAEF0298FE867CA8FBC9E8DBB5A7C907987F5CD48F
D4862B0946922BC0A619EE1722FE68D739B66E5EE1FA758CE2B00D0FC53D62F9
90EFECCC4815C1EDB18AE77D1FEAFA698E0DA2C4810217782C50A2B4B2334C7C
9AB220181AB67985271C5B047A75EF15E37F6FBFE7E0870E7F1B8D8557DB2906
C4D245B68F76935E7DF4479E663EB82E673FC4DDCEC807AF98926D2509B1E9D4
A32B3AD90A6BE971FE9E2BBDA9A5C0C682B5CC71488145358E5E0455F500FEF6
10BE55A429181938D5C2DFFAA58F6EB00DAEDEAFC13D579C34CFD364AE299FB3
6B7E6A55> |-
/G <1C60D8A8C9B08A95D13D7C49AAF58B35F262AEBFBA307E0A3134C89DECA3
9836AF0E42E3E9008832A343FD15997BF228A9CF10EB818139323A9CABD2E068
A6DA58D5C0524F202011CEAA16877E2A4BFEF9B0950D832748FB98C07C93BBEE
15259DDF175A6BF1CEDE9FE8E6656924B26AF2645989946E111F33D708858151
AE151D035988997F96B205BD70D3D9675F78406E252A272E3C830FC2AE9BA613
F060C5355BD51AB79EA5427C> |-
/H <1C60D8A8C9B08A95D13D7C49AAF5F2B08E9173F5CE49C6CB9FB17E96CE76
2F3AF95FA4EF66A4E691B41B20397A97826457E0B039DC816AABDFE984E03A1E
5D324914CAA2E7E681F0691C9BB722FBD7ADE421DF33C09E1D6F47D21FBD55A0
793B6876C29C4E8AD4A9A443C867CF4BB37977079E00B821941C27734CBAC0C7
82820D89C2FBB793B7A5A5D6B4AA12BFDDDB416C73024F351424D7718672962B
CC5F9E44810F53A1758940DBD18422885B2402705090855E33BAB5931400024D
0A7CC4B97CBD004E187050EF8E98E194EDB42ABECD2AA3727E69A3459250331B
65197F16D219EEAE9C9EB2E4EB4B708C1FAA104CA34B663C21CD02A21F755D44
3D959458301E8FB7DF0B02B36B0AEF13F3CE66B2A9ACF3234E5F04CA7BCC9BBA
BE83532F8880DF5F6FABC5BE70D8C4C42EF28911AC8C290BE23C14D560AEB507
155984D1A763282C6D5B063D5DD9ACBAAAB4A7F3899B42F5FC14FDB150DC5FB2
1EBE3B19BA4FD62022521D8289274DD3604BD494A2CE0C028C954AC96DDD7857
95A5D5CF63125C5FF38DB0C57428952659F85A4A66CA00A2BA56BDEAD18657B6
2B6842DB668742C2FA36A5F2F42D3CE182D17676BB17E9BA663761AB292296B3
7FCD9C588E8394601D86AC4D0B3636A587B12CF2DB0F16B8DD137F638F4AF239
780BD15BA259006E53D3EB5D406FA8CEC833C0E73DB53BFC5D389AAE71502DA4
E99F2AED4426B3DBFB9AC18440DA1E06A16BB59D25B6E6E03D40019FA5C6> |-
/I <1C60D8A8C9B08A95D13D7C49AAF5863D6312C38B0F63204BB7A1D399B83A
6E77049A07F6361F8DDE18F77658FDBA09E4E4C8536F6B5A3654D41852EA5686
B34B21A340AF1016963249DA6D26DD16472FC3F0B5E61C57A65AC526FB80F257
242E8CF4136D6E162E8960B4B24255A5> |-
/L <1C60D8A8C9B08A95D13D7C49AAF5F2B08E9159FCC0069FC17ED61F062C09
D440A678F91BC0F7460F36A2CA07758C58E2FCF61EA20BE882CBB096F2259904
59429EA3DF158014B9F35F5DD45E552D0ED2993CB5AFE68748FD894E4BC20130
78520D340172290CF64D3BAE1DADA68CC962B7A8AC115ADB9CA3B74500F9C37E
9FD1C8E64084DBCA5DF82EE28085014A81BDB3ADB732037A4670FDAC96E4BF> |-
/N <1C60D8A8C9B08A95D13D7C49AAF5F2B08E914AD610A89BE9745ADC1037D1
CABE5AE048B25E903E5A282F6FD36DEF352F83C154D40E5A3E4BE262C2D2D7EA
3B81FAAD9DFE0EA116FD4A18A072B025009032B0794B284DA7C9AD5E7BAC78B6
2FCE70F3C987C2843D704A14B10F236F16F0B11444DF7ADA8B897CDF8B4162C1
B6172DB5D25B250DEA14A5F65191E95FC01551BF9EA069A82DB86C1A15B71C6C
CE87F87A4B79BE99DACF138A85C28155D8ED674519C00DF0CEFFE633D0D8C21C
7678FDBDB617F07A324516096BD0AEB0CE9983F833EE3A9688BAF695CCA72E24
96E0A38595D3B50673AE6822DEB09A6A4738F7130BECF5A916A4314013D0EF0E
472E5380C8011628F893606ABE0338F4CD47C4D48986BE0CC63B608E0D79545D
1360E0> |-
/P <1C60D8A8C9B08A95D13D7C49AAF5863D631DD5A21005950A4E513ED38FF7
1E8D42A92A0EEC3AA6F0A50D72D88DAFA44AD7FD62B55C4B9F088834D61FF1D8
940115A05112FCEB1D457830FB1555902FFE70C00C7F2A37935FD31977761A9C
8303DC9022B3699A6DA6BF43AEDE039BC8E24553C44C19D475591C13386BAC09
3D1B5C16AA85E3> |-
/R <1C60D8A8C9B08A95D13D7C49AAF5F2B08E9173F5CE49C6CB9FA5CEDCE6EA
3C8C3D855B550496ABB09534B68A5E4E6DED1257B09822572DA59A8CEF505BBA
D5883226BA9480EF003D0BA19DB7C0C4EA5693002FA63C8016C48F260E880B8D
EF64DD1682DAE1FB80CAD411623880AC840A4E85EFF1867F98BCF5D171D967DD
1C8DAE14120541B5B6935AC23123D1D4976AC6F578D4E8C15C58BD09FDA31A17
D46281B494DB465C93FFCB3AED4B158807ED9B588581093F83A636187E2A4F55
3E0FA5BDF96B8CEF835875FDA4232F0B6D97660BC169964E8A9FAEAB7AFE5500
5306A1B4C3B285F399E020EED98F6753685A3472663216B529D3B964C2F1CD9D
D954DE5A> |-
/S <1C60D8A8C9B08A95D13D7C49AAF58B35F26D69BEEB75DDED31CDA495A8EB
0D79BFEF1374F6355B09718895C87EF1B1A4A6BA8EBE1AA077E1A429B552BA23
990A68032FB9A3B6E80FC283A985CB59F6FCB0FA6EED66827657C2332A505A96
0E5BB9BA4899CB9DC86091387043E298FF74B2A2D34E6AF5DD9105020FA1E0A3
FF4C12C01115119E816ACB011FA9488FB3554F6988883ECE1D989C12929E8B85
3C9AC3D54E16181C07BB497AAE8AA0E6418B8BE637> |-
/T <1C60D8A8C9B08A95D13D7C49AAF5AFD42851061087F17D5FFF0C60E250B4
0642EF12AC022D36FA70090378FC38A0CEF73DC26B187215D992C7D4D3BFF2B2
C6BD6A8B6F94FAD0E43CA46200561F639455C25687012321025287B952C41F33
3473B7C2D426CEF2C6C21504391B890315E2138B5BB909EE4255A4CD75564B99
62BBB34F91903A2CCAB8A1> |-
/W <1C60D8A8C9B08A95D13D7C49AAF5F2B08E913425158FB60EDFFB665ED9AF
B0C6BE51F02A9B624EEB173C2430F7A33D054FDAF99BEA854AD59470E37AE3C5
EB185C6556A27FC303B43EC7EFF3671A91D9C9CFBE85098EF03BFB8C1B33FB98
6772C14339603CD301EC4EF2E9892B98BBAE6F165D1B023FABF94831EECD806A
8596D2CA63E13C23AB1C9ABAC50F25DDCCD10619C4F677D51F090E737CBFF63F
1B1FFAC8657C35C1526860BC99054F5B75C7EC2FED08C4B7EB2E0552ED325267
D960894E7CEC5248D311E448D9C0E6C948BD052155B31B93779B2A9456CE8400
17B1F95C9D456B55EC7C15E752F24497DFC1C7614294B4ABB27EBD87973041EA
8C42A1B82D54> |-
/Y <1C60D8A8C9B08A95D13D7C49AAF5863D631D268450F80418EF5FD72D1DD4
791F928A69C726E414DBFC815D34D54974797734FFCD26E6061EB9D86ABFE7E2
29DD4F1519C475E72B7C52843C7A4CCDC9464F540147AC435217FB7699A9C066
981E032612965E2FBA7DF06E4319BB8C408D39BD064EF2FF8FAD0E242E9DBFBE
59AEFBD71C9EA4B1730AE32943DBB79566D700FEF2FFDE56076E852B09648694
B91AA5AE8B72782F6FA07DE653D5ADAF83E9B3157A1CAEB85451622A7013C9B0
C09A31F2302C6D5AA8314274D97AA3C0A5D07D6386B155CFE01E4D279B453D6E
E568CFE4300010FC4806EF0B44498B322DA23F652EF26C9735C7E9F2752DF9E3
B48D156951922331E59EAA4B12513A7788BC471E44B1EAEB6F4F4384BA55122C
6147BDF8E85220A2BE7A5BA15302E9B0> |-
/underscore <1C60D8A8C9B08A95D13D7C49AAF521569E7C3A3028FEEBB6455
A8E9B49B4931436246BE0A3D7CA3D16751447559D41266758F9D908D1FC00B96
CA9> |-
/.notdef <1C60D8A8C9B08A95D13D7C49AAF504> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXME+SFTT0900 /JAAAAA+SFTT0900 findfont ct_VMDictPut
/FZJXME+SFTT0900*1 
[65{/.notdef}rp /A /.notdef /C /D /E /.notdef /G 
/H /I 2{/.notdef}rp /L /.notdef /N /.notdef /P 
/.notdef /R /S /T 2{/.notdef}rp /W /.notdef /Y 
5{/.notdef}rp /underscore 160{/.notdef}rp]
FZJXME+SFTT0900 nf
FZJXME+SFTT0900*1 [8.9664 0 0 -8.9664 0 0 ]msf
-36 240.279 mo
(LWC_SHAREDSIGNALS)
[4.70648 4.70649 4.70648 4.70648 4.70649 4.70648 4.70648 4.70648 4.70649 4.70649 4.70648 4.70648 
4.70648 4.7065 4.70648 4.70648 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
46.401 240.279 mo
(controls)sh
80.9015 240.279 mo
(signalhandlinginthechild)
[3.86555 2.76961 4.98129 4.98131 4.4234 5.17058 4.98131 4.4234 4.98129 4.98129 2.76961 2.76961 
4.98129 7.37231 2.76961 7.38231 2.76959 4.98129 6.81442 4.4234 4.98129 2.76959 2.76962 0 
]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36 252.234 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-19.94 252.234 mo
(,asdescribedinSection3.7.)
[4.84183 4.42339 6.2267 4.9813 4.4234 3.87552 4.4234 3.31747 2.7696 4.9813 4.4234 7.34242 
2.76961 7.33247 5.53922 4.42339 4.42339 2.76961 2.76961 4.98129 7.33247 4.98131 2.49065 4.98131 
0 ]xsh
FZJXME+SFTT0900*1 [8.9664 0 0 -8.9664 0 0 ]msf
99.462 252.234 mo
(LWC_SYSTRAP)
[4.70648 4.70648 4.70648 4.7065 4.70648 4.70648 4.70648 4.70648 4.7065 4.70648 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
153.583 252.234 mo
(indicates)sh
-36 264.189 mo
(that)sh
-19.1533 264.189 mo
(anysystemcallsforwhichthechilddoesnotholdthe)
[4.4234 4.83186 6.88416 3.87552 4.98131 3.87552 2.76961 4.42339 9.65376 4.4234 4.42339 2.76962 
2.76959 5.77838 3.31747 4.98129 5.22034 7.19299 4.98131 2.76961 4.42339 6.88416 2.76961 4.98129 
6.32626 4.42339 4.98131 2.76959 2.76961 6.88416 4.98131 4.98129 4.4234 5.77838 4.98129 4.98132 
4.67242 4.98132 4.98129 2.76962 6.88416 2.76959 4.98129 0 ]xsh
-36 276.144 mo
(required)sh
-.373901 276.144 mo
(OScapabilityshouldberedirectedtoitsparent.)
[7.19299 7.96011 4.4234 4.4234 4.98129 4.4234 4.98129 2.76961 2.76961 2.76959 2.76959 7.41219 
3.87553 4.98129 4.98129 4.98131 2.76961 7.41217 4.98129 6.84431 3.31747 4.4234 4.98129 2.76961 
3.31747 4.42339 4.4234 2.76961 4.42339 7.41217 2.76961 7.41217 2.76959 2.76962 6.29642 4.98129 
4.4234 3.31747 4.4234 4.98129 2.76959 0 ]xsh
-36 288.1 mo
(This)sh
-15.9752 288.1 mo
(feature)sh
13.9922 288.1 mo
(enables)sh
46.1814 288.1 mo
(aparenttointerposeandmediateits)
[6.74467 4.98129 4.4234 3.31747 4.4234 4.98129 5.08093 2.76959 7.29263 2.76961 4.98129 2.76961 
4.4234 3.31747 4.98129 4.98129 3.87553 6.73471 4.4234 4.98129 7.29263 7.7509 4.4234 4.98129 
2.76959 4.4234 2.76959 6.73474 2.76959 2.76959 0 ]xsh
-36 300.055 mo
(child')sh
-13.3053 300.055 mo
(ssystemcallactivity,asdescribedinSection3.6.)
[6.36618 3.87553 4.9813 3.87553 2.76959 4.4234 10.2415 4.4234 4.4234 2.76959 5.26025 4.4234 
4.4234 2.76959 2.52054 4.98131 2.76961 2.76959 4.33374 4.98129 4.4234 6.36618 4.98129 4.4234 
3.87552 4.4234 3.31747 2.76961 4.98129 4.4234 7.47194 2.76961 7.47194 5.5392 4.4234 4.42342 
2.76959 2.76959 4.98132 7.47192 4.98132 2.49063 4.98129 0 ]xsh
-26.037 312.01 mo
(The)sh
-6.43069 312.01 mo
(fork)sh
14.2814 312.01 mo
(semantics)sh
57.6786 312.01 mo
(of)
[4.98129 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.093 312.01 mo
(lwCreate)
[5.22939 5.2294 5.22939 5.2294 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
116.038 312.01 mo
(enable)sh
146.155 312.01 mo
(the)sh
162.444 312.01 mo
(con)sh
176.431 312.01 mo
(ve-)
[4.83188 4.4234 0 ]xsh
-36 323.965 mo
(nient,)sh
-9.79836 323.965 mo
(language)sh
29.6934 323.965 mo
(independent)sh
81.9173 323.965 mo
(creation)sh
117.534 323.965 mo
(of)
[4.98131 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
129.363 323.965 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
145.422 323.965 mo
(sbasedon)
[7.4023 4.98129 4.4234 3.87552 4.4234 8.50806 4.98129 0 ]xsh
-36 335.92 mo
(the)sh
-20.6875 335.92 mo
(current)sh
10.6647 335.92 mo
(state)sh
32.0644 335.92 mo
(ofthecalling)
[4.98131 6.46565 2.76959 4.98131 7.5616 4.4234 4.4234 2.76961 2.76961 2.76959 4.98129 0 
]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
89.08 335.92 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
105.14 335.92 mo
(.NoadditionalAPIs)
[5.62888 7.19299 8.11952 4.42339 4.98131 4.98131 2.76959 2.76959 2.76962 4.98129 4.98129 4.4234 
5.90781 7.19299 5.53922 3.31747 0 ]xsh
-36 347.875 mo
(are)sh
-21.4248 347.875 mo
(required)sh
14.1914 347.875 mo
(toinitializeanew)
[2.76961 7.39226 2.76959 4.98129 2.76961 2.76961 2.76959 4.4234 2.76959 2.76961 4.4234 6.84431 
6.83434 4.98131 4.17432 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
87.242 347.875 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
103.301 347.875 mo
(.Thenew)
[4.9016 6.08708 4.98129 6.84431 4.98129 4.17433 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
144.878 347.875 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
163.352 347.875 mo
(can)sh
179.591 347.875 mo
(be)
[4.98129 0 ]xsh
-36 359.831 mo
(vie)sh
-24.0748 359.831 mo
(wed)sh
-4.79712 359.831 mo
(also)sh
13.9326 359.831 mo
(asasnapshotofthestateofthecalleratthe)
[4.4234 6.5455 7.10333 3.87552 4.98131 4.4234 4.98131 3.87552 4.98129 4.98131 5.44954 4.98129 
5.99741 2.76962 4.98129 7.10333 3.87553 2.76959 4.4234 2.76961 7.09337 4.98129 5.99741 2.76959 
4.98131 7.10333 4.42339 4.42339 2.76962 2.76959 4.4234 5.99741 4.4234 5.43958 2.76959 4.98129 
0 ]xsh
-36 371.786 mo
(time)sh
-15.7062 371.786 mo
(ofinvoking)
[4.9813 5.88783 2.7696 4.58279 4.78205 4.9813 4.98129 2.76961 4.98129 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
32.573 371.786 mo
(lwCreate)
[5.22939 5.2294 5.22939 5.2294 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
74.406 371.786 mo
(,enablingthecallertorevert)
[5.09088 4.4234 4.98131 4.42339 4.98131 2.76961 2.76959 4.98131 7.55165 2.76959 4.98129 7.00372 
4.4234 4.42339 2.76961 2.76959 4.4234 5.89777 2.76962 7.55167 3.31744 4.17435 4.83185 4.4234 
3.31747 0 ]xsh
-36 383.741 mo
(tothisstateinthefuture.)
[2.7696 7.47195 2.7696 4.9813 2.7696 6.36617 3.87553 2.76959 4.4234 2.76961 6.91405 2.76959 
7.47195 2.76961 4.98129 6.91405 3.31747 4.98131 2.76959 4.98129 3.31747 4.4234 0 ]xsh
%ADOBeginSubsetFont: KAAAAA+NimbusRomNo9L-Medi Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KAAAAA+NimbusRomNo9L-Medi def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 65 /A put
dup 68 /D put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
def
/FontBBox {-168 -341 1000 960} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 461 481 676 696] def
/BlueScale 0.0396249 def
/StdHW [33] def
/StdVW [140] def
/StemSnapH [33 44 48 55 66 73] def
/StemSnapV [118 140 148 163 174 178] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
27 dict dup begin
/period <1C60D8A8C9B8707C5568E087A7013AEDEAB4E43FD5B4AD668B70E3E
CD4C9D9B81940C416ED75> |-
/two <1C60D8A8C9B7A73DC524371C3B3C004F1EF6620B304256306A6A0A5762
AB030A5B5760479101466BB995E20158F149E6FDC3E029D4DC73B72D7AD0739E
2501D144435CED231DC762E298F8A6A32E386057A36D7B3D6E2C3ADF2A7194B1
A5F418C97BE1E34F91FB8A35F20B990141E7EFE791C972A8> |-
/three <1C60D8A8C9B7A73D33A522A68C89F07381F759C08B76352920E51F0F
8D18FCEB9681C843B90F63025DC0880414F2D7D93AA97934014CD23413443E09
76FA212FA9F97D957B92D23C1FC0CF570D976A1207454274D9DE46AEDE47751C
76123DEF9BB8F05A0410B446B565B57B08644D6020154F60616734B8844709C4
F429D35411FD56D5C6F4754ECCE65007A3690F0B711C193F41AB8054395F62E0
60921198> |-
/four <1C60D8A8C9B7A73DC54C6E606542DA2B13B475FF574CC2CC0CFC629B4
15D90565E7EF74AD7E2366209B4992519ED444FB7C263B7BF8CE0BCF629F8B7C
614E3DE9A361BAE93E1BE37C6116F5575B0C2C042DF037187CAF08F9EB5CEF2F
D12AFB330012CD0F2AE62EAE178292BA4AC449A48A47AAF8124BB> |-
/five <1C60D8A8C9B7A73DCD8E7B30BA9202045C028FE54F3CEA27579060400
8953F2E92215AC7150B1A4C42FA456D42F768930BD588EEA6B0D5ACF7B367F39
10269153116DC44CE1ABBADDAFF9CF6DAB55E3C775AF97F02C9393903E63E77B
3B1CFFBE179EC232DCADDC092CA16> |-
/A <1C60D8A8C9B6079F1E726295E14B9D3E37B5679DF68031BFBD1BFE066052
926E25CE0977A152243271BE1D747B37EA89DE114D2E292EBCFA5757AB5F0742
8265AD587191DB5983F8ED99B8DB322C097F8AA32C17CF35304218F0C8E5E2CB
9D3370FBC8175B895A9A7BF3FBEB1A81A06888C0AA48BAA23BD6E670F21106> |-
/D <1C60D8A8C9B6079F1E72628EE41DA8DA688B90558E5030E4DB406FC0434E
8736F6D1AEB93A1671AB2809052B210583B0B968E459BD7C0A7E7330513140D6
42CFF9FD0B8ADECE1D8966485E526A66F23B586CBAFF6CA5271515B9979D83EB
A70E5DC0FFBBA1A11EF8971DF6C2DBA680CE0E17C23D3DC080DA53EB60BFBE0C
3D50341E6653A25367225B1AD9C42E18023801FF6E5C8199C71CE355A3DE37B9
B9FA4C> |-
/S <1C60D8A8C9B7EF32250B3B2C6824AE05A90F8105943800D24B00886F31C7
86673C7547F9513330FA2D791B8362592F2E1A3C22133DF803A1F5BCF5F7FD81
E96AD1914A3B442A908980EFE8F604E39309ED5B2BB9F709727E8E66149ABB29
DB5B95E7D4B89C1CC93D3D5931A97B5FDBEF8437F9886F501241F043CEA25D56
07BEA8DD4A96FD8BE1F131FD3004E40F7851595ECED29E6ACAF1EBDC86CEFD86
B20E72D7F6E8BD1DE1B5016EB02BDA773DA93F765F83E21C041BFBE6F724> |-
/a <1C60D8A8C9B7A73D3387F3351E8E18AD4C337D189ACB524452C5C76175D3
6A9B9EE21E61CCD032B72EA732DAB08D223F8476F8158A75DD87D53D4754BF58
8F21BBDD0B9BD8A57E8132EB5982C81AEFE1FC21DC7FEF21759B1DDD64FEC1B0
1D76B223BFE0C623B317990FF3F82C513CCA8FA63FF271DA495502242C53CA27
EA3287B2BBFC3217711C1DDF95ED56603997D39682906E04AF748FD5C8E52443
0A90FD84624F869BD880BCBADE562C810BE2A83CC20CB51E6D0CA2C7008633C4
06518E> |-
/b <1C60D8A8C9B7EF32A197526A4B04A18ABDFB17B506314FEBCC967D58D37A
1BAE1D70D51387A69E33A3528C1E4C46131DD0F716CB9CD5D029861C055A88A4
7591CB3E3F2D0AE589CD946E2F4EFB67DDEE0D1973635635E163477753314CA0
CA2593426D2EDAC290CA8BDEDC3D96B7> |-
/c <1C60D8A8C9B77FE24419C765668C66977042CF4AAC33A05586CA04AB921B
B7D14E2740B1CE39960F7CFC14FBE33A3738153404F59CDC94DC3EC626A023EA
0F50958819CB5E3F42DC48646B0675A464926E4575093FB7FB37B685779CE3A0
2CD6> |-
/e <1C60D8A8C9B77FE24404D6FC75C46E8B158C7975D79013EBB5DCD53440E2
1332CFC4ECC341E7AFADF9585DB658612EC8ED47CB15CBF662FC73FBEE0045FF
CB1EC723F1B412304D1100168E2128E2060163C1E9CBFAF33B361B5A6E493F9D
F06D41DD478FF2FA297D0668847F9C36D5F5C238CA> |-
/g <1C60D8A8C9B7A73DB6986B74967860531D5C33FE655CD281C5643C14DD6E
74CB50E9F5CEBF92AB3E2DB23D8D0536338ACC1434BD74DB78E6C8972A56B5EC
A00CAED24519752EC7C275BE9E252326654566806EE44BED5B9C3C15F855C948
AE366CCB698D2FF7464E816DABCA2B9DB7D8F75909CEB8F70AAF3E4633401D87
E86EC0698BC79253BA9A49BC1498FE9CBB60BCC5D06EB4A08004B665B63A67EC
9E690E5E0DF479D3844D0B21B68EBA67DB35C98DDC948E732644238649DBC89B
54633CEF2AA882567C823C6F21331BD4F98556D8FCC8D44F10AAFF9E4FABD558
7810FF14047DFA3E5185E0955F6BD298F8306A17456D921D7D3C75CFFF140087
BB0D9FABAA9F75CEC075AC019AE213A62E888471EE6E4ACF6C4AC9422C554BB4
2C> |-
/h <1C60D8A8C9B7EF3257330F56AA26B3B4D60E1AB698B7732F7E2F8B8B1233
66FD09FD4CF17306DC3C95E7C7F49EAAA224DAF837A0D57E9845075192FEB55A
59F361EE897E2ED04657CEF5BAB80C209F8B454E76E95664E5E92A953BF5D04A
824985B9EC7D7044712DF5643ADD4D8814DFBC9F902E4D275DF69220FC0263A8
8AA2FA89922F> |-
/i <1C60D8A8C9B854D088BE03066611142D35B96CDBC6AC69CE7D90A67E607A
97F6A9B6B875C22F51FD57BA3ACC3AD42FE0C4A0E1D536D46C6FA1792B134074
70AA44206267D45F7C9D5285679ED629FF131156C24DB7D425525CB4E784EDB9
C67C53B4D02F9488FD31A7A26AA8AF73> |-
/l <1C60D8A8C9B854D088BE0307DDE29E2DC8A57E14CCBDD0429C9D43FFDCE5
7C1979D6548F9F5B47CC0F21039A42929DCC89E93721E673DC46552B4818AF30> |-
/m <1C60D8A8C9B6B41C9EF86D4D6709D4B4B598121ABB5312D265CF235A834A
848ACC160F120715B6D9D9DE49A3676340531B82B90738BD6CAE6D52EC61EB6F
4100397B542B30AF3045B69D55E829A9CA2911A2131AEF0E17B862A77C80D00D
1B61DCDDB2FDD8AC1D4F6F1C38001BCEDACD3F5BD3CF61CF3007C39B156EF6E2
E67B4D6514FBC70B978E5F934A5BE1753968182C7F65657D118D3CFD8597FCFF
C0E74EEAA06DDD9859889BDB3E82F10A5B29BD59B729EB58CA91FF4B11BFABD1
8058EFD26FA1217D294C851E56C2F5CC05EF837BC32D4E3ED3> |-
/n <1C60D8A8C9B7EF3257330F56C94494157A7EF7FFCBD73F84DDC3CD027CBD
344CBE46734D8DBE3D0D7A5371055EA217764D1E6D19B975A4618DAFF7C83378
2DBB8AD061F2A7084A3861B8353FAB4D938BA793AC098E1E390E341D00898940
4E3478333E6F04C8A2256EF7F64BCEACA7195CAB26AF2CF435195B53F578CD79
712EFFD6BC467431370A461A8086A2496F058336> |-
/o <1C60D8A8C9B7A73D33B29FF9A975322B3362DC44B144D77C192E90E503AC
52DEE198FC9B9A0BE397FE5C900774EEEF1E745C0E1E84056DE211BFA2C0DD56
BD867F1CEE2D1CAF0E57E72D77AF929D1611EB127B9A6B678E> |-
/p <1C60D8A8C9B7EF3227BDC2DEF081752ABC87234A787BA60BDC47984CB411
ED63EC5E4B6D9478A33F088C2CF316BB52BFDB2FED861B15237D1ED95B6588FF
AAF4CF1D5D5601B80B411956DD9A8EE126B5735EB8A2084BC88DF8086F350B74
E28D821E583543F692E28901FD341BDD4D823558AE3235E81A295B5EFBE1B545
992A1C7B5623EEB3F1D3B33C87E44AE813DE4EF7B2CC460C88EC70DF784AA774
F4201DD8AE370C53518363BFDEE9C94F8DB93BA9732F9E3008C774076C08C665
4E3E> |-
/r <1C60D8A8C9B77FE2B2290770D44CC430BF6AF79602E44809DC88D3C54004
27379EAC0B160CEE8AF2E8F72C87C0147E60F09C5282EDD102E5F476C901E4E6
9904CE6DB98CB80ACEE6CA70E710379770254DC0880BBCB5487957E5B0BB4709
CA0E4C60374912AFBC44CC6DACEA916420> |-
/s <1C60D8A8C9B7361F88137B0B3B9E3BE8575A6F0132A8AB9BC21CCB7EEA59
D7C1838FEEC96953798936A0666A27E1BC45EA9D786F997994F74D34DE4AFF12
ED9FE990CE76057A0B0440124651A1447CC3EB65F8E5DD21BBCCF42559B0DC72
BC23E377821A6082C09BFD65655DAD91AC241371D8EE6F35DC6A81FF8B99FAAB
CFE16B4C07309EF358F349B1ADEA227F8C0DF4EAE6353A5FFA74> |-
/t <1C60D8A8C9B81F2CB2ACA02E0CECC7A7088ABA14D8BB1C717E776D9EDDA4
1B7C69A092B87660DC1D8821ED3D3E1FEA1F5AEA3E07AE0B68C4FA037897D267
0ED7A25F38BD082D632B2C2A93BC6E0C80> |-
/u <1C60D8A8C9B7EF3243D232E8573DAAF0F171C711AF0EEFF6FE5D5256DF8D
97D672758F82C9E2E877C020A441F6EB402FD1AA5DEC8D1C598FE06768BF2DFA
7BC4F3F56A078987032C87801D09237CF0E0DAE05AD963395884A2967847A085
BC10BBCEB6CB5318E5F568F7AF4D6031693682FA630A2052D1C2FD845AE4DF2D
65> |-
/w <1C60D8A8C9B6079FE827C15FB83B1503199A092AD3822C388DB38383E9EA
D719C761150F7CF485E3FAB58FE6077627A086EE00F384828FA9E7E754FF5F0C
30816B384CDB9059951BF9BEC38694DCC4A6323065CA844FE06EB38EAF037C00
F75BE013DE6D3AF5E95CFA710380A2A2FB7E603FDAAB142167FB43E812C73774
8B7F3607A92440A3CD36587D64BB08ED3773B9A0DACCB08D014B4D591197F0AE> |-
/y <1C60D8A8C9B7A73DB58DF6ABC4C1AF5EFC125FE6C359A08BB2BFFC7A67B2
7E2F364682D82A3CB3B97945B9CF478EB602CC754345B09114C85962712E25D9
EC080FDDCA108C0C4C7AD1EFD9EBD254799B46DF18467A9F6E09AFD467F082BD
EBB2D0AB4F916FB53590B6CC79EC098EC44D11B153032B9097AA730E748CAB91
2BB594BA5FD41B1B3E088FF709A94E7A24E118276A359759EE4FEF29795446E8
A97247D117A0B653E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMF+NimbusRomNo9L-Medi /KAAAAA+NimbusRomNo9L-Medi findfont ct_VMDictPut
/FZJXMF+NimbusRomNo9L-Medi*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three /four /five 11{/.notdef}rp 
/A 2{/.notdef}rp /D 14{/.notdef}rp /S 13{/.notdef}rp /a /b 
/c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
FZJXMF+NimbusRomNo9L-Medi nf
FZJXMF+NimbusRomNo9L-Medi*1 [11.9552 0 0 -11.9552 0 0 ]msf
-36 403.95 mo
(3.2)sh
-9.10079 403.95 mo
(Switching)sh
44.3747 403.95 mo
(between)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [11.9552 0 0 -11.9552 0 0 ]msf
89.193 403.95 mo
(lwC)sh
FZJXMF+NimbusRomNo9L-Medi*1 [11.9552 0 0 -11.9552 0 0 ]msf
108.465 403.95 mo
(s)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36 420.852 mo
(The)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-17.109 420.852 mo
(lwSwitch)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
28.124 420.852 mo
(operation)sh
69.1499 420.852 mo
(switches)sh
106.859 420.852 mo
(the)sh
122.44 420.852 mo
(calling)sh
152.955 420.852 mo
(thread)sh
181.249 420.852 mo
(to)
[2.76959 0 ]xsh
-36 432.807 mo
(the)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-20.581 432.807 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-1.27698 432.807 mo
(with)sh
19.6843 432.807 mo
(descriptor)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.767 432.807 mo
(tar)sh
74.0248 432.807 mo
(get)
[4.88167 4.4234 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
86.099 432.807 mo
(,passingargsasparame-)
[5.92775 4.98129 4.4234 3.87553 3.87552 2.76961 4.98129 8.21915 4.4234 3.13814 4.98129 7.12334 
4.42339 7.12335 4.98129 4.4234 3.31747 4.4234 7.75092 4.42337 0 ]xsh
-36 444.762 mo
(ters.)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-14.387 444.762 mo
(lwSwitch)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
30.486 444.762 mo
(retains)sh
60.0849 444.762 mo
(the)sh
75.2978 444.762 mo
(state)sh
96.5979 444.762 mo
(ofthecallingthreadin)
[4.98131 6.36603 2.76959 4.98129 7.46201 4.4234 4.42339 2.76961 2.76959 2.76961 4.98131 8.0199 
2.76959 4.98129 3.31747 4.4234 4.4234 8.0199 2.76959 0 ]xsh
-36 456.717 mo
(the)sh
-20.1893 456.717 mo
(present)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
12.209 456.717 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
28.269 456.717 mo
(.Whenthis)
[6.127 9.40469 4.98131 4.42339 8.6077 2.76959 4.98131 2.76961 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
79.841 456.717 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
99.531 456.717 mo
(islaterswitchedback)
[2.76961 7.50191 2.76961 4.42339 2.76961 4.42339 6.95383 3.87553 7.19299 2.76961 2.76959 4.4234 
4.98129 4.4234 8.6077 4.98129 4.4234 4.4234 0 ]xsh
-36 468.673 mo
(into)sh
-17.8979 468.673 mo
(bythesamethread,thecallreturnswiththeswitch-)
[4.9813 7.5915 2.7696 4.98131 7.02364 3.87552 4.4234 7.7509 7.02364 2.76961 4.98129 3.31747 
4.4234 4.42339 4.98131 5.12077 2.76961 4.98129 7.02362 4.4234 4.4234 2.76959 5.37981 3.31747 
4.4234 2.76961 4.98129 3.31747 4.98129 6.47578 7.19299 2.76959 2.76961 7.58154 2.76959 4.98129 
7.0336 3.86557 7.19299 2.76959 2.76959 4.4234 4.98132 0 ]xsh
-36 480.628 mo
(ing)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-21.021 480.628 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-2.71497 480.628 mo
(availableas)
[4.22414 4.73224 4.42339 2.7696 2.7696 4.4234 4.98129 2.76961 6.66498 4.4234 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
45.593 480.628 mo
(caller)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
71.083 480.628 mo
(and)sh
87.7106 480.628 mo
(argumentspassedinargs.)
[4.4234 3.13814 4.98131 4.98129 7.7509 4.4234 4.98129 2.76961 6.12708 4.98131 4.42339 3.87553 
3.87552 4.4234 7.22287 2.76962 7.23285 4.42337 3.13818 4.98129 3.87552 0 ]xsh
-26.037 492.583 mo
(Note)sh
-2.56508 492.583 mo
(that)sh
16.4834 492.583 mo
(returns)sh
48.2541 492.583 mo
(from)sh
71.7258 492.583 mo
(a)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
80.25 492.583 mo
(lwSwitch)
[5.22939 5.2294 5.22939 5.2294 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
126.187 492.583 mo
(and)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
144.677 492.583 mo
(lwCreate)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
186.509 492.583 mo
(,)sh
-36 504.538 mo
(anysignalhandlersthatwereinstalled,andtheinstruc-)
[4.42339 4.83186 8.16933 3.87553 2.7696 4.9813 4.9813 4.4234 5.95763 4.9813 4.42339 4.98131 
4.98129 2.76961 4.42339 3.31747 7.0536 2.76961 4.98129 4.4234 5.95763 7.19301 4.42339 3.31747 
7.61143 2.76959 4.98129 3.87553 2.76961 4.42339 2.76961 2.76961 4.42339 4.98131 5.84804 4.4234 
4.98129 8.16934 2.76959 4.98129 7.61145 2.76959 4.98129 3.86557 2.76959 3.31747 4.98129 4.4234 
0 ]xsh
-36 516.493 mo
(tion)sh
-16.9216 516.493 mo
(pointer)sh
14.869 516.493 mo
(locations)sh
54.4206 516.493 mo
(ofthreadsinaparent)
[4.98129 6.89404 2.76961 4.98131 3.31747 4.42339 4.42339 4.98131 7.44214 2.76961 8.55786 7.99998 
4.98129 4.4234 3.31747 4.4234 4.98131 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
146.428 516.493 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
166.06 516.493 mo
(atthe)
[4.4234 6.34616 2.76962 4.98129 0 ]xsh
-36 528.448 mo
(time)sh
-15.9552 528.448 mo
(ofa)
[4.9813 5.65868 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
1.43803 528.448 mo
(lwCreate)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.2294 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
45.605 528.448 mo
(de\256ne)sh
72.2849 528.448 mo
(the)sh
86.8004 528.448 mo
(only)sh
106.845 528.448 mo
(possible)sh
141.834 528.448 mo
(entry)sh
164.638 528.448 mo
(points)sh
-36 540.404 mo
(into)sh
-18.0075 540.404 mo
(a)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-11.088 540.404 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
4.97104 540.404 mo
(.\(Theroot)
[4.9813 3.31747 6.08707 4.9813 6.92401 3.31747 4.98129 4.98131 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
49.801 540.404 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
68.353 540.404 mo
(has)sh
84.1239 540.404 mo
(anadditionalone-timeen-)
[4.4234 7.4819 4.4234 4.98131 4.98129 2.76959 2.76961 2.76961 4.98129 4.98131 4.42339 5.26025 
4.98129 4.98132 4.42337 3.31747 2.76959 2.76962 7.75089 6.91406 4.4234 4.98129 0 ]xsh
-36 552.359 mo
(try)sh
-22.4409 552.359 mo
(point)sh
.532822 552.359 mo
(when)sh
24.6025 552.359 mo
(the)sh
39.2674 552.359 mo
(process)sh
71.636 552.359 mo
(islaunched.\))
[2.76959 6.36618 2.76959 4.4234 4.98131 4.98129 4.4234 4.98131 4.42339 4.98131 2.49065 0 
]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-26.037 564.314 mo
(lwSwitch)
[5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
20.027 564.314 mo
(issemanticallyequivalenttoacoroutine)
[2.76961 8.10962 3.87553 4.4234 7.7509 4.42339 4.98131 2.76961 2.76959 4.4234 4.4234 2.76959 
2.76961 9.21541 4.41342 4.99127 4.98129 2.51059 4.73224 4.42339 2.76961 4.4234 4.98129 7.00371 
2.76961 9.21539 8.65753 4.42337 4.98129 3.3175 4.98126 4.98132 2.76959 2.76959 4.98132 0 
]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36 576.269 mo
(yield)
[5.22939 5.22939 5.22939 5.22939 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-9.85396 576.269 mo
(.Infact,asfarascontroltransferisconcerned,)
[8.62761 3.31747 8.49809 3.21785 4.42339 4.42339 2.76961 6.24655 4.4234 7.38235 3.21783 4.4234 
6.83427 4.4234 7.38235 4.4234 4.98131 4.98129 2.76959 3.31747 4.98129 6.27646 2.76959 3.31747 
4.4234 4.98129 3.87552 3.31747 4.4234 6.82431 2.76961 7.38235 4.42339 4.98132 4.98126 4.4234 
4.4234 3.31747 4.98129 4.4234 4.98132 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36 588.224 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-19.94 588.224 mo
(scanbeviewedasisolatedandprivilegeseparated)
[7.25285 4.4234 4.42339 8.34866 4.98129 7.80072 4.98131 2.76959 4.17433 7.19299 4.4234 8.35863 
4.4234 7.24289 2.76959 3.87552 4.98131 2.76961 4.4234 2.76959 4.4234 8.35861 4.4234 4.98129 
8.35863 4.98129 3.31747 2.52054 4.98131 2.76959 2.76961 4.27396 4.98129 7.79076 3.87552 4.4234 
4.98129 4.4234 3.31747 4.4234 2.76959 4.4234 0 ]xsh
-36 600.18 mo
(coroutines.)sh
11.6412 600.18 mo
(Recall)sh
39.7757 600.18 mo
(that)sh
57.3995 600.18 mo
(aprocedureisaspecialcaseofa)
[7.10333 4.98129 3.31747 4.98131 4.42339 4.4234 4.98131 4.98129 3.31747 7.10333 2.76961 6.5455 
7.10333 3.87553 4.98129 4.4234 4.4234 2.76959 4.42342 5.44952 4.4234 4.4234 3.87549 7.10333 
4.98132 5.98743 0 ]xsh
-36 612.135 mo
(coroutine.)sh
9.36965 612.135 mo
(Toachievea\(remote\)procedurecallamong)
[5.29006 8.19922 4.4234 4.4234 4.98131 2.76959 4.17433 4.83186 7.63135 7.63136 3.31746 3.31747 
4.4234 7.75092 4.98129 2.76959 4.4234 6.53539 4.98131 3.31747 4.98129 4.4234 4.4234 4.98129 
4.98131 3.31746 7.63136 4.42342 4.4234 2.76959 5.97754 4.4234 7.75092 4.98129 4.98129 0 
]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36 624.09 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
-19.94 624.09 mo
(s,thecalledprocedure,whendone,simplyswitches)
[3.87553 5.3001 2.76961 4.98129 7.17308 4.42339 4.42339 2.76961 2.7696 4.42339 7.72102 4.98129 
3.31747 4.98129 4.4234 4.4234 4.98129 4.98131 3.31746 4.4234 5.30011 7.19299 4.98129 4.4234 
7.73099 4.98129 4.98129 4.98131 4.4234 5.30009 3.87552 2.76961 7.7509 4.98131 2.76961 7.72101 
3.87555 7.19299 2.76959 2.76959 4.4234 4.98129 4.4234 0 ]xsh
-36 636.045 mo
(toitscallerandthenloopsbacktoitsbeginning.This)
[2.7696 8.40844 2.7696 2.7696 7.29269 4.4234 4.4234 2.76959 2.76961 4.4234 6.7446 4.4234 
4.98131 8.39847 2.76959 4.98129 4.4234 8.40845 2.76959 4.98131 4.98131 4.98129 7.30266 4.98131 
4.42339 4.4234 8.39847 2.76961 8.40843 2.76961 2.76959 7.30266 4.98131 4.27396 4.98131 2.76959 
4.98131 4.98129 2.76959 4.98132 4.98129 8.36856 6.0871 4.98129 2.76962 0 ]xsh
-36 648 mo
(functionality)sh
17.4095 648 mo
(can)sh
33.7282 648 mo
(beprovidedeasilyaspartofalibrary.)
[4.98129 6.91406 4.98129 3.31747 4.83185 4.98131 2.76961 4.98129 4.4234 7.47195 4.42339 4.4234 
3.87552 2.76961 2.76961 7.47194 4.4234 6.36618 4.98131 4.4234 3.31746 5.26025 4.98131 5.80812 
6.91406 2.76959 2.76959 4.98129 3.31747 4.4234 3.31747 4.33371 0 ]xsh
FZJXMF+NimbusRomNo9L-Medi*1 [11.9552 0 0 -11.9552 0 0 ]msf
207 171.557 mo
(3.3)sh
233.899 171.557 mo
(Static)sh
266.106 171.557 mo
(resourcesharing)
[5.09293 5.30811 4.65067 5.9776 6.64709 5.0929 5.30814 8.29691 4.65067 6.64709 5.9776 5.30811 
3.32355 6.64706 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 188.765 mo
(When)sh
234.238 188.765 mo
(a)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
242.105 188.765 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
261.61 188.765 mo
(iscreatedusing)
[2.76959 7.3226 4.4234 3.31747 4.42337 4.4234 2.76962 4.42337 8.42838 4.98129 3.87552 2.76962 
4.98129 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
328.942 188.765 mo
(lwCreate)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
370.775 188.765 mo
(,thechild)
[6.17682 2.76959 4.98129 7.87045 4.4234 4.98132 2.76959 2.76959 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
415.941 188.765 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 200.72 mo
(recei)sh
226.108 200.72 mo
(vesacopy-on-writesnapshotofallitsparent'sre-)
[4.83188 4.4234 7.23291 7.78079 4.4234 4.98129 4.88168 4.98129 3.31747 4.98129 4.98132 3.31744 
7.19299 3.3175 2.76959 2.76959 7.78079 3.87552 4.98132 4.42337 4.98129 3.87555 4.98129 4.98129 
6.12701 4.98129 6.67487 4.4234 2.76959 6.12698 2.76959 2.76962 7.23294 4.98126 4.4234 3.3175 
4.42337 4.98129 2.76959 2.76953 7.22296 3.3175 4.4234 0 ]xsh
207 212.675 mo
(sources)sh
239.618 212.675 mo
(bydefault.Theparentcanmodifythisbehavior)
[4.98129 7.73096 4.98132 4.4234 3.21783 4.4234 4.98129 2.76962 2.76959 6.33621 6.08707 4.98129 
7.16312 4.98129 4.4234 3.31747 4.4234 4.98129 5.50931 4.4234 4.4234 7.73096 7.75092 4.98132 
4.98126 2.76959 3.3175 7.72101 2.76959 4.98129 2.76962 6.61523 4.98126 4.4234 4.98132 4.22412 
4.98132 2.76959 4.98126 0 ]xsh
207 224.63 mo
(using)sh
230.881 224.63 mo
(the)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
245.353 224.63 mo
(resource-spec)
[3.5069 4.4234 3.87555 4.98129 4.98129 3.50693 4.42337 4.4234 3.31747 3.87552 4.98132 4.42337 
0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
302.791 224.63 mo
(argumentinthe)
[4.4234 3.13815 4.98129 4.98129 7.75092 4.42337 4.98132 5.061 2.76959 7.28265 2.76959 4.98132 
0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
367.05 224.63 mo
(lwCreate)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
411.178 224.63 mo
(oper)sh
428.682 224.63 mo
(-)sh
207 236.586 mo
(ation.)sh
234.826 236.586 mo
(The)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
253.584 236.586 mo
(resource-spec)
[3.5069 4.4234 3.87555 4.98129 4.98129 3.5069 4.4234 4.4234 3.31747 3.87552 4.98132 4.4234 
0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.991 236.586 mo
(isanarrayofCunions:each)
[2.76959 7.14328 4.4234 8.23904 4.4234 3.31747 3.31747 4.4234 8.24902 4.98129 6.58521 9.91287 
4.98129 4.98132 2.76959 4.98129 4.98129 3.87555 7.40222 4.42334 4.42346 4.42334 0 ]xsh
207 248.541 mo
(array)sh
230.243 248.541 mo
(element)sh
264.554 248.541 mo
(speci\256es)sh
301.645 248.541 mo
(either)sh
327.109 248.541 mo
(arangeof\256ledescriptors,)
[7.19299 3.31744 4.4234 4.98132 4.98129 7.20297 4.98129 6.09702 5.53922 2.76959 7.20297 4.98129 
4.4234 3.87552 4.4234 3.3175 2.76953 4.98132 2.75964 4.98132 3.31744 3.87555 0 ]xsh
207 260.496 mo
(virtual)sh
234.945 260.496 mo
(memory)sh
270.083 260.496 mo
(addresses,)sh
312.793 260.496 mo
(orcredentials.Foreachrange,)
[4.98132 5.25021 4.4234 3.31747 4.4234 4.98126 4.4234 4.98132 2.76959 2.76959 4.4234 2.76959 
3.87555 5.38977 5.38977 4.98129 5.25021 4.4234 4.4234 4.4234 6.91406 3.31744 4.4234 4.98132 
4.98126 4.4234 0 ]xsh
207 272.451 mo
(one)sh
225.361 272.451 mo
(ofthefollowingsharingoptionscanbespeci\256ed.)
[4.98129 7.30252 2.76959 4.98129 8.39847 3.31747 4.98129 2.76962 2.76959 4.73224 7.19299 2.76959 
4.98132 8.96634 3.87552 4.98129 4.4234 3.31747 2.76959 4.98129 8.95639 4.98129 4.98132 2.76959 
2.76959 4.98132 4.98126 7.8606 4.4234 4.4234 8.95636 4.98129 8.39847 3.87555 4.98129 4.42337 
4.4234 2.76959 5.53925 4.4234 4.98126 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 284.406 mo
(LWC_COW)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
243.604 284.406 mo
(:thechildreceivesalogicalcopyoftherange)
[5.86798 2.76959 4.98129 7.52176 4.4234 4.98132 2.76959 2.76959 8.07968 3.31747 4.4234 4.42337 
4.4234 2.52054 4.83185 4.4234 6.97391 7.52176 2.76959 4.98132 4.98129 2.76959 4.4234 4.4234 
5.86798 4.42337 4.98132 4.88165 8.0697 4.98132 6.41583 2.76959 4.98132 7.52173 3.3175 4.4234 
4.98126 4.98132 0 ]xsh
207 296.361 mo
(ofresource\(thedefault\).)
[4.98129 6.2963 3.31747 4.4234 3.87552 4.98129 4.98129 3.3175 4.42337 7.39224 3.31747 2.76962 
4.98129 7.40222 4.98129 4.4234 3.21783 4.4234 4.98129 2.76962 2.76959 3.31747 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
311.379 296.361 mo
(LWC_SHARED)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
363.67 296.361 mo
(:therangeofre-)
[5.74841 2.76959 4.98132 7.39224 3.31747 4.4234 4.98129 4.98129 7.40222 4.98132 6.29626 3.31744 
4.4234 0 ]xsh
207 308.317 mo
(sources)sh
240.016 308.317 mo
(issharedamongparentandchild.)
[2.76959 7.00378 3.87552 4.98132 4.4234 3.31744 4.4234 8.11954 4.42337 7.75092 4.98129 4.98129 
8.10956 4.98132 4.4234 3.31744 4.4234 4.98132 5.90781 4.4234 4.98129 8.11951 4.4234 4.98132 
2.76959 2.76959 4.98132 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
382.169 308.317 mo
(LWC_UNMAP)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.22943 5.22937 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
429.231 308.317 mo
(:)sh
207 320.272 mo
(the)sh
221.366 320.272 mo
(range)sh
245.685 320.272 mo
(ofresourcesisnotmappedfromtheparentinto)
[4.98132 5.50922 3.3175 4.42337 3.87555 4.98129 4.98129 3.31747 4.4234 4.4234 6.06729 2.76959 
6.06732 4.98129 4.98129 4.9614 7.75089 4.4234 4.98129 4.98132 4.42337 7.17307 3.3175 3.31744 
4.98132 9.94266 2.76959 4.98129 6.61517 4.98132 4.42337 3.31747 4.4234 4.98126 4.96143 2.76959 
4.98126 2.76965 0 ]xsh
207 332.227 mo
(the)sh
221.625 332.227 mo
(child.)sh
247.12 332.227 mo
(\(The)sh
268.38 332.227 mo
(child)sh
290.756 332.227 mo
(may)sh
310.362 332.227 mo
(subsequently)sh
364.838 332.227 mo
(map)sh
384.444 332.227 mo
(dif)sh
395.263 332.227 mo
(fere)sh
410.735 332.227 mo
(ntre-)
[4.99127 5.21045 3.31744 4.4234 0 ]xsh
207 344.182 mo
(sources)sh
239.369 344.182 mo
(intheaddressrange.\))
[2.76962 7.47192 2.76962 4.98129 6.91403 4.4234 4.98129 4.98132 3.31747 4.42337 3.87555 6.36618 
3.31747 4.4234 4.98129 4.98129 4.4234 2.49063 0 ]xsh
216.963 356.137 mo
(When)sh
243.763 356.137 mo
(restricting)sh
287.179 356.137 mo
(the)sh
302.362 356.137 mo
(resources)sh
342.99 356.137 mo
(inherited)sh
381.426 356.137 mo
(bythechild,)
[4.98129 7.99002 2.76959 4.98129 7.4321 4.4234 4.98132 2.76959 2.76959 4.98132 0 ]xsh
207 368.092 mo
(care)sh
225.78 368.092 mo
(must)sh
247.359 368.092 mo
(betakentominimallypassonthestacks,code,)
[4.98129 6.61517 2.76962 4.4234 4.88165 4.4234 7.17307 2.76962 7.17307 7.75092 2.76959 4.98129 
2.76959 7.75092 4.4234 2.76959 2.76959 7.18304 4.98129 4.4234 3.87555 6.06726 4.98132 7.17307 
2.76962 4.98126 6.61517 3.87555 2.76959 4.4234 4.4234 4.98129 3.87552 4.74219 4.4234 4.98132 
4.98126 4.4234 0 ]xsh
207 380.048 mo
(synchronization)sh
273.361 380.048 mo
(variables,andotherdependenciesofall)
[4.73224 4.4234 3.31747 2.76959 4.4234 4.98129 2.76962 4.42337 3.87552 5.26025 4.4234 4.98132 
7.70108 4.98129 2.76959 4.98132 4.4234 6.03723 4.98132 4.4234 4.98126 4.4234 4.98132 4.98129 
4.4234 4.98129 4.4234 2.76959 4.4234 6.59534 4.98126 6.02734 4.42334 2.76965 0 ]xsh
207 392.003 mo
(threads)sh
238.293 392.003 mo
(intheparent)
[2.76959 7.50183 2.76959 4.98132 6.95389 4.98129 4.4234 3.31747 4.4234 4.98129 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.683 392.003 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
306.743 392.003 mo
(,toensurepredictablebehavior)
[5.0112 2.76959 7.50183 4.4234 4.98129 3.87555 4.98129 3.31747 6.95389 4.98129 3.31747 4.4234 
4.98129 2.76959 4.4234 2.76962 4.42337 4.98132 2.76959 6.94394 4.98129 4.4234 4.98132 4.22412 
4.98132 2.76959 4.98126 0 ]xsh
207 403.958 mo
(ifthesethreadsswitchtothechildinthefuture.)
[2.76959 5.80814 2.76959 4.98129 4.4234 3.87555 6.91403 2.76959 4.98129 3.31747 4.4234 4.4234 
4.98129 6.36618 3.87552 7.19302 2.76959 2.76959 4.4234 7.47195 2.76959 7.47195 2.76962 4.98129 
6.91403 4.4234 4.98129 2.76962 2.76959 7.47192 2.76962 7.47195 2.76959 4.98132 6.91403 3.31747 
4.98129 2.76962 4.98126 3.3175 4.4234 0 ]xsh
FZJXMF+NimbusRomNo9L-Medi*1 [11.9552 0 0 -11.9552 0 0 ]msf
207 425.085 mo
(3.4)sh
233.899 425.085 mo
(Dynamic)sh
282.712 425.085 mo
(resourcesharing)
[5.09293 5.30811 4.65067 5.9776 6.64709 5.09293 5.30811 8.29691 4.65067 6.64709 5.9776 5.30811 
3.32355 6.64709 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 442.293 mo
(A)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
217.761 442.293 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
237.389 442.293 mo
(may)sh
258.111 442.293 mo
(dynamically)sh
310.933 442.293 mo
(map)sh
331.665 442.293 mo
(\(overlay\)resourcesfrom)
[3.31747 4.83185 4.83185 4.4234 3.31747 2.76959 4.4234 4.98129 6.88409 3.31747 4.42337 3.87555 
4.98129 4.98129 3.3175 4.4234 4.4234 7.44214 3.31744 3.3175 4.98126 0 ]xsh
207 454.248 mo
(another)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
239.542 454.248 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
258.266 454.248 mo
(into)sh
276.428 454.248 mo
(its)sh
288.513 454.248 mo
(address)sh
321.051 454.248 mo
(space)sh
345.848 454.248 mo
(using)sh
370.097 454.248 mo
(the)sh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
384.938 454.248 mo
(lwOverlay)
[5.2294 5.22937 5.2294 5.2294 5.22937 5.22943 5.22937 5.22937 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 466.203 mo
(operation.)sh
251.543 466.203 mo
(The)sh
269.964 466.203 mo
(caller)sh
295.029 466.203 mo
(speci\256es)sh
332.27 466.203 mo
(which)sh
359.557 466.203 mo
(regionsofagiven)
[3.31744 4.27399 4.98126 2.76962 4.98129 4.98132 6.8045 4.98132 6.25644 7.35239 4.98132 2.52057 
4.83185 4.4234 0 ]xsh
207 478.158 mo
(resource)sh
246.253 478.158 mo
(type)sh
268.918 478.158 mo
(\(\256le)sh
290.477 478.158 mo
(descriptor)sh
335.826 478.158 mo
(ormemory\)aretobe)
[4.98129 8.82678 7.75089 4.4234 7.75092 4.98132 3.31744 4.98132 8.82678 4.4234 3.31744 9.93274 
2.76959 10.4807 4.98132 0 ]xsh
207 490.114 mo
(overlayed,andwhetherthespeci\256edregionshouldbe)
[4.83185 4.83188 4.4234 3.31747 2.76959 4.4234 4.98129 4.4234 4.98129 6.83435 4.4234 4.98129 
8.95639 7.19299 4.98129 4.4234 2.76959 4.98129 4.4234 7.28259 2.76959 4.98132 8.39847 3.87552 
4.98129 4.4234 4.4234 2.76962 5.53918 4.4234 8.95636 3.3175 4.27393 4.98132 2.76959 4.98129 
8.95639 3.87552 4.98129 4.98132 4.98126 2.76965 8.94641 4.98126 0 ]xsh
207 502.069 mo
(copied)sh
237.266 502.069 mo
(orshared,inthe)
[4.98129 7.03351 3.87555 4.98129 4.4234 3.31747 4.4234 4.98129 6.50558 2.76959 8.68738 2.76959 
4.98132 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
309.134 502.069 mo
(resource-spec)
[3.5069 4.4234 3.87555 4.98129 4.98129 3.50693 4.42337 4.4234 3.31747 3.87552 4.98132 4.42337 
0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
367.987 502.069 mo
(parameter)sh
407.269 502.069 mo
(.The)
[9.23529 6.0871 4.98126 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 514.024 mo
(lwOverlay)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
256.37 514.024 mo
(call)sh
273.067 514.024 mo
(will)sh
290.871 514.024 mo
(only)sh
310.895 514.024 mo
(succeed)sh
344.728 514.024 mo
(ifthecaller)
[2.76962 5.62878 2.76959 4.98132 6.73471 4.4234 4.4234 2.76959 2.76959 4.4234 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
392.044 514.024 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
410.411 514.024 mo
(holds)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 525.979 mo
(access)sh
236.131 525.979 mo
(capabilities)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
285.75 525.979 mo
(\(described)sh
330.372 525.979 mo
(belo)sh
347.279 525.979 mo
(winSection3.5\)for)
[10.3213 2.76959 8.09961 5.53918 4.4234 4.4234 2.76959 2.76959 4.98132 8.10956 4.98126 2.49066 
4.98132 6.44574 3.31744 4.98132 0 ]xsh
207 537.934 mo
(the)sh
222.034 537.934 mo
(requested)sh
263.08 537.934 mo
(resources.)sh
307.393 537.934 mo
(Asuccessful)
[10.0523 3.87552 4.98129 4.4234 4.4234 4.4234 3.87552 3.87555 3.31744 4.98132 0 ]xsh
FZJXMD+SFTT1000*1 [9.9626 0 0 -9.9626 0 0 ]msf
361.253 537.934 mo
(lwOverlay)
[5.2294 5.22937 5.2294 5.2294 5.2294 5.22937 5.2294 5.2294 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
411.178 537.934 mo
(oper)sh
428.682 537.934 mo
(-)sh
207 549.89 mo
(ation)sh
230.293 549.89 mo
(unmaps)sh
264.644 549.89 mo
(anyexistingresourcesattheaffectedad-)
[4.4234 4.83185 8.34866 4.27396 4.98132 2.76959 3.87552 2.76959 2.76962 4.98129 8.33868 3.31747 
4.4234 3.87552 4.98129 4.98132 3.31744 4.4234 4.4234 7.24292 4.42337 6.12701 2.76959 4.98129 
7.79077 4.4234 3.06839 3.31747 4.4234 4.4234 2.76959 4.4234 8.33868 4.4234 4.98132 0 
]xsh
207 561.845 mo
(dresses)sh
238.263 561.845 mo
(inthecaller'saddressspace.)
[2.76962 7.47192 2.76962 4.98129 6.91403 4.4234 4.4234 2.76962 2.76959 4.4234 3.31744 2.76953 
6.36618 4.4234 4.98129 4.98132 3.31744 4.4234 3.87555 6.36615 3.87555 4.98129 4.4234 4.42337 
4.4234 0 ]xsh
FZJXMF+NimbusRomNo9L-Medi*1 [11.9552 0 0 -11.9552 0 0 ]msf
207 582.972 mo
(3.5)sh
233.899 582.972 mo
(Acc)sh
253.147 582.972 mo
(esscapabilities)
[5.30811 4.65067 7.63947 5.30811 5.9776 6.64709 5.9776 6.64706 3.32355 3.32355 3.32355 3.98099 
3.32355 5.30811 0 ]xsh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
207 600.18 mo
(Access)sh
238.034 600.18 mo
(capa)sh
256.275 600.18 mo
(bilitiesareassociatedwith)
[4.99127 2.75964 2.76959 2.76959 2.76962 2.76959 4.4234 6.69495 4.4234 3.31747 7.2428 4.4234 
3.86557 3.87552 4.98129 4.4234 2.76959 4.4234 2.76959 4.4234 7.80072 7.19299 2.76959 2.76962 
0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
365.49 600.18 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
384.364 600.18 mo
(\256le)sh
399.916 600.18 mo
(descr)sh
420.927 600.18 mo
(ip-)sh
207 612.135 mo
(tors.)sh
227.483 612.135 mo
(Each)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.772 612.135 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
268.204 612.135 mo
(holds)sh
292.164 612.135 mo
(adescriptorwithauniversalaccess)
[6.79449 4.98132 4.4234 3.87552 4.4234 3.31747 2.76959 4.98129 2.76959 4.98129 5.69855 7.19299 
2.76962 2.76959 7.35239 6.79449 4.98132 4.98129 2.52054 4.83185 4.4234 3.31747 3.87552 4.4234 
5.14069 4.4234 4.4234 4.4234 4.4234 3.87555 0 ]xsh
207 624.09 mo
(capability)sh
248.634 624.09 mo
(for)sh
262.591 624.09 mo
(itself.)sh
288.046 624.09 mo
(When)sh
314.178 624.09 mo
(a)sh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
320.94 624.09 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.34 624.09 mo
(iscreated,itsparentre-)
[2.76959 6.21674 4.4234 3.31747 4.4234 4.4234 2.76959 4.4234 4.98129 4.86176 2.76959 2.76962 
6.21674 4.98129 4.4234 3.31747 4.4234 4.98126 5.11084 3.31744 4.4234 0 ]xsh
207 636.045 mo
(cei)sh
218.367 636.045 mo
(vesadescriptorwithauniversalaccesscapabilityfor)
[4.83185 4.4234 6.57538 7.13324 4.98129 4.4234 3.87552 4.4234 3.31747 2.76959 4.98132 2.76959 
4.98129 6.01733 7.19299 2.76962 2.76959 7.68115 7.13324 4.98129 4.98129 2.52057 4.83185 4.4234 
3.31744 3.87555 4.4234 5.46945 4.4234 4.4234 4.42337 4.4234 3.87555 6.57538 4.4234 4.4234 
4.98129 4.4234 4.98129 2.76959 2.76959 2.76965 2.76959 7.68115 3.31744 4.98132 0 ]xsh
207 648 mo
(the)sh
222.771 648 mo
(child.)sh
251.593 648 mo
(Aparent)
[10.7895 4.98132 4.4234 3.31744 4.4234 4.98132 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
290.878 648 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
310.534 648 mo
(may)sh
331.286 648 mo
(grant)sh
355.356 648 mo
(achild)
[8.0199 4.4234 4.98129 2.76962 2.76959 0 ]xsh
FZJXMB+NimbusRomNo9L-ReguItal*1 [9.9626 0 0 -9.9626 0 0 ]msf
386.9 648 mo
(lwC)sh
FZJXMA+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
406.556 648 mo
(access)sh
%ADOBeginSubsetFont: LAAAAA+NimbusSanL-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /LAAAAA+NimbusSanL-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 78 /N put
dup 79 /O put
dup 83 /S put
dup 85 /U put
dup 88 /X put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
def
/UniqueID 5020902 def
/FontBBox {-174 -285 1001 953} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/BlueScale 0.0396249 def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [69 74 78 83] def
/StemSnapV [78 85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
31 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/I <1C60D8A8C9B854D08882A1CCB0E44CE37226A0A6708D7C0F81430C61A4F1
0702> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/U <1C60D8A8C9B6079FE1CE3162FC127C06A4873A1FCB74C196AD5E91EB933B
AFD452D9972417733CEA223D34054EF36458302F0FF97FE57F761EE87F010F7C
F2EDB054B8CA4ADBAF9406A282AA46EE> |-
/X <1C60D8A8C9B64EDF88209F74DE48C31923BDB6DC4DD0FDA29BCD573E7DDE
69D8D08414F56F7E4B0C2C3D19D07133E6C4860EEF72FB92280AB1A549BB7568
025C6525F29A02> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F8
82286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5E9BE77FB785FF0A01A
CB21DC4B97A4A57F1F7492892F8DC448ACB9AF11A554513DBE4F7C862B67B87D
D442F1A03C816B99> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/g <1C60D8A8C9B7EF3227B253BA0513287033C8093CD601937B772648EA572C
C1F007E60EAD6102C9D30B7D4DB4D8E78B1DAE15FA655CEDF0199C6A1A86AE36
D0C840E5129DADB107A0B038AE05D1DE5DCEA4C2085327E5DF923619FCD07F34
E4CA31BD0846024ADA3F5A9D620BF1617984DD9D65A314CB5405977253C3F192
9474DA3A65F18EFD5DD0DE3C76EA0D6DF78A9E3021B07E4052AE05F1B691B3D2> |-
/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD7
8AB956CD4302BB789AA6D333FFAC07825CB3A243F22D03D26FA5A13E87B236A1
2658D027FD878D62E9E0B2786BB555DABBC7F8CB> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/m <1C60D8A8C9B6B41CC78139463B68644DCDC079B77E252B1BDBC174BFADBB
0D9A7BDB307A532BE37687E1CA9BCA32275A14FC349F464A0A7087C4729843CF
AE7A4B06C7BF18B20329649F3842C3E6CF34DF4774446F4782D13BE644BAD557
DE15CAD7FA0F4FDD151916036D12981FA872142804DF17E14F13A898AF40B7EF
7DD9DBF3B6D064> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93CCC5A502AC76AA3605F6F842E0C
6884B1AC78E4F6F7E0C35601D9142672E63805C6C437F58826490DDF1942A9DD
9E1CCD138DDFD598A3C09163CA0FC236518D17D98D39776EB3E76C4DB2FFD5> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D152AFFE0C4C6F8B43D6BC73566FD6A7FDA06C1436
6097D87558C1397170778F5D225D1B77CDD600FE40783027A08C6888EDC592F3
8E07893B39AC1E77164A> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEE
AD40211C367AF1DA849517960C0516775491EC31482B3B870EFC48A7A9008B38
B3892E7DA0BD0BA1A2EDFC822188EC0152802995> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69FB1B9D669614BD5BE9BBF7
73402916AA1AB18ABAFACA395E7B6EB52820B5969441875A0179F798326186BE
61C9F2FFB5B271B31D4CC387231EAE08C0E3> |-
/y <1C60D8A8C9B7A73DB5828E2DB40A4006345BB6B47E4ECD963FC869C23699
86F6D079AC4A862814B9396DB438A1862183CED867E3C44BB9307A0DC4ECC06C
FABB472C23DE9B2490AEC3A42E4087C795FBC47D05CCB5> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FZJXMG+NimbusSanL-Regu /LAAAAA+NimbusSanL-Regu findfont ct_VMDictPut
/FZJXMG+NimbusSanL-Regu*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 2{/.notdef}rp /five 11{/.notdef}rp 
/A 2{/.notdef}rp /D /E 3{/.notdef}rp /I 4{/.notdef}rp /N 
/O 3{/.notdef}rp /S /.notdef /U 2{/.notdef}rp /X 8{/.notdef}rp 
/a /.notdef /c /d /e /.notdef /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
FZJXMG+NimbusSanL-Regu nf
FZJXMG+NimbusSanL-Regu*1 [9 0 0 -9 0 0 ]msf
-36 695 mo
(52    12th USENIX Symposium on Operating Systems Design and Implementation)sh
349.97 695 mo
(USENIX Association)sh
-36 676 mo
432 676 li
432 675 li
-36 675 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.749844 .679255 .654902 .901945 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/FZJXMF+NimbusRomNo9L-Medi*1 uf
/FZJXMF+NimbusRomNo9L-Medi uf
/KAAAAA+NimbusRomNo9L-Medi uf
/FZJXMD+SFTT1000*1 uf
/FZJXMD+SFTT1000 uf
/IAAAAA+SFTT1000 uf
/FZJXMC+CMSY10*1 uf
/FZJXMC+CMSY10 uf
/HAAAAA+CMSY10 uf
/FZJXME+SFTT0900*1 uf
/FZJXME+SFTT0900 uf
/JAAAAA+SFTT0900 uf
/FZJXMB+NimbusRomNo9L-ReguItal*1 uf
/FZJXMB+NimbusRomNo9L-ReguItal uf
/GAAAAA+NimbusRomNo9L-ReguItal uf
/FZJXMG+NimbusSanL-Regu*1 uf
/FZJXMG+NimbusSanL-Regu uf
/LAAAAA+NimbusSanL-Regu uf
/FZJXMA+NimbusRomNo9L-Regu*1 uf
/FZJXMA+NimbusRomNo9L-Regu uf
/FAAAAA+NimbusRomNo9L-Regu uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
