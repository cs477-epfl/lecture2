%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9m1146o_d8ar38_of4.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/9/23, 16:37:59
%%BoundingBox: 0 0 384 150
%%HiResBoundingBox: 0 0 383.5440 149.0400
%%CropBox: 0 0 383.5440 149.0400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1224 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2024-09-23T16:36:41+02:00"
   xmp:CreateDate="2024-09-23T16:36:41+02:00"
   xmp:MetadataDate="2024-09-23T16:36:41+02:00"
   xmp:CreatorTool="ACM"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:1a4c98b2-064a-42b5-9960-334726264882"
   xmpMM:InstanceID="uuid:2d67f0dc-a5fa-4115-95ff-c2c0ea5ff303"
   pdf:Producer="Sony Electronic Publishing Services">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Scheduler activations</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">(0734-2071) 10:1 0053-0079 (Feb. 1992)</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Anderson</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -149.04 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 149.04 li
383.544 149.04 li
383.544 0 li
cp
clp
45.24 -27.96 mo
47.16 -27.96 li
47.16 -29.88 li
45.24 -29.88 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
gsave
clp
[1 0 0 -1 117 149.04 ]ct
[1.92 0 0 1.92 -71.76 177 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 8 
/M[8 0 0 -8 0 8 ]
/MD false
/BC 8 
/D[0 1 ]
/DS 
<~!!!$!!!!!!!<<*!s8N'!s8W-!s8W*!s8W-!s8W*!s8W-!s8W-!s8W-!s8W-!!<<*!s8W*!!!!$!rr<$!
~>
/O 2
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
.72 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
8.64 148.68 mo
8.64 6.12 li
1 /0 /CSD get_res sepcs
1 sep
@
377.52 148.44 mo
377.52 5.39996 li
@
8.28 6.23999 mo
377.88 6.23999 li
@
8.52 148.2 mo
378.12 148.2 li
@
%ADOBeginSubsetFont: FAAAAA+*Arial-13040-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FAAAAA+*Arial-13040)
%%Title: (FAAAAA+*Arial-13040 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FAAAAA+*Arial-13040 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-664 -324 2000 1006} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 19 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 19 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
4 <001C60D8A8C9B66EAD0813526F02CD97286E7F42CFFD6C5D507404A483842
B7747A8059C464D8AEDAE6D1176A0B42E4C113884BDD6E6A912D66328A85A21E
DE690FD09DB109279E230C28FAAF5BC7D7270E63F2EF9C27E544A295E03E5F9B
0F31A44B5A482155995AF73ABF5C4D08BC3917C0CA27F70D897502221F70CF00
EEA98F8ACA7934879CDF9571B0E2341A2AC8E4442B8AE98537B7A63A31CC64F8
010373A25E5CB3D64EBB2563DF8949F82E441FDF7D9DB80CD17FAEDD6E78446C
710C39D302535ACA9D635FC4179D91E55E120BDF803> |
3 <001C60D8A8C9B7F88C2B1D76AB6E7DA28A388693E737BB62E76FC5F11C91D
7C2EE4BC7D42CAC5E64CD1760ACDD70675A034FD7007B1A705774F7352D38C2D
EFF1E1329A45506C5F7331E462F7233F5467CA9FE420C3CB35E7A1C3065536AA
6066F3D1DBF9DCF567BE95BCA592B74CE5CD600D0A8A6883F78068CFE65D3825
BE0E5605DDBDEC2EB1D6B493A89BA496A17DC50851C36FC614F52BC697F8DD63
3722FB78788CE> |
18 <001C60D8A8C9B8707C25> |
7 <001C60D8A8C9B677ECCD61C055A349049EE47AD609375311B25957E9980FB
BBE5A9F1D454EA6780318AF968573F2454C70F5D5788FF170C65C378A02FF2BC
F28AE0800D394A137E254BD7B13F900A8FC8C17701FA901666D4E5A84AD1BC26
C60F478F76C2F1BAEB8A050CBCB8E3DAD2AEFC1DAE8122FEAF5B6C3E141FEB7D
6E724424FD6D3A9AF664E7BAEC98789B77F5DD688BE03DDE0275D85F4086A0CE
8A2905F3D2A882194FE76486AF5E1C7C1697C71325A8E30E7287D65AB57A0553
9A490CB9FD180ACF8AAD0DA06D09EA3CDFDD1BE27359AB57A8CD76A546A2CFF4
0D7E2D6C71D36A5F033BD93E0A28822FEEF95A80894> |
1 <001C60D8A8C9B89F5AFE0CF01375AF3C6B552BCC2771CFC88DA6C578D340F
57C06C8958F37A1F374CC85> |
6 <001C60D8A8C9B66EAD58B279349DE811B4CC70B6D0E9CF6F50DD88FC67C31
ACE16FEA055FC638FE36EEF641EEF40D7EEB7E61C27C82C79D3E9D565928F81B
A788357720CB6342E4BCCFF0751B8970E71C63B310DFD26B94D6787AF749A387
8C4ABFA9B72DE9F9DC74850D9DEC635F83C77BE4E0A3E57DADAC89F6055FDB3A
3E91BCC26F7FE025BEED6269F8F7C442A4B79C1E2F069E88E45623EC87E5237C
19B348FE2C26D4ABE3C5F0816040D5DA2D936A8DC5AD1343A2F92C3B61F28959
32C1F140C3CD6DA8F32C469F98F0D6A3D199279705B04F23722EC35B12972B62
C86B4173E> |
2 <001C60D8A8C9B8961883EF2506C5F4B139B52BA4A74CC996FC7817CB68CF9
F7623BC355EDFA2CA0D4FF0F61F19221EDEBA9CA75F65> |
5 <001C60D8A8C9B65B43E81C3B0AF635E2A8ED302FBE5C468A0F58CF177B370
8930CD4DCB680B8592D9A01F40554FFB59288ED00884FEE9960D20C8B5449873
846ECD3D1B2B67CFC8931067D7FF5C73BD3F75478DA2D986EC1617A725828978
17CF139FD784D158BAE255B0B157A2717BEF9ADE04EB8BBD6C09379C3F1F760D
B6D37985A4DBB78287250AB081FF8448B0994C756E10FC9203579DE7A1AC8B44
001C123E018726EF55644F8CFFAA564D3D2EFFF01C1FCB87BE42CF1114EDFE9C
DAF5EC6A38A36DC1902100D9D317A8CBE6FA11C2EF86EDAD3CF01CBC0BAC6E95
E1E11C74ADAE3EE2D8C43C6E49A4E3F9A2A7B8163472B2BCA942DCD071805ECF
FD7BA4D92D87D> |
12 <001C60D8A8C9B78C66ECEDEE858A8CC538BC2417928DEA3CC6F3E46FB1B8
2D0125F8D8BCEDDE5B28A5170823393F1B34EF305075A6F7E68F27C14448C2DD
C1E90FCB963C30CB968AEDF5A14685BC10DE668FDA301723FE086064B9FAE409
4F6510A514DC8CCCB0FA069C217517B3889EE192DAF8913091D3784D4817501F
20262DC2C3E2D54CBA692691F31B2A28EBF8CB780AB91B7465D6CD6B7FD99DB0
8376831108D46F9AF454AD56BBC459E3AFE8> |
9 <001C60D8A8C9B7DDB6898DDE6B962B130F4186CDFB1585591B6278CFD82F3
B5F607574EA533AED0FFFEA8F20DBC6B09BE73A5D847F12791D8B11208C7731B
85F3C1FE1D5DF55AD86BC730B7049EC5CB3F3E3BBB968E5427077C445C7FE843
3A28817AC4631E69DCF95E79AA47B068AF8109057394F2EBA9B519E9AD150E4D
C64B682029341D963FF4468A345A52B69DA358E75A03373ED087EF5942E77E8F
C7668E4775C625FBCCFE8EB721577B5F47ECBA227D8E483463FBD31B1F594920
15764A7F4FDA3593E951064306229B1C3A48F848CAFAA93E8538EEF67A1C3285
429A102EE63FD12FD5CBABB303EC605E086BCBD19060AE72CCCA21481F5E5C3F
C631A2E3CEBE26CC90A31B9BED307974CE18F08> |
10 <001C60D8A8C9B7F51B17FBC8059494BBAC7A2FB94C92CE57A9E58C6AF97D
9D21E3E676398D809F506110B525C1F87862A7DA8798AAAB3AADC23DC77E0B90
0B0EAFA3F0C8155855288895026F0A9FE17378008833A93F38D7563B0833153D
EA9BED359BB9EF465EBFD43FDF918BE0E16F60DF72F51B9B536956B1133E8283
092944433431F32CBA1E72262DA8751267FC314DB5C62FB26239D2644C7A3043
CDB6270E95E526FF1374E19E9928C6AC2E85CF327CF328563B77F39B0C1F3EDF
39B58BBE604FE46BBD2A14E992AA0E42BEC1663AA1130566DDC3C4A66EAB73AA
DECE602A75309FFB034033DA3BCA7D286FF2928F19D4470AF0BCF245A515E532
39CD673B6F417C24AD02DC52B265C5DD6BD2052770B4A92954FC5A> |
15 <001C60D8A8C9B7248221930E1ED95A1A35003DBF532C16720E6712DA25F4
A0AA0C95BC5795B480B7826DDD774E9F7D3A236B483120FC197CCDB160ACA4CA
5B5C342CB8BA4214E4515EDE3D359714B5C8A394288D37FD53A730> |
16 <001C60D8A8C9B751D508050129F442E711D697892BB426CE7A9885FB3501
132F4698F1624B93B2BAA2FEC665E5AEFB9D80B29CEFBBE5714987F2B0068AAC
6B22C9FC651EACE196B904256A7CE7833A10EAD4A75C24A245703F02BA4BD7CD
77FF9EF5137DF2EB83DBC767C80D2F21B1A7886C5E11437D405682BC5D516DE9
B6602A31BCDF5991EB53FE1F713D4DB20F71633038492E30> |
14 <001C60D8A8C9B7D7E8DC5B302152FA7F81EF9D214A71B555BDB90B0FBD9C
FDA090C81E5469E1082519DBD019297D36C66F6D8B5D2B8F5D79F2908F872324
004B9A91A1646246639FE4A6946D8985696D> |
13 <001C60D8A8C9B7BF866645A36D7D8948A84B9D8E1CA6CAA8AAB187090F75
F1A1553908600283CEF0209316F9E0335710AB76380B2F63E01A05F3EBFFA722
3CF000B28BD494F524394E4CBDE47BD5206BAFCECCD849A1AAE3910FCD5582F5
C4AD87429C4FB46E6A43D3DD6AED7D37C982B003A7486DA5E6776B87D010D695
99DDCBA3871461DF78576F41F1C227EC> |
17 <001C60D8A8C9B81E5FA6B3B7BD680EBDD19BC059FD9C402EC6C1D3B6097C
AADA7C09E7379EA7AD3DB7D117A255ADC6376967905A86F79DE08C650AFBBA5F
F6D25185D7B73BEF641664D6908737C034C650A7FBF6B04033A057DC7D927F71
9D3347164C4E000659445A4DF8D1E75E0FD5C6D5351D57072E6839BCBCB155D1
72DDEB064E9FE99A97A97C49E1A66B6FBC90> |
8 <001C60D8A8C9B797474F9DF66A5ABD0317A7D907725A49C089A222C30C95E
3701EF46ABE044138735A8E8B250BFDD026937DC417C547271AECD99E3273705
4F1F87C857E8BCCBB97D9A8F1313E16469265AA22B1EC7D18027FF6AD7B4179C
3374C84C32986339B4D909FDE3CE4DA70E0C880EDF6404EC49C4323D4BE02AF8
181E920181C835ED9A530C5F023AD2C3FA7AEADFE2782FE30CE225BDED376E46
C60FFDC7B2BF543AA1C9A0CBA58AFDE576FE934E0A9F6D05FBC015B9C809842E
9831F1EFAC5174C> |
11 <001C60D8A8C9B8812ABAC8CA189F295D647454D32FA2ABB3B2E02211A1C8
2541FA18F07B2DA76B78DFAF7026B3A218EEC6B50564C2249259D0AA85E37BC9
3ADF5AC467DA914C78C2F3854D9650F5DA0BAB99B0DBA92C1C2B89ED4D973FA6
1A19F8899B7223F9DE10B3A5FF4D684295A0162A97FA708433FFB60B50667B7B
0A63D88FE8FD55449AB737457077E5242414A03BA5B24FAFB29845F9D4E2141D
4FC1F92ECE078566> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FAAAAA+*Arial-13040-Identity-H /Identity-H 0 [/FAAAAA+*Arial-13040] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNC+*Arial-13040 /FAAAAA+*Arial-13040-Identity-H findfont ct_VMDictPut
FZJXNC+*Arial-13040 [8.5 0 0 -8.5 0 0 ]msf
14.04 -26.53 mo
(\000\004\000\003\000\022)sh
67.57 -26.79 mo
(\000\007\000\001\000\022)sh
79.09 -26.79 mo
(\000\006\000\002\000\022)sh
90.37 -26.79 mo
(\000\005\000\014\000\011\000\012\000\017\000\020\000\016\000\015\000\022)
[5.7632 4.47971 5.15128 4.94727 3.18777 4.1653 5.20226 4.31822 0 ]xsh
131.03 -26.79 mo
(\000\012\000\021\000\022)
[5.00459 2.87959 0 ]xsh
141.74 -26.79 mo
(\000\010\000\013\000\001\000\022)sh
%ADOBeginSubsetFont: GAAAAA+*Cambria-13043-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (GAAAAA+*Cambria-13043)
%%Title: (GAAAAA+*Cambria-13043 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /GAAAAA+*Cambria-13043 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1109 -298 1373 1047} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 51 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 51 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
8 <001C60D8A8C9B6655308190B0BD82D18558EBD70B100EC79E7BE0E2E9B0EC
8004524D66DC94D097ADE92A2B415C17EC88CDE17B53C68CD47A185A80D0D1EA
EFD322192705DE9A6B4697F8992D82EAF73516AF61A5F17854CC1B8A4F747880
E0761B06BF22B45A6F5638563B150DA77E49B5582323B673908B90FD560A78E2
D2B0B71A55D4E1033321E787D66A9778F70B51032AA9887ACBBED2246641B8B> |
10 <001C60D8A8C9B7BF865D8B4DA8067BB2A17BB63520B2079F8CD843AEB3ED
BB448253B498C9DB0FECD95A1CB408FE92C018EFAE8394CDA53C2AF3BC3BE341
7EE66D9781E8FEADCF3D9554235976027B765E008C72D4B1B8BA0C3D065B4C08
716C0FF57C644025FF2BA4752BA07F520F2BF49E7778C8868301CBFA828993DC
622C5B6DA79EFC3A59BD9B500063DC2B554D074BE013237226BEEA56F22D76BF
15DC1C6D6598DCF4C195BA18F63FDAF38C4CB2E75A2B24E1E41155A28FB458AB
1C0C94F61B1F57460A8E02D2C3B977B2EA0CE5764D95E4A1F8DC2AE98E275119
F516B3D11FB27B1BBAC9A533FAECEB29902E17494CD747B53FDA1F2B27CFE59E
8203E99D4338EE4DE7C23063C663EC5ACEBCE4DD0786E5306798CCCFF95759D2
D2CB54A39B7F63BC77960BF9D68C8D7FC6EFFDAD62ACDA57EDB8E05DB304B923
004E99752D179507578C6A886B800DBE6BAA14C6BC219FC29549109B9E000C25
4B9255DAC794219AA787B5780AE48318438E6DFF464672D0B28927B0C61AE523
68B95A797A1430C97C15D886DB16E794> |
12 <001C60D8A8C9B78FDBE6C129F8D75E9FCC80A257F1D90C94270B255DC341
C3273AB4ACDE5E1E98C036F3853E51DDB05FDC169373FBE07D7898B029F794EA
78B5D76252CE522301D3DE07F6366D19F79F932DADD2557593CC0222B0AD5EB0
4503FF39A5360118AC0D125AA1910BFAD42DAB2BB79C0E19D2559381E1C2B230
5EE47DACC2563786E447733177DF171A678ABAAFB6A22FE77616C1CEFE40AA0F
BD6A6CE27B9C0D4F8717B8F407> |
29 <001C60D8A8C9B8293C4B16B628FCCF313B4F78651CD2926C86AE2B7D154E
1739A11A8E6FD2EA794854AA2F4D7193080E9F81FEC86C2C0009293746851716
9A1A6F4517E9CCCB540BF0240FDCAD4AE0CD5BE1C743F44C7DFDC08F1A2F7386
EF20D8A7C4C0F9D5F2E1D51F7266980FEB5F08F2FC> |
19 <001C60D8A8C9B77AEA5EFD4FFC19E71EBD43E2FE011A35280EF346CCC199
EC1D33ABF848812828295A3650A2C99AC0BB2DAFFF0BECAC893FB6DB3EBC5D2D
ABB3214F294A35A5DD6F1D5F6427192E3B8335DC81BDA29EE476E01817E77A5C
74D9A04F44B0A065D7443FE129DC473E6306B1A4800B2B9D5C0B3A6DC1705A08
F65CA704B63A3A47E090479A7AED300203B25ABAB6AF5E7AC0AE46DD58966936
BF2937376AF862ECDDCE3B6E1138522808637EDC326AFB9B88C84897DCC5D508
67427232B7E70807BA9B5A4B13465DD8D2417A2EBB474B18646125F2790FE4BE
B6EAA890769F5B93797591B50CD11E310BDBA005F7CF3E50E5638DCAD6E57C51
92FAA853B6202432058C73A4088D4E2FAE448035D2DA149DA2748B692B1DFA56
7C22AE2A03E4B7EFD95DACCAB580DDA5E4860014E24DE26233F07C01687AE47B
E907900C4E167D5BB92D91967A40DA79F790238AA68E77459481F4A63E84023C
E3AB27> |
50 <001C60D8A8C9B8707C25> |
4 <001C60D8A8C9B72E922B5F0F8ADE7AC478E8B52C5AC2A826EC29BECE951E5
79BEE62BE8486A7247249370E79266A1EDDC550A972BE06134306B43CA8C35F6
5E080DB14E40D56F0369246E6D8765D2EE21FEC9B0DAE6EDD77C6B5C8AF6F0FB
E2710AE5D22CD6631CF151E7EF6B78356FF86AE6BF3D2DBD8C493A9FEF3005C5
F0B60E190C96384CAD48ACE0B89350E12FC59BF1D4A1755F72F725740CFE35EE
B9B71AF749A35F48B38C5A69F70A586467DC28E2DE85774F888E1F14A86A640B
D32A528C02427> |
1 <001C60D8A8C9B89474999728AE9762EFFE47C6F3FDE1992B82E9BDB94AE91
4566CE15A3C2D86629F65367BF10E89C6A437FC1C8A223B90621CC9502622> |
7 <001C60D8A8C9B78324C9BFD20EC618B342F226AE0FA758E7C7F5518336B4F
8E723A3624B2A05C62B5EBB0405FB6ABA9428652002E030EAC53866C99E1456D
C0EA969499EE4D26D2720BCDD7E2F04741B857351B799920331B8CE8F47CD9E1
9DEC856A2C89B479E620304C2D22E7FAECD23163AB52BCE44949EEAA77BB8FD1
3891F54DD53A5BE875EBC010625EFAF5E39C91E0DD695A86B815DCC2C063300C
00B760111ECE524DC08D351DBC851C89977DFCFEAEA6C3D238D293CBB14271CD
D622D6F609B92847FA0BC7D7EAD7F94A3F68D3F66E4121D5C75506A277E722E2
54FD0BCCE3D01CB4BC9> |
14 <001C60D8A8C9B713D43C7725E26A100B7110EBF838E8371D9454E95740E3
73DEFD4DA9ED3960AD3EFDCBBA7889E23B05EACF90A9815C84577249E08852FF
3CE4E48085A33F91F9F5EA1989A691E0295D8F3007515755A37B8486B65315F2
187FA617CCF97E8436241E85B1B524E31ADB6E82CD6D64F0F826FC79FEFCA814
AC958A8F7B0446FCC24E38F150B6D990EE43F4FF0BD891733195B8AA3D4A8D99
5C1ADFAE03D6A638410C71FE7CB6D826EDB51F2FBD09364A693CC2D1843BE042
3FA852866A744A95CF5250A852515DC8C54886DDEEF737BF705711FE78A844C2
A4CD82EA4D42BA4FA2DA24AE09FCC763D2D3F4044C53F45667453727C8D1C3CB
475C4696BFCEC9B104EA761FA8FEF2DC183552D8DAB12FB3F049124CF614A94E
95483F8DFDB23DE2617C4E6D6A03054C640D760395751754CCB19043308AE100
8E37B7> |
24 <001C60D8A8C9B7FF2B290E2116D387D40E9BAF49A274F4427A0787953D17
1DD90354CF9014861272A858E309FD482BB792EE660A1D915CF0DD210CC3BDEF
57BA5985444A61B60C7C67D0840B0BAD6FB8CFBAA2335C97BEEDC5697F795B30
5CAD4D2081559151EAC113FE6BA6DD63C8A1D34088C0AC1DE0AB97494D263E48
FD2DFFA9C4F3E7574A01BB0CEB6550C5485F5049ACBCF827258D23B82093A35C
BB75B83A299549293095C48B5BD741EFBDD55BF0F62D5B2955425EA761A80CE2
C8CAD2E5EB7143F6A4C6462616FD92DD549B9013BB3DDD9D> |
20 <001C60D8A8C9B7544E0B724F6BF155162D28AE353C025D9E56B1A2D2DD69
FA3EF96ECB7A43337DC39076D8131058E4F340EEEB5E2E204F8C6E8274CA4042
A5CBFB4F8B69976CD341A055930D7CA8DA533A78DD3A8D2E44FBE60F0FA799B1
BD49BB64E6D96B2947B18F3CCC926D2FCC5B5C42A1BB0D357D1F6BD00050957D
787E41EA9077DAC1A26DFD46011F45BE0D1FBE904263921594920C03138A8F48
F22D34E1052BF89F359C1EE39A2D6715407F6B67D3F0B62C42EFA97FB42774A8
BFA20F85C85A2045696725821B70F4E45327A770D1DCC3C3C1C881E830301074
BC4757CBF161E66684C294C509DA6BBFDC5AFDB46E392FD0DBF395D8A25DC772
2AEF3B916F44C277A1A578BA61A71CC56F3BC22A295918D85BAA7AE4D36FD66B
E5E9F8BE885449B8C9D2FB5AC104D0D9A904A171910F800B0B364A9573253F81
05F302AFB71B308CBFD6D655557D15873E31032767A7A3FCE5E6049D806EDC> |
17 <001C60D8A8C9B785CBB4FE7B0768A6A8CC238198FDEF95E0EFAFB2DE1031
FD77EA59FB3AD22FF11AF610DE3EEBA9DCA07B6CACCBF6EA7377358A2EEFC643
C26C205652F90EE3C2B2EA6A696E7F1F25D553B625A9619865DD4EB4DC8E7740
5FB070077ECBEF595BA1A3F561C516B23DCFD93A289166094529D93E39F3066B
7336907E12DDCB6C04A138649B194DF959219878ED93EEDF64915155023B1464
04527D1FA2529DFD4D6C73E7A96E18710378887DB33536A27CEB85C9132ED6DD
37A356B1F30E7DC120D084355F86FA44E3F2803A4D156C57E190F863E2EB841D
1DFD60> |
48 <001C60D8A8C9B79AB85201B7FA42F4873008F9F2C75DB6BBEF2772B61E50
8703AB4A84FE9E4F6B4F8E1CBAD5809325493BFC206643EF03532A9DABE01C1E
EC81376727FD64892ECBA55B2FB73BAB609A30316AF24C144935910ABAC45F27
9E715AF9674F413CF93DA5A459DF7C345E846645CA975160020D351D885AA11B
332C1CE28E2EDBFBD38569CF3E8FE7C7AE18DD82BBDF5F18CBF4CA60B74E1EE7
D5215A232CC535153E74A4A0545095927E5068F4B273C078C75AF21478537623
0921CC6EFAA201116F4FAABBABBA80498C> |
21 <001C60D8A8C9B77D5F9423FF5C8EDB211BD293E418E65D31E8F266642FC1
740AF288B594EDA499E0DC46841DE2F7BD8B3087C622E23BF13E4E4C0E19AA43
889CD626E9FCE1E26A9E3245B928EA920C443F5153B61C2735074F027C05D9C2
0451951C3B106F767294C5CBF94AE72CC89D65E84F8C10962A537BA4ACCBFC97
40B767E29D36AE3346C89EE345F44696EEA63090346AD85DC545AF9BEC949BEA
F96EFE64DA3FA5002373E7FE0632C9A2116AF56F795732F8B59180C30FBBBEB3
C6E451CABE893AC07DA1A4DA5649DD8E79191147CD3716133F87FA9A2DEF96C0
F750A2EDB0DCCFAA7B2AEF48EAE74768C3ADCEEFA49E1A3FCE5FBE126CFB3EA2
C7A4CFFE8A8A1EB2EC0F86DF7093A6E1C118BA5F8FDF50CCABD6CEF25C9723F5
CA92863EE252B6C363478EB871FB435C79D6C1D8EDD00D5C879D9026C2414656
7CA5604DFAAD78C84C84D451A3E39BDB3E> |
40 <001C60D8A8C9B776A063BE9018A483745588BF396ACEDCEBBB76E87F3ACF
EDA55DE0A1E9D53C825407DB79D9CC395C0700986103EC296F6B2B1502DF8770
0C71F6AF31203BEACEFCF5DC8DFADCC2FA0E99B084EC64B610E29B185CF730BC
6AF193BA42C3E2E31FC0012831499A177E200724875EAAEEDB0276A70A987945
2AAD387A0CF544EC4DCB32841E16E9CA284DFCB8A0440CA3C8E4572A3C5520B4
37E5D82CAA1D0D9C2E402892EBCC2D3EAF12532D11DFB437F1B6B5975A401F50
DF2F520411E4954C81B7EE7BB517D83EA1D47024DC82AC3421C1F25557F6BF58
5BB099E3298FCA5D758C751C406ADB80C3E8D2> |
2 <001C60D8A8C9B6EC3495C59611702C35E23BC7DA9DA7232656668B6887175
92CAF1E49A4DAF2544F8559D72C831E7E40400AE53A260AEF816CE70F29516E8
F2FA8B8DFAD1535A770B78AC2EBD8473276FA0235A82475608EEC7CF43D7A05A
A8C5DED312012CCA0ADFF810C284145CB13CEDE974F647478DD49C338DC88C35
D7BF5225C582BE5ABBA3511506DB4108922EBFE5CEFEAB78C1A6E6CECF8F3D1C
9BDCD3C845694B4902CE8BEBC4C4EA70CE4CD372894B9F16FD6A8AD7AAF96745
AD8361A940A5C8892E1B4EE55E703367E5B2516EA> |
15 <001C60D8A8C9B71DE7D21DC61FD3F2E88FCB698C4822707B46D3F313BFD8
3AF072DF097648DEC2363405BBA2AF5713E0185DD118F1DEA0320197A32D3500
0AE7C3FA91E92C1FC6DA689F7EAE972BD89DD4AEB6C4D49AE8FDE657B192D7B3
925F86CEED7797F95F812FB7AA89BAB9703ECEFD28696A8E98697427FCD4595D
4356B3F8D3A8F6DCD63990C65409139B670C79350008CA9D16FF9A593600E80D
A73BD142037B69170F8B9D6A79A419543AD03C1A042634CA82E26A9346F92FBA
88894620A75CF9AD2B64E454BE3C716BA7C360FEAE4DC2E79EDD23D744F24263
A368AD33F8FD7F6B8A837C85> |
46 <001C60D8A8C9B80898E35F5FC0F958FADD5D7EC6A09A280C0A098A1C74BD
54FACC39FE24E1326F9B672186E705BDDA2A5036B3431F542B01A8C47254162E
ABC60A44C6AF5FA9B471991F9FAF171A2991D2C75498B7D0A592515E873ED169
7C02F514FF0D0C3CA22AC24043A9059EF7D3D09FE64CA334B597D17D154E396C
7924C42B4D9B82344A6A867E086B7D4224EFA9E694226B4BF75791EE45C81877
EC2B9436D3882E74207F12FC4B11AC5F447D6B68849278986CDD5559B238F72F
FDBFF459E8D80D8812F505BBDF> |
26 <001C60D8A8C9B835D34C1B4CB0981F6CCDEEC1572AF26BBE6378836165BF
916B9EA75D280FA5E538E9E1846AFBB9CD1723015C1945A8C2E4D064EFF050A1
C8586780CD85483BC1FC863188D586E206BC1361DD7A36D3DAAD63B144210091
C4347E890DF54EE748BBE30CC0E9D30AAEE5A40ACE8A718463DB08F5C912B355
10C6B1BDB26679128C4D5015722F67DB483CD6CD3DF1698A516192402E8BA27B
F2426E9D4757> |
49 <001C60D8A8C9B79676FBA521B376F60D1C643ADB414A8674C0D1851497BD
F8585DA0B578F45E24BEAEE9D0F758C234D3893F7596640599467E9EE06063DD
532697ABF4BD3A902303F461827432569076FED76ADE86B3B5D34AC8F82F451C
491E963A6E9076B26ABAA4418F1B1F66176573CCBF1150B9833534FA51593FB4
87080F2E73EDEEEA11731AEE16DC06161C27F1541F77D55FEA6064E61DBC3F7D
7EC7A2C25E06E560316F04C7B412C8ADFD78101677858347525BC548F05793B7
37A0C6E4E659FDF0E7F1EC1D5165E123DB40FD05F5B04AE0465A76167E7C214D
9767FC656361D6C0921A0E03F26F11246AA341D8A2930C09153D61F71C3CB6E2
EFB1687E2AAA73133F1733841D6C3747DBB649FD702D17260069B1407B65E692
9A65582C8F107E2527F1BA3A17A079941B0BAA7492A58F463DFE6762ED760544
8EDB7778C74CAA4DC41C> |
36 <001C60D8A8C9B744510E2E0294047C0470A20769B69F6BF8A42B3AC91C6C
8076777C8B4CCCFA5803BEEAC84D3E08F48407C56AA96DF058077B825C8ACFF2
717AFE0A571A8EF51474E21CBF1C53A67608674FF0F5E474CB3BCC520F06D0EB
9224BB42159A589D4190FBFA5500470777D893E383E8E61453ABDF734BA05B89
D7C258C7A2901ADA43ADE01738845C9D410F804EB858B435494D317E0CC03AA9
81C64FB2C9EC75DB1F0C9D3AC18D26894B6F9BD9B82335A48972D81C19D833BF
9A4C2EABFBEE16CF3BF866D7CDFBB7F09478F507CB2950EA0852F2F434178AA8
2AF41015D88B48FABBF8F50289DAAA87C13F151A123BCA9162325EF2C04DA4> |
33 <001C60D8A8C9B7CEAE0568B184240F59455327C970549ED8F503E7C8D7DA
897DCAEEAEB5706FFC2908233E123C6B393452DE73EBB70B4B9C6D2613D80457
29D7CFA5382E0A9759E87167D86981FE9C293C89A917A72D9D6D9A33BC111BA7
D43724A23DA184C66B2CC8B685A0A8E8827656A56E518A142A74AE8BCCA09A2E
04B5806930424608878C3AD9D810C9450E8C21E05182FF5AAF4E50F191302430
8CE7DFF80B4787E4392386B317968310476D681B322B779A0331E4527B6F46A5
467FDC87BF3CDD67D773A268031B1E9D> |
9 <001C60D8A8C9B6F715E6BE4CE682687984D8E9F1637A9E6F55DE2A0F2D7FB
BFE1B2E4DF6A83A411B44734DE6561BA5994D5EA917D426D6F436034AFFA896B
CBC64385665B5BF4E62A1901AFED7812AE6DEE7D5F934A63E046AC73B586D93B
FF624ED7B4B5D90D4CB504748998BC59B9B9F70C905CB2611721BF216624D7F9
F6F95C6997B158FB52F661B901DBC9347A41A06FE535A8C8F9C2FDD82E578043
460AB9BDCC41F59574204AC73E004F47E267278> |
38 <001C60D8A8C9B7869961B96722303117DEEC4F664A4E93E6C94008402C6E
658DB516926D59110F7A06F5B5B76A936578323422D087DC3C21AA2C792F9F14
CE3C22EA580C29A052797ABA1392D9555F3CB3A895AAF9D5EA312DD81DA54791
595F62AA83D331CE6BACD0B3273D4F46163998CFEC4CB5A8CC8D66F571186123
E223530CDCB1D2E41412AAF683469951D151F8D4B865B19467EB7247CCB016E0
9D9A6CAFB94AA92097C4100C3A514356526102E27BEFCF04911FF2209062FA1E
D07FE635142FE0F88227C0A65EBA8462DE68F2CF> |
30 <001C60D8A8C9B83D5FF2E0D2262F4340F73BD8311BB0A73510E4B08858A6
5EB139B99ADD4A50D05508ED443CE105C67B6009F3032BD6A76B7F3533BECB7A
ACD358E9BAB65D553287D85DB5880E3C1BF84909BACE6B1690BBE6013D2D24D3
BA8140876E92BF97FB2D3C6F1D4B39FB1FF493B3102B4A1EE64A3436E950E92A
3B95A52BEEC1EAD382> |
5 <001C60D8A8C9B673A567D0C9EC414BF59FAE1B6BE7A6504142B1A09D1D77C
5B39A3C655435902689D668FF2879C2BFB691EAD1A3A21F831C597E768A6B432
9B0B4FD52B9F214A40CF3DBDC31E1F26959BDEABB4756A75BFAF6E81C4C359F2
B99FE1B18D7302F5CC27B3622C8B77B65CAB379136402822A47426052EF0B0E9
E25C83F812A450EF9D817AC0EA7D4CD550D4A6D5FE3528C78D251A4560176E0A
28D4D0983F14527D04746019DB44592836B465A9A6D1828E3FDD91BD750DFA27
9B7> |
27 <001C60D8A8C9B83C8EA69CE60E9796DF8AF76E972B54B79F1DF959F295B0
E2C33E211D83663C6AB7962C23CE94A4B869448ADEE46E62A4D105549BC507A3
EEE6FCAB49041485DF68C73BE9717DAB5936413B3F9E58FC313AB3528A1F997F
7941158F57E07AD4F9C60F41AFF91EF2621E5574590852093D6AE4CB40A88F96
3CFE555FECD4A559920B2989BED1A5F03126F42B500C20CF21> |
34 <001C60D8A8C9B7CEAE056FE5AD1F8EC395894117F60D8D0BA7F44A508389
C4672C55350DFB634E2C033778C26EE7B172B6234683DA4840B3D92D9E311DE4
489C90FD332207838951A0F952516AF876E130DB8662D4FA19AE9024A69468C8
1B3CB2F2DE72D42969BF1843B939144755A302000D660179D470ADD4BFEB4726
37E22B0FA6B7FDC5FCE491F05AC74E93F5C3DE23B36990E4082AF35DDE6C128D
4A43B3BABD7AC3194D12ED6DEDE9F7949981E7A1C7C3300154FFD0BE4E> |
44 <001C60D8A8C9B71DE7D22A552097B0D148D2C9583E1E97D57151E12C1DF8
5E3DF646B1EA8D2FA7EF3B9CF8B6FB2AAFE139DC99BA9FF7DD4541F7AB8708A2
802CE7F8E3C074C7DE79909C9E7ACE42F74F2C9B72539FF68BD434AF8E0770AA
59F4A9158A4D8B86873BA07F0F875186A3897C288B5148A92676A32C8CA11611
5D371DE68F62E13C1B5F4818CCFFD0F69DCCB38ACE04D53D5DC61B25C8F60930
64EBFD8D557E41290388E60A140F408B827252F2B980FB3EF14EAA0642BA79DE
1437B1B7F2907637C875421951967293DBAA303604D72069A22EEB1F1E7922D6
7F83A8D85865B4B830AB3729935F652DCE63550485CEE7A4D3FF364D554BC9D7
308799904828AD76FEDDD0F040D07191206D07D7E28CD6975D784FBF0287D029
454265431F3E6645C86BE74038EBA4938611A4AF70C271E61F25E8D30B9F341B
FC0F821191AFF9722B79879D433B285C0407E5237D30C32BDDBBADEB012F8DC8
580859B531D79BA69B15D2DCEF98> |
3 <001C60D8A8C9B5AF62846958C87B767BB353F7E53A25C43FCF67733E8CCB3
B691CDD48E1F9B2D751CB8C48C176255B1C4B62CD90F4E2B4261BCBA1EBBBB33
62E1EBF5AF65808F0A07BE9C9937E501ABF329C6F667F58317BEA9CAC7503FEE
84F14C8F595AA2446204BFD9438737BA0F2ED52DEDFBCA9BDC9810307279FCA7
D5D3542259EC27EA434940D00EED5013AF5400C9CB1EE20C9F20D76BE11BEFAC
28780C1BB90E1D2AE13D6473483C9760AF824E371E2E41475CAAA908281D2CBE
23FEBAE2B84BAC1769CB7657943B017716D77282EA98CBF8AEDC1C75CDB4AB38
1FFFC0FC16E5252AB8DA4AB388549988EADA032513E85B1AB721343F494BCAC7
B64D93863F049FA6DB1F197DD211DBA583CCFFBAC55CB6CBCCFE0F91E40A2525
9633FC68E87C4> |
18 <001C60D8A8C9B639EE89423C41D15C700FA358EE61DDEE4C5A192970446D
F16334142AFF51969B5AB484E141309329E2A726EACAD2B956A373778620D06E
FEBE224C19D76E968F5FE58918BFF6C0DF10F91085929DC147967C2E39F65955
B52E1B5B148DFCA03F411970614EBC94C41E68A39BB386751C5DA74F027D7C68
944B2220E8AC0A8899A7EA89A15457CE0C82724B4B5D22318CB4990329C95BD9
39A5A68799A870F8D7CB1D878F5802D86858E8F72EED2DC2AEC1D44AB3BA9D02
44AA8A10DC1E3F260A1E28221E8F87C4> |
47 <001C60D8A8C9B75D88D2EE02AE09A7B878990F93D7DC2DC57D208CF23338
EF46F65D883CAB6475945965BD24D3E15505C820A419B11DD48972B6C058FE67
D539431E6195ED70276EBE030A0B9185CE50667746AEC6B2095A60115D80B284
A539D3E8485E2D432F2B4FE98144C759E2DE095BB564EADF6D93975D25D4A9CB
827036F0F67F8EC0F810752C49CC63F9A4B2870615923E1291745B781D147B5E
010C24D808C5E9C4FC144A> |
25 <001C60D8A8C9B6086D29C3027E39C5A028D639B8249C57D089A538EE982C
E7FE3491A5ED8F504841055C104345AEB6668E64E21DA6048434564F1C44A5FA
25559B80803A187701C2AF6200506A49C3CA1C50B9E43EE1F79C7A17FDE5CE1C
741629A856C6CA4C0E6FDED49B5C66DA8C04F405012C6EDC8ED12D1683BBCC23
B1770E003D760335F7DE0DD437BA1C2A25494795BE8D06119F223B91EBF38D5F
340CCC529D71D9072CA10FF35EC42E19DB1E5607A0E0567ABC2431C32CF45ACF
B80B2147FD3688AFA1F42FCCB09ABF53E18D2C9E6B8B0B8DDE6E6A8225E65C41
6704D7BA636DD08956028B743DF60ECF903F5BE0AB8EFBC3D735923E9705ACA6
605C9505ADA500C2> |
28 <001C60D8A8C9B82C91E108DDEB476375BD9AF62EFA45F48FA84B4778F982
0E26438ACC32B5C4927ECDFED2047F6565B2E91F52CF59635387C1FDF9C5B196
CE9FBB513A8FE5B94F813F00A77F2B0A6F0C3FBA19BB5A4C01B5ED7FAA524090
9FBE9CF272E598302056554307AAEB638A514B4785586F4E825A2B4174466E44
4C2CBDE333FCE7F63C58DA7C62E89E8B19A927D0A967EC9B29E0D7460B57F8E5
62C6A97CCC3C4626678DF4> |
45 <001C60D8A8C9B7544E048EEB8BE1886C3B979B1B39BF2743D142F766063B
6649B0E62CDE08D802E5B2C2BA47757F248CBF7625061E78DDC1CA3D14072FFF
609C4B0A130E44BA366B4A57D2AB000E8FF068FE921907DE4871C5BECEB475E5
43EF28C47389B1BB9AFB7B1DFC457DCBE1897508FB95E6F5F6B48D580F9B31E2
E8E39EB86AB41561BE12E0AB2310DF793115E47BADA50148D394559B158FBAC6
83DDA44F5C27B0DC1D95FC8765D6C7DDCF719B8017C8A2BC6B65FD7DDA611699
DF5C7A5E2EEB38E248E9D470F309FF9D53DA4F2B8E355F2A6174> |
39 <001C60D8A8C9B633001E56BBD4A9EA8C7F0E7E854CE90A44D0EF8EF62F34
CEAD6BE1CB894DA0C89FEB71FCCEF743A753FBCD89B327D6029551E935A46FCB
0779392D81B57F510A047AC40F072FFD63A9C98B2979E8AF50931A472359DA97
70C5BE75B60BF8DC47BD577D2AF864CB8DAC7615F2D048C6318BEDBE33956631
5DCB61560901257AD0AFACE49DB01731AA69A7F9A4F3218270788983F97C797C
92B0B11A2502D14DFEDCB4AF3EB24F646E4A424C54B9E718917456EC927B137B
66E79621E4CF9C1C64E5FF3B3C6D18B289> |
41 <001C60D8A8C9B7B5777307FDA7CA0F14DA3CF8B69366BED97A9D21ECACCB
D26A39A405605E06B94F7BE8CB4792A58DA1974B615FA88AC00E1CA126986CE9
49FC9B374F783FCFC6D26EDD2C060DC44BD8DECC4C91459E929AE86F2E104FD9
9C42A1461E811F02E51070128FB0471E3215303D642CD0FBF782DEC279477DF9
5CCD05205017F3C1E0B1F783DD6CF277A0DAE8172FA00907C78148211651623C
26B093EE22F0> |
37 <001C60D8A8C9B7D61BCBA73AC99A5B4B40D9C2B4D4421094D84307805435
C1D5A11457A8747813473E5AD4D8028205F19FC79FAAC9F9C68BBC84B96CE05B
0A25A6B23EC5A2197A09BAED0A5FC7F33847DC9C984F5D7C66B8D33878025C0A
4C61E4F761A413D013F0CDC19453622C900B4F793DE503AC58FA47D30B1BD20A
7FDD4BADC0CB5C90E75BA6E763BE1E7879D5634CDB50DBD8EACA8CC3F5A00F87
20CCE2C100A1B5E638F1B2CDE519FE2FBCA573> |
16 <001C60D8A8C9B7CF7CCC8096D2373EA342A710E8423F593F35E4C3A158A9
67F0339B4CD2CBA5C11EDCCFCDC7D143BB6F276C75B2B7737EC3E8875F747273
B31A5FAE4F4A0DC1F9B0A844BBD85626D7DD69DE2282B2C92C6172F60ADB5DFE
0457694C4E0AB256B48719785A35F8CBC3675581679F16266FE4F2> |
22 <001C60D8A8C9B7E46D3565927BA63744014E3DE5C1E8BEA6450DF5AD9E43
8FD43EBA846D56B9992353AEAA4FCF39D5D8C042843D7224703DA387DB901225
9BF86F721396988FB6E06A7DD4FAA8B5178CC4F67DC812DEBFDADA28D7272C61
7C25A421A234DB8F9DBC488C341C603A4ED5A6628EB489EFDF41594C501A1E8D
EF0EE82993F88D46108F5B885989FD5EED6C5DC5D527CEAB39D04D92D16CD602
738F67ADD9> |
42 <001C60D8A8C9B7A66FF2828D0205B4589E6083E783D03395DB066347CEFA
C3F49E4BF9C2B3630A20852CEC313C04F7221E98F58D8724A29FC877999A6680
352A190554F78B33E59A90AD9F0F9E030BAC52690ABE4E9746404ADA0C2AAADA
3DF9F31C8901F8FD6C6689CA069EF863430C80076EEAC88555C1751F12BF072A
3AB1E4DA2B5C557033568DD78B19183DFF80DAF39497C791C9BAA38A2E4DF2FD
F00E99B72091274732F0EAD4B61AADED2303FB857C6F234367CBC3F3E839> |
6 <001C60D8A8C9B6D671AF381E1DA861BD01FCE29C8A28383546CAB105DC34B
930E5E801199D246F15530A70BC7AF41A3AEEC46E9C62065A20A3C886AC7E171
130FF3D6555D584F10E009BD9488B984BF75B9F3155357DEF27498B98760479F
0F34BB6CA8982E1B6017A0B5674EA333332ECABA0362B0BBECA4859E94D26C84
BC8DC056702D01CC63AF5E0F7AB033101691EC9BC16631A8D24BC7DCA29EFC30
29A25EF1488BD2CE885103C83C90E32E39F6E5D7B9DF6690A4B8BF3B3C2F05B6
1> |
43 <001C60D8A8C9B7A08605D8CEB97FD70171EDDAEAC218B99000D1D6DC0A97
0394BA8DCDA278745311240A08034F12E4C0D99B4AC2EC3720755A697609D91A
CD8D828218474BEB852FAE065E03580FD4C37749843580268A61206C1D29A2C7
FB98030118883D093F06E2DFCCF43528DA6ADD72E3D9739AA5FA3F1F68FEA4E1
59855FD07587E2347C6661B973C763939B0FBB7473B106E43B0256739C13F191
A279DBCD5A2102EF68800FF43DCBA9CF10E8CE2046DCDA53A29310DF495FCA01
F04B50348C41B98663A4AA2A914C5ACCBD7A76361C925519> |
23 <001C60D8A8C9B7E897EDAF09B3463A1CBB733150C42DD2070AA5D37535C3
95CB4FACBBB69C4D22007FF4E5A9B5B6F048378D5B9743C359E2D8E38D208C88
7C4FEED69695EABC822628E52106ED1AC32626050281AA8E4C60BE4C04DF9141
E07286F893C8B952CEE22E2411486CDFB121351DEFB86BA5A0E72A6E51C7B311
D1FB3DD3E182215B4D98110BF605A8CBC7756D7C9A418A5BC76C5608CFD29820
7BC5DBC99A551C552EEB54BBC0C6AB944B49C4ECEB3CFB19DEBEEB3B61887DC3
0A46EEF497756FC363C202276296BC9A2E07621FEC3F9EAE2B61FD70162376C6
EA729D2919E2A497A70030FE290718BF1664EEE5C3E35138542A1397EC26F315
8D74A26F3B31E043041C1D59173883368C836F1DCA7A8606C628532219D408E9
50C47605FFD89C95BDE214BF6C28DB3A95EE5A9021364038A3D94435D3977B> |
11 <001C60D8A8C9B7F51B180BABF2A14CAC717A6E58FCF67323BD4413128009
2F130AD64B7D82ACD145224AAC888052875092630837B8A5066F8B67F355050A
FDBF8FF1AE4DBA46D9F06763CA1F6B6B74D45E8F5877F5AAF7D0341741ED4985
E069EFB43EE19C968A06472E75D74333D76B578DE595BA4977274B143F19480B
93FDF579B7B8F6642D7E5B53D0277C00EAE0CD10C4FA52DF1A03DF4C43934753
5CDB32C47B36F24030D2C4> |
13 <001C60D8A8C9B60287C0C891AAA843E5BA729967BC9A46DF91FAD87C5D6E
A3472D3305BED1349E113AD3061F4E0F2ACDAA88E7271DB1CE40C44F4DCDEC94
078A301B16ABEB608D6955171AF3D6375590AFF52450FBC18DDACC714406A79A
CD71D6990C83CB53230E31CFF88772EDED516008BA9ACD69C2373A272A9A9CD2
37BCBEE53C0B0DCFF320943111363D83BA730030A6C3CC3CC0BEB72F1CA30523
0D253BDC31D190A3CA099DE553F51F802D3F5182> |
35 <001C60D8A8C9B62D3B2691ACA1240172C93B1F1F1432AA0026CAC9A88F98
DD53B4E92E8FD018F3DB2324CAB8B86458B93D5DA8D4567A205EC90D4B651A55
0631FE100550182F4523DD6A96908EB6BECD800F3374008076F17F510914535B
DB6A7898048CC36D18F2F0118836E0E7561595CC73E4578265E4204D4BC496FA
0941ED3F715E4CA1522629A71C61435E8CE2151FE2AB2EDEF158AEEB81032D1E
551D3FC577322059804D505463226265CE7B79F93D02F4EED8C89401AADB8D31
8E0E8CA8366B7D42D4C7C8977969A2C157> |
31 <001C60D8A8C9B521E3243758F200080F5E762145C8D424EC661DD8B5462B
6F1EB1FEC3322300E5CB235EB2FA3047F5177A1A175A95424E9742E1B266B152
415A3C11E5C1197CBE4F9BB16C453F8E51C8DF5E3F785A5ED96E5145FA0167A1
DE9793EAC010FA5D812F7D79837D16A112CBFF9910BBDC367DEC1628D4CFC12C
7CEB0C1126D8B59EE8F60C9D86B1E482A0170F929B10EF9D7B165B1EE1964792
B1811DE3C13C34933A68ABA67D0169CBDA5F5515E3355686DC0389978E31B6BD
E7102529560EDE08D1E0542E85BF381F3B314069C4E39F5BA2A51C2C34FC06FE
78E37451A8DFC829399B265C5D03BD05983AC01CA4F63517EFE53BCC5A775907
98141E56C50E8687A5CE420AD8D2FCDC7BA59526F1405D02627FC3F3FA742E5A> |
32 <001C60D8A8C9B69E598BA765EE9596AFE3EDCCA0BA6A50C409E1EE427AEE
69C6A2AF5B2CDDC43F3CE2C13CED1D728A4628F72D3FD828CB0B61F55DD335B3
6FE3FB766BD0C7B3112C3A41C1325C5A7AE52DFFEF52911F38E6F9162C7DC572
697EB03B6D81DE570BFE1F9D1D9C36B5128FDA4108F8DED1F0FBC3CFC2B796B1
4CA84F13237A322AC9649137ECD11BB597D9F7EC47DBAF8E3272F1E7BCC23F23
8488A173E46F41A0FEDDD5B1BA5F657075392CE1CE331C4E6239B4E1102C5709
8FEC0E0C0F845FDD5E78975D34E8225A4436BD405629F0815CEE8D4A88257A57
5F07B5B3E750AD42AF89A0F0703F6C25CFA254CFCA05BAD3356A2CEE2B8A62D6
CCBDF04CDF2B73080BA1EAA063D2332A74E99F3A247012BFAD8E5E5C3CEBCB75
41A510089DE29B0F489B9A762BE49C7479C0CE8737C8E30008AC9AE97DDEF052
06429FC3C14FE5C29DD23BBFDD9BF519C704DAC149299BA2990AA5111EED5816
ACB4C028> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /GAAAAA+*Cambria-13043-Identity-H /Identity-H 0 [/GAAAAA+*Cambria-13043] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXND+*Cambria-13043 /GAAAAA+*Cambria-13043-Identity-H findfont ct_VMDictPut
FZJXND+*Cambria-13043 [8.5 0 0 -8.5 0 0 ]msf
107.88 -3.12 mo
(\000\010\000\012\000\014\000\035\000\023\0002)sh
131.05 -3.12 mo
(\000\004\000\004\000\001\0002)
[3.10799 3.108 1.82449 0 ]xsh
147.96 -3.08002 mo
(\000\007\000\016\000\030\000\024\000\021\0000\000\035\000\025\000\(\0002)sh
186.61 -3.08002 mo
(\000\002\000\017\000.\000\032\0001\000\012\000.\000\032\000$\000!\0002)
[6.47784 3.52835 3.01837 2.65289 4.67581 4.32727 3.01837 2.65289 4.01279 5.01587 0 ]xsh
228.13 -3.08002 mo
(\000\011\000&\000\017\000\012\000\035\000\036\0002)sh
254.53 -3.08002 mo
(\000\005\000$\000\033\000"\000.\000,\0002)sh
14.29 14.4 mo
(\000\003\000\022\000\022\0002)
[7.96629 6.01974 6.01974 0 ]xsh
37.47 14.4 mo
(\000/\000\031\000\034\000-\0002)
[4.10733 6.20691 2.7473 4.18385 0 ]xsh
58.64 14.4 mo
(\000'\000\)\000%\000\020\000\026\000-\000-\000%\000*\0002)
[5.98201 4.41809 5.2256 5.01302 4.83456 4.15454 4.15454 5.2256 4.27361 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+*Minion#20Pro-13045-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HAAAAA+*Minion#20Pro-13045)
%%Title: (HAAAAA+*Minion#20Pro-13045 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HAAAAA+*Minion#20Pro-13045 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-52 -248 1.00992e+08 1.17835e+08} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 32 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 32 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
2 <001C60D8A8C9B81005B857FC29CD07A6D6000285A0301865CAD85EA5FF55B
300C5C5DDBA8DCF7E7E04B63DD8B569534C99830E133A3B942379CBADEB5867B
92893A03BACA0550DC266C0B005767DA8871A5A5EEE535CB20F86E765A95B4AE
728F97FB2A887E69E07539B98A4FACAB193ECBA79B427AF299C5258B299DCD6C
954B5DFDE53B25C5E83CB31C675B3E5FF94> |
24 <001C60D8A8C9B7ECD941C783C5310080FAE8052DE70423EAF0855D3363FA
DBD0838460B01EAA8FFFCC1D0878243F7F9F120C7E3416237EBE8E8345EB4942
30633E60D71D790EEB1B3E772C526CA3A9A09B4A6CD0A0BFF69A2C158EECE17D
79AE40F32B619FC0368AF1BA1741E7ACBE5594CBEEB9725A0EF5F833F648BC33
14649D0A746426006A81A72341E1885F4E851DD5F29D5722627B19A43F53A769
01A193C1C2838CBCDB3B7934BDBFA0D766CD968D8473749071198215605319CD
0B6F845D29727015816C00059E0D635E6E352B8B7307FAA9BEEDAB3614A8A134
7028AE64DA4A2BEF114186422BAEC7> |
25 <001C60D8A8C9B7015BA9782EFA32817C78CA325A8E22C7EFA8E6714EF56D
8DFCA9C0894544790445E2D9F28CF05A606A21205F046D6A7F64033F17653F65
348AC449D257935B01DFAA5E7D9433441B58E3DD625B7306692B0F29080A883B
B29C6B25E490FABFC897A41AE84F17C93CBC81AE13B8DFC659C6BAD30289A282
35DA6D7452F139C7C70E2E75483BB8E82AF475937D249339F9B002052B7F7D8F
C9CE4D0DEFFA7D201BD167B2318F6BCB9FA0C3B783BAE2D372FB9FE25D8901F4
F41DD511911B65834707CE249B76F2> |
23 <001C60D8A8C9B7A73DB6F68092594EE34FA27CFFD6ADEA44FA5F94837686
EF10F2C8249379C79499814FF766F4B96DBBF864933E7218D835C2714543B499
D5929171FB1B66FEAB0177BDA42BF3FF4C2981380DE1E48D7D3F0170FD218F66
7DFF0F802AA0BFB12977A9192386DC95F53CB9F94F180EB109441D2CFCB1E77F
A7D3EBBAD0D7528C314B7485983D2B6E835B393564614A1AEA5B8706E232D053
D1C84CB0B9ED26A0E864C2C7CCA4> |
11 <001C60D8A8C9B7727940156340172927D4A089561B02C94B6E5FAF9B2D01
D6C76539CBE69694AE85D04D20E5E686244C49A15BB6629ED0755D5B0AC231B7
383F7C06178D99D797DD9C15F495ABCFAC17B3B8AA20D06B6DD80F8B6423C79B
8252149322EA25C613CF9A1C8B7258AF6BCD74F4F692564965BE01A3> |
14 <001C60D8A8C9B77914881DC7B5384429EE9BC733E45358E73A2DC0DF8AFB
FE96F3E76B08E1CBF0D535823FA87AA034F316D1842CEEDFBB7E625F028EDD90
8F90ACC48E8F40922DFF6DFB51D599800D05A30BD579ECD18712E5D8D9B4AA3F
D844B2D8FB598A7052A0515A06A6D1ABD0FE4ABD43D9965877279543B809FEF0
D8EE36CE1E04CDF55ACD7A3C18E3090FC5A8575D6E861B1C6D1E2EE43494A1C2
FEC8BD868145B4E488E55CD4D8D00E6BCB6FF1F5E2385C66100B5513F818EF95
27E0F87DE4894CE530876B8BDE7DDFC38AD7F6D3B14E7BB69471485FAE7D5F2D
C9480EB91842D1685888268964D2871FE91F7836C96AC4> |
27 <001C60D8A8C9B70D0E73AD150F9122810335FB9F2BAC06090EA720A613D8
862F733D262BDECA38FF5A9D19EE9A4230554C9114D15B06E540DA812D7BFB8F
EFC511ABBF53736764D46342DDF27D76A0AF15FE4D2000EEEB9CD3B03C65DEA0
E954CB3BC4370529BD70C3260A0678901D0F6EF59B9D00C90EE74D1202B53BAA
2674AADF50D589CD7D10B8186AB60F36E486A8E8072CE3D9B5059CC9833B62CC
8A1A4B7E4B5639E607DEDC6C8790810F83280D08D19748910DDBE5F4A19F882F
25AB4A7DF38ECC131C338736AAA41FFB5D6BD658505A1B31E32142955C3105> |
31 <001C60D8A8C9B8707C25> |
1 <001C60D8A8C9B08A9519F287571B5A80DC7EC4C8882533351BA35E777FEDA
DE6E2F0D3813E478556C42B3B0D20A2B480A020893DB4F8426C5901994BBD0DD
785592C2F33D3622A89622944B266A09702BD9746062B847D0D35BE17FEC06DE
8B2AE48C339FB87ADB6809E91011F13D31021B7AAD302918F0B5E13EA763AE3C
B8AD1EFF89CA794163401FA196652935CDCDB8D1DFA496F70CB667CDC047043C
1883DCB3FF1BF074496BE4172C46C168056842479D4E0977480F1471CB7BDBE0
3CADDC1569944EC8BACE0C2088CB8B49B7826472ABB89C2056B86BF13602D890
7312F6C3831798282F218F22F7E083070D7B68212BACBCAEBBA3DAD0558F3CB3
08DF9C60CC520F61965E410D40C537AE5E5BC870AE84648AF040494102564B63
20B057EABB182BF76B370C604B5594430024E06C32D5A949970AD3F4EF0D7875
DD49B62A3EDAA7CE77FFE3A012FE41BC41BBD42EFF1533DD48055B12669A40E6
58E54D1CEDFBFC3A230354F650E8E3793EB90EC4A7F3F16> |
5 <001C60D8A8C9B888C1A01EAD8BFB768A36CA264C2C07EF0FCE1D225322553
08F0D3BD29B117A27EF1DCEAA35614FDEC782C5A955FC9EC4E8536DA184D4A4A
A9DEB44239C18337E8C5E2B3C4745BF5E4203F34A36F4EAFF524425AE002ACAA
088259B81D8> |
3 <001C60D8A8C9B8279973AE2A4535DFA323447FF66C381E44446761984EC05
81E9D8B7BC399D42E62CE43B49590D26477C321594D0E362A68B1B3C2A7DCC85
BA3E41C4C149B56DC695D640C99080BD7DA6452EB649D89698106875CC5D3FC8
A4B5DD63B23FC9049A8A741FDC8FB361C0261ED8372D333913684EF29FCBDB1A
1311226C49FAE3951944DE2BAB7778EAEF49A9A226999> |
26 <001C60D8A8C9B71A733AF689723D44BA46DB04B8C9A6AFB060D2B793CF8A
115FADBA1169FE7689EAFECAE7C71D5F34F30BB60F5207A5006D135E833E6F56
B24ECB011ECCDB93941558F161BF4262EB2509090D689C7BDF7A5193BD979B59
12980EF15549776E1E7501CD370AE38162C4746A7A2D7E9FF6DA048BD1438810
57982403499C2D3D223E9EF559AF1B0BA29BB42C80AA2FC7BCA58AEBD490548C
F0BAAF50033605> |
15 <001C60D8A8C9B77C8917DEA7641891601C25F723E16D5EE94C0D4D1A7276
D425245EDFEC396FCCF42EBE17EE55BF0E7179709CA394B7678DEA2FF4D73EAB
E9B32C2CBA4FB1EC92C69BC0296E46D40BAD7EF902BCF5A5DADD8DC092DD9E42
87FE7702781A7199E047DF65F1744BFF9EAF88D050D0DCBE7343C591C4331CEB
1285D3894A37A9DCBA5B4C45755EFCA2E00B28E95B401C63B516A3231C5A0368
7279D2EC897721EAED4B154DD2537D0E50AF9597D144B658> |
21 <001C60D8A8C9B68CDD3B358A93AAB15F6A2DFD11792F54BA2838BC029CF5
3C5ED02D65EF7C4F342F16D20EFE92B4E30ED23C874F4495716AD996BABA9F44
76867E82538D3166828DE62B13FE3CEBEB287F7B11FCBD823ECFF5F8011A36F2
D931A5FFF736F3BC69186906CF569470F54C3BDD3163D324F987EA8F78F417C3
2434FCD59D99319797202ABDCDB59F540262A4523D4E0DBE7198BD497861194D
A6B337637D1F65672AFCE4316FACB0816B4628C127ED2747FC3185DEF374C5FB
E77E0557B582BCF1C22188F667FDF85AEB1903F8AE882E06D5BE1AB05D1BF7EF
DA03C2AD0016EDB3966BD8C05BFEED3E325ED7227243045165CB266443372A83
3D4188DD7950F65A5E903995BD9B392BADCA9FC3D8895A> |
28 <001C60D8A8C9B70A9A6E82575AE0EAAE64C5578E55CA33AC9BCDCE9DDA30
0050964971F704A7366BBD486EBE1D2BE8E9464EB9F13011AD289EA20B62A622
DCA174EA8FED457D9D508AD7AC5C13072FA1D60EA9BB97EE170DC5F49FC29325
07124B029AA1366C4F9B7E27C74D87A423FF215C819227C7C95FA73BF8FCB6B3
5099EEF30D69832A8AE863D361E1F1ABBA15893F7A28A2BC4F64F2DA8FEAAAA8
120DB01DFF15496EA7E1F18DD64A76E16F9776A423AD0F2B1EDB1CE2F4BF288C
8EBDA1FFA4AA5FA712BF369D5020370C24> |
13 <001C60D8A8C9B79D2DA7C8689F15E28F203B3014ED74807DBB4869238AE9
BFC9DC040671CAD8EFEA36F1F13023FF4685BA74782D9C815FA53E5A7B9B4113
C309B73F738BBACAF6E579EF6BF1F0B86CE5453C3DC5C9C4104DFDE919098187
53650EAF92EA9EA105E9578607B56D99762A45F2CCF786E6A8DB378D36B83189
A4E5EA626E3BFC59186B25DEC1B3DDB1F214725A91E2FA70CF25FEE912C8F8D0
0BFF5F336A230B97214650421808A86196912C3630AC6CE62CCB858997B84919
8B9EC00BB4C862ABD487EE9856318E144CCB6C4A2777255D4FC92F2F2FBFEE41
564E8E8872B88A80536020ADB2963CFBDE7E703BBDA6A267DD3692FA246641AC
1065AA085E1D35DE9C9A05C619C97ED99147E3D47032797770434391CA600450
85F212B472D01B5A949A9A9C09FBFD916C328F22F42919DF21C2697A> |
9 <001C60D8A8C9B7A15751DC3C91612776475D0DA1CF475CC895DD380771582
BCEFA5999DA603F94FF82A4EA377F934CCE0AB87C3E3979D4B01799750CEA039
25DA6988AB19C1BDEE7DDAEE31D9E751FB20409050AB6338F8790F107C25F6C9
650E5446E4257DA9F1479A0D02643C888CF828A9CF485A27EA89581316FDFA0D
28BD7B360AF0EF8F6DB9B8A3CEB28005F012134D35B4B9AB23076A30E3240D82
9318E92251BE0DE3CF6BBE2E37989E80C24C40F8C07AB56568A0E8E833C4D180
F2CB4EB98AD2478773CB94294BFAF855B905665667380AB4CC99C1123DEECA74
06B5D8A2D6329FB0E24678F6DB67EBC9747AB577FEFA53F1237485EF3A84AFAF
AAB4009F303D57084191145E75AC4F0B6AF7F09A8> |
17 <001C60D8A8C9B8293C4B4FBC984E4178194DD653DDE8CE1F940F329A55C1
81CD23EC84E5CC4B45B1D9E42A27815D06178CECD2C33D56BD83563DB453A4D4
8222276C09586D48AFC95CF28FEF2B9D2315DA0585A7C741D657F65457B5A20B
7800D7DE10750E796E64CFAC507E6DD71BBCB3D05373BC51B17734B123ACCD56
F432179F27E9C1C657D87A55A7408D404303DCA13DD8EFE13B7CDF9825B5AD83
88BC65A562E2F91EC585E57D8E241889D398C3> |
30 <001C60D8A8C9B77D5F9498BBF8DB506EA76B32B744DB7883B6796D02531B
6227780D7BCACF09598A727E9C35A0E295F5EEF4227CF6BC68B9870EB3EF9011
F2A357D726B6C886C5D6B5CB8975383203BFEE2F311CA2890DAA9A0EDA2AE42B
CDD538D1D9093F51A3A7A0FC3446B337620BEB4605E795E7533295FDAFC7C107
F5C6F9E85855> |
22 <001C60D8A8C9B78256C12F260327AD383304E51B970C0B5C5E53877976BF
C138FA16E53021B982A3921B960CED3D8FCA880A9A73EC4DFBA1CE8DC9981731
BF3DC3A43899FC396A482024EAFD88B2EFD6CF7B06F0D4A07AFBF80F2574882A
D51011CBCEC34A493F365CFFB83CB5B6E2597F5E3C438D7772711C01FF95D368
06FD67CB474C6518D97DEA69AC9424DE65AC658FB82262C8A72CD0803F18BA34
D4510098AA0945FCE876E37781E8D1BA85C144DD669396959FA290620AE6637D
8D219857910304D9BA5C648E0BD9A063E3E9085BC5DEAECCA62CB7055D5FF3DF
0F3945E2F793AF716C58DC5CC269E0C2033FB19CDA67CB1AF013C53657B1A206
0DF0AD0BEDC0008250> |
16 <001C60D8A8C9B784FA6FF1E892E90138D827E6B73705DD2B2DBF9933FE88
F31D434F1C395A0AB1B4CA1D418363479E1D11AE56C0117B90DC83F12FEB46B1
BFEF5A99F2CCA64945341FBC5F673E5EF9E46ABF3A24CEBA19CA2B9B0E780A46
E0DDECA26E65C5EDED4C52E68787328909CD674D3A7A0BD699E87BEB46AFDDD0
849B7D5E634C0CC831D52EE63967BD9C330A173D2393D7FBE806F7B247BBA202
018E9A5CA16E370B7763BEA76FA5849340D394C011B57649B28320E34DD0BEA7
93573B7078AD44C84B8F08AF9902D838A3239A2716B50BF7080B050567DB7CAD
438587CF2255F85B5685727F2D2878A3D9A30D4F2976189D0BD770CB97A253DB
F738F6D9B028D3CE99ADC9D92C90AD76524B8BA19EB1DB31> |
6 <001C60D8A8C9B8096E372475A5147C44DF49934674636A9BDCDC0B06DFDA6
19CE1844BE076F24FE66C2EC12F81FDA4A8438CCFAF3161C96CC35936B35BC04
9907EFD4EB2FDB51BD3475D521D7E3E26CB8C17D209C468F360CA01944875904
80E39E399238B503263DFB2E8928133E5337BB39AD3748DC375D4F4CB4D85927
F13B7F995A9078222CF228662CAACDD0E11466974AF293ABA47DC86E7946C4AF
FD490E92E5D9FAB13EBA6276A3044B6D3E6ED1DDAAA9CC4> |
4 <001C60D8A8C9B728C5AB3E972018698A06A5219A927CC8CC3B5BF93450AC1
67E42DCCF5B74A59EF9289B638A68A9129FEF31D313F73BD8F5C092E2830ED1F
1FDD058796A55FF5D0581DC04A4BF7B9174EFA98A84C646B56A211A696E1BEF8
DB76599DCD4506E0C45428F055F7AC5AF0F8A9E01610BB3217D3E904FBDB8E88
4156B613BC76D1796E5EFC690F3B81A> |
10 <001C60D8A8C9B751D51EBD3BA597B013560C57BCA6AC8355E84DF39C236F
73C9D810D7376ECCA35A726B0538886F6A8FA10FFB92C16B0C94941781B87210
24989A06C4097B302086BACE5322740FA227E39DDED865883FAB9C8C4E22366C
66BC522B6D664E85F5F34EE2703D3A10D376A370C451C8B7DCDDE62EDB547C97
7367B5EF2440AB42081A85C9FD2A50D1D4D073FAF6AD7F46DF4BF9F8C5F7D9CE
4F7D1C45FC7745A197B66B19B8B144505F40428288DEF7B5437830E4C3EDF2EA
741697DDD714812E008B42E647C89F82A7C7975EC74E3DB00E4FF2CEBE49B7D0
A39E27F8FEAE4955852C171503072B4D062439271715C1A138A6005437A2> |
20 <001C60D8A8C9B80898F3F51DB38C763E2C6BF63325BFB57BEDB09C92CD6C
60A6D4376CE7332CA1C6D687B2CB844ADC4AEF2A2B076D778557CD2B86F63841
4734AB702DC1729DC1D23C91C5E03B4DDE6C42E30339E3316D5C6C5B7540B67E
46B27B4F53444596F578CEED237E978F6C9FA812B8750950> |
19 <001C60D8A8C9B7452647EB8CA94E71C39473DC249DAFE3FD63925F8DA842
DF0B1D87358802C34612BCEE21F54CBAB47B70E0B0EDC7C5671556B1AC086B5C
F792F0B34A5D3B6F08BD91AE4DAF8201BBB4379970B9DA9E420660882A6EA590
4ED9BB2A9E8682A770E380E1DE84FD99130DD2C79B024C89210A4D794994F1D5
79E3FCBF761D46DDD362BFF07A4CBC849099064503E117A7EDEE8F1F1EEA1009
4C995108CD6BEB3180FA922E742BF87AA103675699CEEA11B71D68A045B3DF16
AE87367081190B020D8F7E77DF620BDE28933A277C095796FEBB243A560EDA41
DCEA9DE1D101773CC2A252DFE66DA39F75D309> |
18 <001C60D8A8C9B845C87491A9B0744C17658644A44FBC538AED27EE2589C8
C50716473503B9F9C907BB2E9B82D7B7E239649759901480E99565B3FC74F0BC
69132589078F84DD76515671E248B2421B3B0385F86832E47808A22C4E713679
78DC37D5F7805F8EB443D02CD5601041A50CD1BFB4F2EA6E3E6D22143DA7B1A2
D93212411993FD8ABC9D7B759E> |
7 <001C60D8A8C9B886222A37F53DFCEE9EFEE50B43C3BCA8449F28AFE4ACBAC
FB961A1B3D380E6F0260DD3021C94C29243CF26041E33EE5CF334BB7BBCE4EC8
451F84D224B4CDFA08FB78BEC9276EE17B3CFF7C1BD99B4CEF4E96A3D1964739
BFDBAB199E72ADBACD6FB116F5CD71A33872BB064B98FBAA479DB9189D6F9047
AE7047BA4D86479126C44070D5F9E83949D93> |
29 <001C60D8A8C9B7F44ACC94F39B2F86B0B65511F2F46461A4FEB16F54DB59
DA3481AF213DF0A558FD4175AB3C6B1B1D56594E65B164E5F9A705C888DF9B6A
B22483C20A1D855278EFD76E44FC5AC6F4D3D34A0DDB2AEF78A5CF57B73DB8E9
4FF455DB48A0B5387C39F0958CB8033CAACBDFFBF85742EF0368950236E99B51
29840C6ADACC3E0B7A08B3427C846D312A7C2707B61C566069CD3701FAEF584C
163AFD292EA65CC75B83F13C868943783B6B6CC15AD41EE13062BF4B5CF3FA59
DC9D92D896EA0CB63F42216ACBC7E8F7A38F651D05F74FC452501EA82002A6EA
E8A43EA729668797CBC8DB2EFC1AB7401BF68A18206BCE95A2427EF04DC40055
511D2363F3109AD6AE1A29F4B5CF8E398F06CF35FEBC21AB88502C4C0D1412AA
1201EC3B3F52> |
12 <001C60D8A8C9B74F366205B61FB4AE8F24182E9567319D552353B1CB9C4D
B842E3FAE92A79ABED3F66307CCAA023AF0D2B5C51952296DF1C05264EBCE26F
6C47B53B523BCBCA828F6C606154263B90795744417C7FCD63398BA81D36847B
7EB53CFB66798E58B915FCF5825FFC5F671AC85E6F754BBFD288C7D3E9882FD8
1DDD1B00C6CAC430F61D3E9E02526D72F10091A6F6DCECBFF7C50FBCFE777004
06730C07231A4284E93C5A58F5538FC65E6A1D6E7270E1F8510F5F4D93C7DD67
4BB1FC87459FAF0A77930BC2DFFB204D7DF9EC2C9767F936131618BC5CAC6AC8
FAF8F7BE56D13558F3ACFA0F187D0C619C2FA2AA3AF6A5A6FDCF7DD0582F2A7D
FDD3> |
8 <001C60D8A8C9B80D90626602D9043ED8B002D983E05936ECA998ADC7FDF1F
3A31B2919749DA843CE59AA9510FE962628782C2D01A10177D07C7B9C7D769D6
870E5146EBE371BCCDDCF50C2904DA3B9DBBF86F62D4D0C5AE10237D2A050886
644C5B229D20E751F83741A30E65870097D8F05A7797CFE4FF04AB43AAC14873
3F16AF7AB283166DFCBA3F80F225137> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HAAAAA+*Minion#20Pro-13045-Identity-H /Identity-H 0 [/HAAAAA+*Minion#20Pro-13045] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNE+*Minion#20Pro-13045 /HAAAAA+*Minion#20Pro-13045-Identity-H findfont ct_VMDictPut
FZJXNE+*Minion#20Pro-13045 [9 0 0 -9 0 0 ]msf
106.04 14.4 mo
(\000\002\000\030\000\031\000\027\000\013\000\016\000\033\000\033\000\027\000\031\000\037)sh
146.02 14.4 mo
(\000\001\000\005\000\037)
[11.9358 2.08081 0 ]xsh
%ADOBeginSubsetFont: IAAAAA+*Minion#20Pro-Italic-13044-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IAAAAA+*Minion#20Pro-Italic-13044)
%%Title: (IAAAAA+*Minion#20Pro-Italic-13044 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IAAAAA+*Minion#20Pro-Italic-13044 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-62 -195 1.00992e+08 1.17835e+08} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 53 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 53 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
5 <001C60D8A8C9B63300119B249D3022CB5BA1CBF3F0063826CA8681AC9E5D2
015BA0429580254636768C2AC2B0F9A79B5CD6D8213B5F5F47EA450853ADE334
B2A833A4BF8908A07BD49A5AC97E79A4C46C69D051523601733FD0DFF43B36DC
04BFD2E3168FE8BBD4F1180D3F420D040B915034C8DE7198CC96E70D90CB98D4
E3984170F31106BD449A5285E797BFD9A4AE2EEB4B1FF7C2AE60B13FDFC7337E
23D2C66CA24377548CDA8BD08989329E4FAA69A168AA5E8DF0584149D04C04F3
B51E6998628B7E80E8D6473442F8BF13A44E50A8FBCA82D9CFC48D466E2091CA
F9EC6B27233DDC59A17FF38148B1014A9692BC97E9A1F3FF6ED92CCE548E584B
A3A8DB4B641D2418557D8ACCADDD8FE5464539C08> |
47 <001C60D8A8C9B7B07F04B536A84E670FD4506CB53CF62FE91953D10F90B9
ECD14B0C65DAC7B24D397D15A3B3A2BB7353805983972AE37F7E9F0B29C1FED9
B8B3F01BF5E28EE8D3C7E97380B542238F4D775670FF1214888BEC614FC57BC5
76B8544A05D8040889C49AB55714BA6AEF17BEA921D26C0F7050689FAB71578F
B915D17FBEBF68F3278A8E290D73A7FC20943F0994ACF5E31FA72154F8B05AB5
A38DD8F19A04EFA1197455BBFA27DFA03FECE26C4F794784DC65794C9CA6E9D1
61002BE622299FAF0E04F3> |
15 <001C60D8A8C9B7A8F22C375596A28CD571CE32A066025DC17346B577133A
97E4560E57C08B3CD28965547B1EFD23278E5EC1FC6F54B5D6AE5FF6971B349F
B192B14277A2CB8ABF997E38847D5CCD2254718D92B7DBDE1214F92DF60864F1
A15AF1BFDAF4D57EF9DEE4489612AB2EE98AFF8DA7892B1DC6FFCCF013A7C5BC
D33885620964BA2277BFD9D75DD6DFD640A7DBF258145F7CA47FBFD0DF6E8195
9A7D15A013FBD4F978A1FC16A102C1665E135671A5450215F3612A630AD756E2
43AC0085EE769BC17D0D1F1FAA7081BA7761C2B6F3785FEA3B693411D9032650
1753FB55A632C0DA7238A5> |
11 <001C60D8A8C9B771A8F4733A574C111DD45B6D1590FBDFB61D9CEBAE6969
FEDC589BF23FBED278D173059897B2C3758BADA61F6CC6B3E35CDF740417608D
62AC0219FC6DBADEA56B4447C9D7C74DABF06A25E512558538FBF34CF9707704
216BBA554DF9D16D7BA3E1B007BE22B49A050F6AE5C75EC97BEF3883C025132F
B6C1727113F91B3A6BCF5C0DCDA553022133DF078DB29D5900D5DE1F436D6682
F2EDBD8F1A28E0EEF0E561A97CBCE77AED8E5A114B5BAD5A6B21E71D665FB0D8
CE6D6D3672758E65F7E0CC9640CF76034F53282CC1BFA6A6DBE0E1DFFED1AF6F
E93D02180AB804715A02D6CC9BB8FCB8C3A095DEC897184080E4FF551E01DF> |
43 <001C60D8A8C9B67106DD25224790E1635EBB71D9C95D4B8CC6E933E5B7AB
8066127C121319CA5FD7F9411FE861CD59F73A7FCD36DE5CA1B0FB8ACD841763
A365637321B84A8F9BBFFE7FED208AB32DBFC2C544B4EABDB4ECCF60F7F4CF37
BF5AF7828C51D6951A455FFE553EC177AAF4F106643B04A174B06411D7870E22
76CF392939B1DAF750AECD811E3E2554E8E217C0EC30A6F6D8B6FF9A72492CD7
77524B37E575C15E325531FA2E0A746E65099F0DE66AB29AD228AD158C1C4199
53A4E2CC29A0F06F40F48B8A910B229D19315382ABC8DFB6A100A438D1DA8C88
EF94AC7FC9E70DFCF88745A44BB4C5ED9A89395F970DA42661CC865D1132BA05
868D03A5ABBC513A91FD516A6DB222908D3862CA8ABCBF8D265560D430FD135D
D3AE91FB68> |
41 <001C60D8A8C9B82356E2EBB391CF0BC5EEA7963C993402BC9C34DAD8E5BF
78AFBAB082AD483BD80296F80254F864BC20E942DD66C1DEA2BD01A4787862D8
682AA4FFE7EE10B01FAAF5BF5C47476C3CC5887DD6B8D0C3361CA96510A48D6C
4206ABDCA1E8704354DB225E2FCC9CF842EE5C5924D9C5ADACC71AAA03ED3765
AFE4564D102ACC224A4031BEF9CBC844EC7165F4BB0027D0AEB59A84428F4666
9D3B110445EEAC2A61B69231BC4BFB6769394BE6EA64B756ED6CC62A79C121C0
87F49886EF9D34977C0C108B4410C781490A0780EE3C2A8BD014C8E56A7337BE> |
18 <001C60D8A8C9B7AC350D2622A70ABF261162A3653232198F1E2381DC7CBF
7D74055988A61D9D4441BB0FD2C900D109662D5A4132743825C3124377EE324A
76B68561767D510EBD3BC81F3707DA123F6CE7615B6852213E24113A2D34F8FF
6A95F770F4B3A71C79E5DA1CA56F5F07F0EAD3EEA1394A01B5ED8F670E3D32D8
602973870B2EAD94E9B9B6DC4EE88A4858B71FAEC1930483AC47348DD0C4A0B0
803FCCDE332222E1D50802F2EFAA337DAC891E1D7FA97B208B2255DD0620C4A9
EEACE188657DD9E28170D6E50DD3D7B65E2465E4E61F041D61EF5B700AD9739E
AAC284CBFB3AF3CA2A459F66> |
52 <001C60D8A8C9B8707C25> |
8 <001C60D8A8C9B795A0D992556025B9DE9F10F68FAD6EFC0A2F1C25EC611FC
709D50133BFB41108D9BF7D41219D03DBA7437A6754A008D158775AA98F3C5DD
4EAE2B7929FD13E26A7DC20E1AFF0EBDA9069E08F33A35563E647A6171AB5BDB
15B5D73C67C5917D25F63EDCBD27BD5E9AA5CAA6D5A6C92B0196FE0AD9C1E91F
023782CFAD7C3C07D850055515BCDD89FD9BF16056707C98E9A712A63410FE27
607C70671B852F463569244FBC0E9E3180682C3ED638AC6B2DAE59E7DF75107C
7D31DB286FB2BB85761DCBE0A4EF6055575FC4037C098F4C4368B50B3A265E47
4562DBB3F2EE48AFDD112F4BF92C8F67E66F5BC759AF5E9ED86DC96160887D61
A6DAC8DB3879A10D6EC11E34C030E309B215E7516E9B79B6CF1AF5D5FE93EBC7
ACDFE5639E9C2B76C4FB4DF32D418AE5F2703F987FFC6877ECB3CCAE9FBD5B07
068DB2C> |
37 <001C60D8A8C9B7361F0220D5690B1C7378ED623B821E30EDDF480D5E6764
3DC866AE280903519DF69BAF07DAB69F98EB845CA4A8A5B908E33D8451DCF851
0D31C19712E9D1D3CD962FB8DFFDF0C3C1E1E2F39459744C2886FF839BFAF76E
543D3D4699B5C09372E62D39F2D54C50313FBB77013A3C52A5EB0D9B9019CFD6
6C6753D93AAF898BE5E1CEA31D55260FC085500305E3584DFDC085BF15ACEBA8
B34CE7FD8C39A99F489CF19F2C5773DC37B195C55288767B0BD8BCC265EF32A6
A1C5> |
32 <001C60D8A8C9B66A6BB3EFFE92F3088737A7E16FD7B93AD3E1DDD4CC9EB5
2C052C6BF7B36332A4B9EDD08E303F44F14CC70721B1135CC6356DE0D8F9DE81
0D86FA2E4EAF4934D8AD9363904FBAC104DE03976B77D7A1580015810874A68F
3D20EEFAE6FAE4535805C14EBB1CBFD82E466BA7F47A909BBE4FBC1FA727B7FE
D5CD7017F69430E64B16D4E8B63E3056EAB0174C27F1882706569687218B5B76
BB2777F23D13A4D964B54627B536721C145123CB9A58CE265A9AD2156D7BC91E
C737FDB8EEFD2DD99F8FF5ED289F779E0E2FBA1CDB03837040D1> |
10 <001C60D8A8C9B7BEB141C34B1F04448BB851641388B7BCF77391F7286674
F4C70734172721EF9ACEA90B0724D844247F9AE77354FF8593503D005F7B7328
F6553538C58AF931FD4829D934B9BB5A7E512D5B050ADF90397D0ECBED8ED3F5
6CC71F08E0E054F65E1FA307C22780DCA25729F9D4F52AD8ECDC14C3F4796E0C
3DD3D2517D74B2E20AE3E6AFEB96D946CEA1A04D77AB2D91AE3D7E12FD223FFF
9DCD6541C6C5045DB5A6882364110EC0DD7566CF1CBD1CD537EE2E1C4A521D0F
3B4164609E12D9BC769BCF8A37B28822A00CA5B172CA05C0DD1BCACE2D542F82
1657474907B1169526BA31327518E538CC653996233D084623ED8F1E895B0868
CEF0888FD4579C9D1E57059B1AD56AF19BAFA761168F82E73D0FA4C184BA14> |
30 <001C60D8A8C9B86FAE166DBDA21BFB2988B5C4436BA42B37A641BC005F39
C7EFB3FDCE7F3235B2AD99CC315384980A6C189D96F89F1765F223E59F59355C
714E72271E60F1879E4BAEFF4CE46BB07B60346CD6B855F885E592731D96B5F6
5A0DC44708AE99C522D0C6B6915C0467BF69BA68FCBF90D4F86E8F22E7A8D302
C8AF3439B8F3AEDED7678F9AF1BFFD0660462869CBCB5BBBFDB9BDE120DA455B
82B67D3C3527B8679844AB5E09EC9151B39A2B374060> |
16 <001C60D8A8C9B745265119C88014C6E9FA3747D42A70457476E03942A47F
C749797411896779BECB95D97C0920BD5DFEC2D88105641F3D9CF5F5E94ABE8F
1A850FD5AFF700DB421F73995D3031EDDE907373AA8BC563FAC5E18183D89763
310AE91AEF0BD82AF2024D06624C3B15D8CEF80237FE151225FCCC61216528D5
0320124A933501351BDF44C024DF93B88D25C9DF00727D05BF64AF80776D8C86
0BC3BEF734C2EEF83E3E0CAA882FD5C350813704AED16E5BC85963DCF5284232
C09764B5BC116173E3BA636930902F57763EE682C8903B8E368BC33CE864501F
D23CF7EBD13C20D6> |
39 <001C60D8A8C9B714A56AA673ED2A6AA2EC3899CB8470DCC44ECC93294664
FDF821689F81CE709ECA08B7DDC73FA43F05D00EB59055A47C19D15B5D8A6FF4
D7B0AD9337A25ECF533C77DB3E9E721097AE98AB190E48B382DDDCBCE5E28E53
4F5A74C8D68A272E156A7057A15D60262EAFE31DC1298FFF6007ED67414BCDCD
162505C0EA92CFECA735347BE8AF8E45107FAB74032C63D993382BE23DF6BF70
391515E1498A1E3171B91574F1EC99DC0CE255ECB58AD3E79E97111115A44FC6
4EFA2D4D3BE7275C6A6C34F3A9BC4970752CC902707FD51BF3B5A4A4> |
17 <001C60D8A8C9B7A66FF23D20619A2BDA7B38C953F306643329F092648AEB
6A3049789AD627AB7C81FDBB850182E816D58B7EAFAFD0919183A55E7D0C6047
27977B786EA8632ACD71690CABCF684E9D36C353C670882CD4258EAA88C78C92
350629FA6DE445E144827CDF52B01A0D7BF5ABD9BD3E075627AA848E63593183
95450946B6796BD249FB153CAE782770E73D88D915703EFB8BB71FA37FA5> |
1 <001C60D8A8C9B751D508AA60FE1D3A3738BDD551E525D945895D0FFEA39E5
6FA555BD66810DB3DED3FA87EEB6691CDE370BADB242BD9CADCF3167967FC776
7D1> |
45 <001C60D8A8C9B7B5777C6D40BE067346990EEA488F5CC2C243B29EA74CB3
CE9CF12F3844E1481021E0CAB26464EB56433721B0A5F998B4030F665E61AD9F
A3475693E386E56EFAF3E19F8280D7AF627FE605CEE094FA26A8D73F417B4C77
25DD17E95A9E745CBCEBE8F7EC341A916BD9E581F43DFC1A88E3A42671D99320
F21156DB0FF612607B57CB0523CFA5AD8C52687F4508018E3DC8CC158EB23245
CCF7287B06F250BD8747F88E89E5F78DD596E4D310C7132F8E2BBA010618742B
BFE1CEDBEEB089B5905608F1B4FE9EDCE8C74DCF39BF8B2FB4F8B5> |
23 <001C60D8A8C9B7E1F8B812E05503CAB737E1ED19B0119B6304C051C2A28A
549164E3499C9E87557768BEA8C0F9AA6FF807CDB37ED35B16D2127321E9D9E9
7C095E70248705E0788E76ED74B937433D7451F09CF3872A563F19E0390B06C9
70B7C253AE458A87A60F8A9F4803B69F0DD0DD1E326BAEC3D601F15CD0584661
29210130FCB98E15ADA91E968FEBCAAE75A1745A7E00DA3D1ED7EF5341DAE869
53177A439387B4660F2DB4E44DA63572E0A4837F32BAFFE48575F2D474CF74AD
79A1DC035DD8488904E63C885628CE5B1E50496528FF3754616CE82CFD05A6A5
E7266A8D53696C87F94EB28326CA3E7BA3482EE3FE099C60D0A36F221554CA96
4F68F4E7DB1480> |
14 <001C60D8A8C9B7B5777C330A121A09180EBB823BF3E1796BC0BA310E255C
2E038D917DC194F1499D29809BBAE5A02C17CBAB626109CDC32618A341662D70
B526AF0F00011EC12314AA589D9B1BAB1A767A65134E923C9AAB429F94B9F92D
CAC967F00A339D5D23037B64416BC5773BD2D8F9EAF98B780C39A63512E0BBA8
1BA90024D414D54732BEB2E05F62FDA364451F1E972D4C0E45D26DAED1C74241
21AED187B46E7DA63A969CB42A93A1F099381AF89506AA9099799128A0AB111F
C3CC1978229F8E412A8004B565B22E6C42FA6FE114FB47AB04B03377C298554E
7FE83003A2EEB374CBACE3A75C6615CBE8CDAA4A2312F08F2DADE8BB2ADDBC01
419FB2B382CF5001AD65888F0B84397995E85BC8E04C7B68264AD4DD09CF2D1B
995DAE8E22DA2C23D4D1E5B46A75DC33A6E72EEA2DF8EA1A8AB664DC53F7B0E8
8F168D4533D7710FB13C3C06B05A11C66341F117B810A68D414A4E0C99C5115D
CAC62140F3DB4754E1F2E74B0D838BB114DA> |
3 <001C60D8A8C9B88B3AE29432E39E077E594FE0BE7BBAF3FAE0DF25C06E18B
605475C561CADF75B983BA42937515906> |
6 <001C60D8A8C9B615D1AFF97B95A18697B483E00A58F4647B3D5E36D637B75
950390107F2954000F5205C528A8F7E56D1A01BB4A5E968C756735259E005820
14679C47793326A8CD88A38D6C5A3B41234DE1B3AE8A20B1E5FF2DC516A0292F
8DA549DF83238EFEAA6D4CA6E182E8FCCB04B0D86E62B9B7066C2434CB6EAFD7
5693012BAF1F756324F386684575CA7C8D71160DC1936C9274B06EB4BCBD4B32
CAAF34790B634E1EF7CDA1E49FAB6FF0278723ED3308E3B1E8DF58BF0F9FC0A2
98E9D9542497D321F594E8C626D92E3AAC401C770E07F51CAB634E956EC5691E
7F2E67489A5E6B62FEF228FCE743FBC805E32BF4BD84A4131778E37489CEE095
5EEC5C651E8F90F33D9B7AE572E2C20862697F357> |
35 <001C60D8A8C9B79D2D925A1F6F0285AC74776F336A85610D914DE80B0014
A0C5B32B62C2225AB1576773BA6CCC4E5C290DCB14535AA3723A61702F79F48D
A81F8FFDA130AA55B6CA31F9A7F00FBB0D219F86991DFD980886950E4B1EA736
4FC7C83EB7D39A22173F448637034F6782666127AA4B6A584F99CFEC921FB292
6957BFAB61EB0AB4EC4950C8CBAE3A54EE25F57378B7800B961B3EF5DC735465
91685D3DBAF3> |
50 <001C60D8A8C9B7EE7C16105923E9B5F61127592AFDA3DD35BB7CA6B2E3A4
38D8DD1F94FC01CE71D8F5FB01BA64CC295C1C770F15487DDB14A2283136954C
3CC5AFC15F8A5706EBDC337B1EFAA90B2C6583DEA9C107D5AB57759441B88136
5E42EC8ACB4E464E59480F4429B238478ADDA0B18749CA3E062FAAC97DEA63D3
F602E072A4CEC699814EBF649DAD8209087314C80CBC91CDF868219F110089FE
7AF01571407C400E4891AFBFD35117C3014C5F050646094614D295B9AE70D154
11CAB1658D1FE1CDDD5C0E9C7DC6663B2B4AAE5946C3E6C02DF599DCD1576DF8
C4EFA20A2734FD9F3F1A8AF651435AF499623210B958C64A83798C33E8EC59F8
253D93EAFB> |
24 <001C60D8A8C9B81A1498162B3F71AE3D73B14FCEAF348B8A2D4D6E450D0E
86A19F801B8D15715EAC6776F4FD783EB860853EEA11487E2D0A33D593481B7A
5AA9199E70F3FFBB38101D36181FA0E3B874AF4939C61C78DDDADD865441907D
C227F8F7ED824F81188027B05AB87FB1C6092ADA45C8544D3951C3125700A3CB
AE4C736A8F8915469DDFDD17BCECC39B5CC932C64CFE5AD6EC3CB0A357AD2FCF
4D5C4746A2C00263190BEF6147C7E1E30B14C8F758C5FC33FDE1F308A0D431F2
02443D9C8EE21D5D251610574F94CB436B160BE377257714540830C474E084D6
E746457EC4DA888A107D4E190C37FBC6CE2906> |
42 <001C60D8A8C9B821B329B855BC886487007BE16112B078FEA09B49B816F0
BC11267A7AF50AAB1E85A8A648156499F4F01C73CAE67FDAB2F1173BB26F3573
7B3B5B0F374231553F251959C1B650FBEDAA4D0575668DBED7A4C89AA837CAE6
F4A1B444DE4496FF9143EBAC67A9C491B91D3F9A755CA3BD58F9B5DC34F08EE1
E1C66A14380B6274BE45CE26A4497092DC00247D549AE995440C0CD6279ED860
A774156D7B70F0C304C0768570FDBDFF4130FCEB8EDA179F6C669893D756C2AF
A5ADC88CFFA60365C102267F1C97E6F1ECCDA75A6AF11575410E92155F> |
46 <001C60D8A8C9B639EE86F5BBAF120F514363964F669DD1B871A520BA4C30
F2A59D3088D22967B6BE5D4F99A39FABCA94D8E6927BDAB776962779B696D70E
F90A77957D8A08E9D91C1627F49F29E7C57880B0F964A0115B90E88AE2131B1F
6D42E4B61C3E8473F1BD061CDEE76D1A8C9A17522E208D08E26A73CACA451646
8E72BC39F5B306EE6EF71263389D341CFA57D201112779DFAF05C83E231CE8E3
66640AF5544E7041D7A370BC339A6B54545CC65CF67CE876A9A81086D1DEEF30
7C82FE5DB05BC9276C7DA9EDBFAF0518D7F78FBDDB1DB53411280CCC01D9E0EF
E51792> |
48 <001C60D8A8C9B7BA8F1589AFDA89C7F444045A46AF95B106658BB260674C
853F251A5BE6922FD812E706EEF7675D6DDE240BAEDFF80DC10A6D8C6FE92CB4
036D45FB0F6DAEDAAA5BA45344772050DFA7B995B485903A18E026065C1486A0
D7313842E08FBE025623928E4731BD588D3557D41B268B97EC4E7DFFA0BD7609
BA219395DF4F8222D34FA557C1AF3F0A173CEE573464309A747BB0C046D2AAB4
EFEF82E5AAEFF2AFD2E1DFD8B3FBF0BA5546B4493EA845E29AF58459F80F6DB8
8AF0244DB3FB14F91FFEBD29064CB316E09B6C1B3FD8BEA946260DA3DDA5A93D
381DF9354815FBFEFFB0F1FC1D2F050AF029601CBCECA4308532774BC1117091
65D6591139861C8FB92CBF5D44BB0F51> |
13 <001C60D8A8C9B74D93AA3D3EF41385187556BCEB7BC00179E2D4EF539A58
44AA58D1A7B92422381C259552871961DFA92AE1CADA3F5A24FB7CA4F9B08D78
46E5B4B18ADA213317D110B20B3328F9D05D3C1AE56F8EB2FE3EB935EBEA0697
BA60E5D716AE1B7B4498134F647BA6CDB5EE737C83404DFE6A25B0A9CCC3DB7A
1198A7CBCE61CDD99D88C090E6AD156577E7CCFDE0F27217ABF35B0FAFB61CB0
0C213A2A37877C220E59AF6FBED6EB875E36B913FDE074E83849FA87DB024A99
C575B56FFB5748303176045D8CBEDA2F12192B5F77490B3B05BCC21574B1B46B
16C061C4DFBDF196CEB26DED187A8AB684235AB17710D10382A412990450863F
BF66E809B274F805FBADE877> |
22 <001C60D8A8C9B7BEB14E136943FD263B16123BF96D3F21C348F27E432657
B8402224C90E7B8195C233762F1732F1552403BA73B3CDE6992D794FF5AA8710
951824BD9CC3D23396A10218BFD0E11B3506F2E9C0C3BAF0225D02D73D3034C1
59C18A29DA4B061E0BEA74C5C9FCAD37284FC79FE4394A10533E787C27FD53AB
F57F42CB0A0BBFF6E2EBC436FD704759B0429EF73C465F9F9413786CA49C3DA0
1BC0625CCB5E89145FA89C2CB207DE7D8311DAED6D3B657C3770479F3C315B> |
12 <001C60D8A8C9B74A3EAF554F9AEDF524131E7C3CC4B12BBD28D51FAB602F
91FCB916006CD1B43B47CA251D85AAFF9723DC7FF7F62644FAF1A25D4728C21F
FAF1C48429E9EEB5676D2A9E020BC524EE87209EB0D4DB0BFF913A555AEC47F0
8B9CC628B5452677F4198901114B7C3AFDECD7F6DD0A4183> |
21 <001C60D8A8C9B74E6143C78519E0FD0F6BF603C5A1805E1E329CE9A31627
A5AE05D02CFCE614D83973480989D132286E41BF9E56D6150C49B23FF9A9ED10
03B8E4AE6E1B0BA9722DCC335ACBCD030F389F576E1A0F65D8333963061DAB2C
C9282A0F8155CBB0928C04770572F87E51121E9EF955C76D934130AE7F8CB8F2
4C2ECFA9CAC183A719579EE10AE5C07E9EE3A9D657972F15D6A468E26086D059
795D4588E046> |
36 <001C60D8A8C9B665531C87AA838D53E667F5D33C69987B825BD72B70707A
4E7448302FB2EF0737EC518BB6B1876B4DD9FE3245C92DEAFE497E59C3969142
DC88080992CAA328CE434FD333B33B1071F6A6616A7C616466755611300FF7F2
44D62A03075CE181A2FA4DF116DC10D9A21390866194575AA98CD521A378D385
0D85D907B604631376660D4D26F9994A594ED206A30FCCF8D51037D6E7B6ABDE
9DFA70F52FB2ED15AE0C849608D42D807F8AE479C7C243B1BF869D9CDB351C7D
2CBE72B4D7307F43AA92F00A8D171B9F9DBFCC37B7EB5D2F188627DD4AAFCACE
3B1A47CA449638B57F8625F87A8EBE673E8307D7B7748A3C6BB33DE773227140
6F52BB0A5A46> |
31 <001C60D8A8C9B6B84663B048187D8193AB9EA19E52CE65EAC6DA0034AFE7
2DE7BE5506470D9EBA848FB595D1A592A58AB371948454B02339A82C4C35FD01
5211BEBA57143EDF8C3DC3DB42D8252FC3E03FC2C51D5B1B19882299909BF4EC
196E40A9F100F41C78535A5CDFC4259108BF7F4CF031DE6170714E9B26129320
9711F7817AE3F90F91816D842D6EA8465FEA0C99A188FCCC91FD6F93E9A30F22
1A20AB46836A22A41A8B6ADB058C552358310A65BAE4832B6C8298A620B6E0A6
303D7D9C2877500FB25DC1B4F616A936B82D183CAC763B5B053AF7ED94D447E5
F860BBC3B742F21E9BEFBA2D07A01A63CA2A550A83EEDE3AFA74B990AC081435
8589F02314F00D6660237E4DEEED7D41F83E6F3EFFE68FEBE538EA3FCE77D4D6
1AFD4E477819> |
19 <001C60D8A8C9B7551CEBEA1AB32C1F33C29D46A6AE50E68D3C2DBA82F5BB
BCD26997E18927ACE821D87E4EFECC98961344C853D527CE2A72A36DF58C7542
5B9C42472690063E7F5424EFC12EA4617778D5ADBF63A4EE501BB148FE756A83
7433DEE7480FE9713ED0A2239BC900235ACBFCFBB3C5B054FDB3F4A64D1ACED1
707E247411054C99E4CFD2F3DB88AFAE7106836E91F6F4CC6801BE26CCC40135
83D2124A07434AC88EEE837BB9863F58DBF4DEA2E234C81DD654564D259C2FD4
A82EBAA7577052F766B4A5DCADC04205DAFE53143899A78857D743778B138C41
72A3C997FB4D6CFC783AE72F8CD27D8DC38F9054D9F7B38E050E861AF7B75317
0083C83EEAEDEADF77F0EE> |
25 <001C60D8A8C9B8293C4B3D36C4AB8C78E0295A53E6C38C7F65780883D3E1
491E1ECA65FAB138C880958BFB4BD854C0C54FBDB9B5C6F4BB5AC540985A6439
5EB482145B667301B04F2D2AC782D33636F92F9DDC5AAC7F3FCCF023B9D7D4F0
A1B3251986AAC2AA79F0F44BC60BB4C3D915ECD3DF993F487E2DAEC29226679B
4F45C8E7D1288B890A4EBD300490A2805168FF1B757E1D0EEC28705A49D78346
436FD8E891460349077B5B7D1770C11AB468E1306FAF4EA9C08AA240D3BE71A7
D67EA0167DF0E43F1177ED667EEFC7C0F229862CA37D66B8F828681073D54F71
6DC992C8B51D1B9836820DBC29> |
4 <001C60D8A8C9B897E96276C27790F9CCCF49D62BFF0E64FA59D8442A0E3E4
8A2EA5D0E435055E443B0614AF386E145E9> |
7 <001C60D8A8C9B6699556663B2162729397B90034F5627A68ACC1620F8221A
DDE073E75B4F7846452A98C6D9D06CC3DF393A3E8D9C35113F16257204BD60DF
0CE6D5E7DB9DC574224434990E749CA30BA04E5D607826693D220FA1D6BA9DF9
32E2889D1BB23728C08AB0FBF0C1903414270A14CEFD36F553C0744454F09A99
44DDBAA2A7ACCA983CEE0A425F9BF761C0B635ACC87DF7FA1AF6A1F44972AAC1
4E86CC0BBABD25E73A1> |
9 <001C60D8A8C9B7A59EE91539D8BB9F26D77A2831F346874C7AFA89583C3CF
4EC891FFB1BC9F4DC524F6C234B1827F141A56D9703041A98F66F3BC335E9EC1
5E1C43556344DFA3D47D790EA9879EEE4B891DC3A4C764E6BF59E7F2CA4F6C31
229C61B899B8DB8B6D21A5D15482B7BCB275E6BB98FCFC1A1A4B1B1DC6BC8DA9
5990C86E23294E57B2F2AFF05A96671FDD861E884E913446597> |
29 <001C60D8A8C9B78FDB93EA14081199A9816ECFBA845D59CF08F4C74256BA
063148833A8772F50268F61CFB5369AB37EE1DB803F3ED00B22D8FC0697E7218
E70EAD43D7C668483D330DEE6F4ED508AFA535EC8A83324B8D275316FA02C7D3
E264692F21BC6C021A919B85486A5CF41E5C4D54E2B38C498821E10DADC4D0CF
0F1498A56E531AE9D42A3E0EC565560728C0F99E176A3D197779D1394444D4A1
24F47E00FDA22F282BE3CED72F553FD7FBF4D0E93E3D7522664BE7F43FF3B0F3
B2D99F3A75F4907AF2BBE4177B256C695B> |
26 <001C60D8A8C9B8151C29C0A4B7F0574F313D0E54BB73405FFF9A862FC584
CB2725BDB7517FFD24C66E2D8E68F45B17EA91C7A01B7CD0C38255BFE41EDC86
AA21AAB573DA8688805608CC33A8F6397DC4D0B9C65DA367DB8A47A5C6648918
C4DDAAF8F2B2DC7C7480B044B41F990B97875BEE0EA2B9CE1FB9FAE138E16FE2
E04410B3B84231AA020122A19EA27C5A10E4C775008B4D8E9E076A8C731EF48C
3CA435857839733C9B2125D64EE4A3673BADEC6E5D5AC7BE3689776773DCF536
3ECD2D61> |
51 <001C60D8A8C9B82424A9C3A296A98B1680B97CA98E0B97EB9CCAD3EA0FFA
27524A2A020B6D7E1EA5A8CAA6A05F825C4F7E94BFF9CF07D0A9245B7461B595
6CA583137060CC77055E6A57DDCFAE63BE5F5DBB73E9981326DE2D33119709CB
AD3A03F915EA66A81FC1FE41E2C2D0E14BE7BC9C381005922B669C8C6C54FFCB
DC1A1E6B15C5C923D876D474C5A181662B8272655310B86E6C812759D2D1A715
B539B02002DE9E7D3138C34CEBCC3100FE8C33E5AC4B08ABE1356A086A87E5B7
89B4F00F7816431B1D8059E5708BA6041B3066AB2A9EAC193106994EA4E2098A
7C1E83ADBCAF09E13C70840D10> |
44 <001C60D8A8C9B7E897E2C9A4C9569362C38DD47A0AD6A4C8214256FCB3E7
10E591C735228F07B46BF927C086A61784D341472F4C30DB1F1839A2EB7C08A2
94B4665B4EC2877D3A6263DD44D3F4609CA7FFB985D61FBFC370BF39AE62BBB5
94C819C6FC9FEC92AE3EEAFB704822CF49665ABDF788AEA8D906293F3BA589B5
CE5F90F7E8491B42BE572B9359FDE317B0DD2DE50B8C289BD0168827B1DC5EC0
A829668D6F0B60734B3F7FB909700378A726A03AB3B605066485FC83EE09152D
A3FB6F534F47EEFB2D81CE31BB49D073DDB57C1F0B01F6F07515F8DA3B44F779
480432E7E170CD62B5D2B8AEEC4F295DBB0F507B682D6AB097A43AC43FD3FBBA
6E3BE2DFC3D21A2E52A6FE35933B5744542F9679143A41951B0B77240DDB20FD
3AE246A4CE6166E2EC4F8ED6E14814792265B4F949C3FFF73CE392BA618A41D3
9296896F602BA75968A1A4D63577FE67AC1803227750A7F7C532E9B2B3DB3A79
B8E01731F0211CFAF84ED0F7> |
27 <001C60D8A8C9B826CBCB86C6AB0E1019C84B931A8D2083755E998D29942C
20D91740D04FD2668EE1FEEA83D63A2F1E088802FA7F1EAD85E789AA8B63161A
F8B7141A25710BFDFF894667275996B1AAC73C89FDE08DFDCE96308A0773DC79
72906A60AA493994C73C72D71338C3BCEE0EB200D65AEEDF8F6C7F134BBCC99B
FD0FE14C4C17B7D6BEC01F905E85FDE786BC0040A94E9877FA1A72CA> |
38 <001C60D8A8C9B7A0860A0E844E3AC7615B1168223386DD018930FD52312E
ED601A44BBC67BBE3B48744CD708E1B00B82FADCCF6D7A68A82527D8C08A11F7
C22627A226A1B171EA8CEB5970B9ACB4529964AFCE5E23DBE7E4F33444A08A5B
33726F2D6755613539D44806745159097F0618EAB4C1CCC2D315D3EE4169E3DE
D8165E2A81F0EB1322F711DC2596E3DB2370A8215FC8A05F6BD110B4D98EFA00
C4C4235F68D3105DF2521DA4DDE4F545BA1A39D99D7FF2148D50CF25A93C9430
FFDFF3BFB0503EEA6E53F15AF5C9D8D28DCDFC2880E186BADDCF60144BB109D2
697C> |
20 <001C60D8A8C9B785CBBBBA11D373200413791105EADCE16BB621B9AF8446
0A2DAE7D1E5942C350A255435676C947F10EB5BED3D8E72EFE0F730C5F97D9B5
C1AD2AF955A039B750D93AE51ED6AE693B4E06E75236C6CD475D588081905B91
CD9717ABBACEFCE71C9FBFF52C73375AF86686A67EB5AFB65B46EDFDD22B0773
FAA9E0825AA5C0588488BC7282185BEFABF80045D7895BB54DEDBC07E5CB4747
E08F50FC1F17EA038B834D29EAC809EC0278178B8E955E7528DDFFD9C1D5167B
63778A35AE0FF68ECDBBF9FFA426DCD8467E4D7333607BDE2E8DCF322890DB63
C2B31AB41FE69109CDB38471B0F2630B1BFA6BD005D066563D9703744208EBF6
833417CF0E5C93A583A70324140A235F5429E98819FEE26ABA4C2A2209733E22
99E5516C17729C0170E458FFE4ECC2667CAF5F9689308E265EEC7B82B6086A7B
6DB2EF38D6> |
28 <001C60D8A8C9B816D2CD29D9E464244E9A2DA3142AE2BD9B2C891D370D11
B7CA5D1A1071244940FE22223F5BB48B44DB78467613BEF535FEABCCAF6400F5
65A62FF719B7750D836AB6BC248D6B7B47148C6333D946F7283AED228AF669F8
9AA2E5634F5AAC555DA23E6AAEEE3F9E891A55F2116AA278FD14C16F3D83395C
1351E0642825906529E455D3AD5FE6A88B22A72F25CA098A758B1F9DF32630C8
113447C08CE6ACD8EA8BD228947ECF8FB16C8C3FBA71AB66551879391F7D4910
317BC854B7BE2F6DBDE433B022CBF53813CEFD9E904A8B57656EEA92669EEE1C
0754171ECFE001> |
40 <001C60D8A8C9B741FC3CFDC803CBD204E904078E7B42E203AF06DFAB4580
C717B4CFF15011E6D8AC832AC2A1D58B8387EB7A0F33BCA61637DB3EFF1A075C
2EA4792661951105A5296E41842402DEDB7C28C3A3041EF3FD9B97E72D2A7187
A0AC5DE62AE9ADC7823D65479B2D4AE4578FA7EE2A7E227D64B95CA3D5498772
3FF42783FF17C2A13BD79FAFAEBDB446D1F4A8B2F21C0123B6C32E1191185F0C
A46C1A6A36FC7100F4F5511F3F9E1A256A969BD7D9612CEF16EFD3F3F941E0C8
78BE66479CEE1BD5D957B71427C8758399641DC4BAD776E2E79263170ED12CE2
6FB83BB07DAD5C4C112A015DB47A59AB9C054091DAF1D2B8788BA52B22500526
C98A3277292DC212809856F0FAF8FB8B100556C9004D9D215136A11BD93AB412
CEF9BDD6B7C30E0D1D8D3C25DF3D0D6692D7B50D5D8D37> |
2 <001C60D8A8C9B7AD0A3B2424DBE86CFFFFC411CE612B28866B99420020514
AA27D966274E0DE51EA2ED5068DDB0CC9A557664C6844A3499E07F34B9D525A8
0DEDE7B> |
49 <001C60D8A8C9B7BA8F1584B75BCD71F9A6F0071DE2A436A5D445E9CB68BE
41FF85811D9258328F6F320F95C6F1754FCA1A6595F40D37E5E6608687DEB56F
0FE030D7AF44C78AAF1147D7A219F7F376C47DFEDF657FF4A7F6CED6456F42FB
3554B8B1AAC55585DD4178466A1319467AA16E86C7665BF3E5ADD6CA91F4ABD3
B012E7429CFEDA0BABCF738BE98B247A2077F21B20C958ACBDBE6FB7F6E046BF
69F6659537295753244948C2CCC912137E754AE8009EB42D8E1C3199F0113E0F
BD63EB7917CAB14476335196C44A962A0A269724D4A2B5F8A14594FC3D74499F
C2E887908F04BE51A4C0215D26BED629D92D343AEF6CD78A7ACBA19E1260FB0C
FADE605EA4E0D825EC865DECAD52996C316D67CBC202461B09B3CDE42347DC60
9C6422354E491A27522AA4615EDDEB034D71BE39EEE31EA84F7F8BA353C485F6
043E8B8B955F05> |
33 <001C60D8A8C9B7DB133533BDE5D678F160B27F09C9FD064E920AA7DADC35
D582D63B944001205DF5EF3BD6538B7D99D445FF1C153F2098B88DCB19A90C93
44197BB5913AC97B17ADDDE35A357E568368EA91A1F7AAE8E7D5409A76D6EE57
76775B7511AA5F916B64F2BE67CA7BCB35B2AA5FB1FD844A14678290B7FF8A6E
55CCEBC21B0EB0CD77124490DD308EA8FE2ABB00D7DC4104328FE3D9710B7877
F2A41EBDE65826850838EC14FAAFE802AA56BD64402F6A6DBA94E3A3F0EFC454
942804F4D2441917714665FFB42CDA53DC2CD25334FAFDEE0C935BC3624DB74D
E8D17F39F301A26DFDFF244B20DA0C4B52ABBAB5523A0875B8F9F73FE96F88F4
E5D6517DA32D6437267EFF7DF7C0EE3E6359DFA422D6397C66FFA18430B191DE
38D27967C84C534457CBDCAFA400CDA15A404AAC45F0ECB035BB4FA23705BEAA
8C12EC2E30BBB40C33F8496855F25E943B716876347E8DF1C9C23DA3737C6DD2
E01F> |
34 <001C60D8A8C9B65648EC831AFCAC4680FF7873C8E91FA856AEB67CFA8E79
EFBC323ED13B282E0BAD3E91E9E8E5852187C97D5519ED3AAD9B439BB2458690
E446D4D5C4E21D710D81BFDA407E817ABF2C6B6EB086206E5BD5129900A0702C
3091A668C55630FBDF9C289489BC5095DD17AB5706E960CE027ADF11ED9CBB33
892C95120B5CF3F64CE989F7DD51D104A69AE5ABF1CE6C2F739361635BC4E9DC
0EBFE5B3F8AD478D94A81EBAD1C61D77E5AA9D1DFD33BBD697F7402DEB86491E
4D6FE4219D00EE84BAE82B6561FF5BAA1BE8F2D8DF898BB08A7A05A791ABB06A
D02B15EBEDE7CFC1CD3CB9565E5925FCEC02DF78E88360EF6B041E4030EB8D27
1EA7289ABE1C241C9E162056BEBB192E7406E8E88E740D6387144AEF776BC6DE
54B5EF31B64801BEF936ED12BFDC5E2856C6D84B6CE7BC750ABA94DDE634FCB6
10C50CEEAC291ABD40A556AAD0EB1A143A07A43745EF84EFD507B42CBCE70116
BC23B91AAD84F01253> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IAAAAA+*Minion#20Pro-Italic-13044-Identity-H /Identity-H 0 [/IAAAAA+*Minion#20Pro-Italic-13044] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNF+*Minion#20Pro-Italic-13044 /IAAAAA+*Minion#20Pro-Italic-13044-Identity-H findfont ct_VMDictPut
FZJXNF+*Minion#20Pro-Italic-13044 [8.5 0 0 -8.5 0 0 ]msf
36.6 25.17 mo
(\000\005\000/\000\017\000\013\000+\000\)\000\022\0004)
[5.98642 4.4649 4.26089 3.9124 5.42546 2.81592 4.22691 0 ]xsh
71 25.17 mo
(\000\010\0004)
[4.67502 0 ]xsh
78.57 25.17 mo
(\000%\000+\000 \000 \000\010\000\012\000\036\000\020\0004)
[3.3709 5.47035 5.4278 5.4278 4.73936 4.39085 2.21487 4.05936 0 ]xsh
116.41 25.17 mo
(\000+\000'\000\021\000%\000\001\000\036\000\020\000-\000\020\000\036\0004)
[5.49033 3.67984 4.34286 3.39087 4.24934 2.23485 4.07932 4.48737 4.07932 2.23486 0 ]xsh
157.79 25.17 mo
(\000\)\000\027\000%\000\022\000\010\000\016\000\003\0004)
[2.80502 4.85361 3.31512 4.21603 4.68359 4.41159 1.92111 0 ]xsh
FZJXND+*Cambria-13043 [8.5 0 0 -8.5 0 0 ]msf
14.76 46.72 mo
(\000\006\000+\000%\000\020\000\027\000-\000-\000%\000+\0002)
[6.8593 4.34338 5.24442 5.03183 4.81937 4.17336 4.17336 5.2444 4.34338 0 ]xsh
63.09 46.72 mo
(\000\031\000\013\000-\0002)
[6.09109 4.87553 4.06804 0 ]xsh
81.97 46.72 mo
(\000\015\000\027\000\027\000#\0002)
[6.1143 4.78838 4.78839 5.91885 0 ]xsh
107.36 46.72 mo
(\000'\000+\000\027\000\027\000\037\000'\000/\000\027\000\022\0002)
[5.96022 4.3028 4.77878 4.77878 8.96069 5.96024 4.05621 4.77881 6.01117 0 ]xsh
FZJXNE+*Minion#20Pro-13045 [9 0 0 -9 0 0 ]msf
160.46 46.72 mo
(\000\003\000\030\000\032\000\017\000\017\000\025\000\030\000\034\000\017\000\015\000\037)
[2.91263 5.01868 3.74072 4.01068 4.01068 7.70062 5.01868 3.59665 4.01071 4.86569 0 ]xsh
208.81 46.72 mo
(\000\011\000\013\000\034\000\021\000\036\000\011\000\034\000\021\000\027\000\026)
[4.56427 4.12329 3.61932 2.9173 4.02429 4.56427 3.61929 2.91727 4.51031 0 ]xsh
248.5 46.72 mo
(\000\001\000\037)
[11.889 0 ]xsh
262.34 46.72 mo
(\000\011\000\026\000\015\000\037)
[4.81201 5.09106 5.13611 0 ]xsh
280.44 46.72 mo
(\000\021\000\034\000\033\000\037)
[2.82843 3.53046 3.50342 0 ]xsh
293.27 46.72 mo
(\000\025\000\011\000\013\000\020\000\021\000\026\000\016\000\037)
[7.72818 4.56921 4.12827 4.83029 2.92221 4.84827 4.06522 0 ]xsh
329.89 46.72 mo
(\000\033\000\034\000\011\000\034\000\016\000\006\000\037)
[3.58334 3.61035 4.55536 3.61038 4.05136 3.19632 0 ]xsh
FZJXNF+*Minion#20Pro-Italic-13044 [8.5 0 0 -8.5 0 0 ]msf
36.99 57.5099 mo
(\000\006\000\020\000\)\000+\000%\000 \0004)
[6.25737 3.99643 2.79788 5.40744 3.30798 5.3649 0 ]xsh
67.78 57.5099 mo
(\000\)\000#\0004)
[2.95248 4.76309 0 ]xsh
79.06 57.5099 mo
(\000\)\000\027\000\017\0004)
[2.7556 4.80421 4.20058 0 ]xsh
93.94 57.5099 mo
(\000%\000\017\000\010\000\016\0002\0004)
[3.31772 4.25259 4.68619 4.41418 4.74573 0 ]xsh
119.02 57.5099 mo
(\000\036\000\030\000'\000\)\0004)
[2.15198 2.85741 3.59697 2.79788 0 ]xsh
133.79 57.5099 mo
(\000\)\000\027\000\022\0004)
[2.70761 4.75623 4.11859 0 ]xsh
148.82 57.5099 mo
(\000+\000'\000\017\000%\000\001\000\036\000\017\000-\000\017\000\036\0004)
[5.41199 3.6015 4.24741 3.31253 4.17102 2.15649 4.24741 4.40903 4.24741 2.15652 0 ]xsh
189.74 57.5099 mo
(\000*\000\027\000%\000\020\000\010\000\016\0004)
[2.89334 4.92496 3.38647 4.07489 4.75491 4.48294 0 ]xsh
217.35 57.5099 mo
(\000*\000\027\000\010\000*\0004)
[2.98141 5.01303 4.84296 2.98141 0 ]xsh
236.33 57.5099 mo
(\000.\000\010\000'\0004)
[6.14633 4.80344 3.72394 0 ]xsh
253.89 57.5099 mo
(\000\020\0000\000\022\000\015\000+\000\)\000\030\000 \000\026\0004)
[3.99228 4.35779 4.20474 3.92432 5.40329 2.79373 2.85327 5.36075 4.32379 0 ]xsh
FZJXND+*Cambria-13043 [8.5 0 0 -8.5 0 0 ]msf
294.42 57.5099 mo
(\000 \0002)
[7.4375 0 ]xsh
FZJXNF+*Minion#20Pro-Italic-13044 [8.5 0 0 -8.5 0 0 ]msf
305.67 57.5099 mo
(\000\)\000\027\000\022\0004)
[2.8277 4.87634 4.23871 0 ]xsh
37.08 68.64 mo
(\000\014\000#\000 \000*\000\022\0000\000\)\0004)
[3.98372 4.63834 5.39471 2.84471 4.23872 4.39175 2.82771 0 ]xsh
68.21 68.64 mo
(\000#\000\025\0004)
[4.80992 4.12134 0 ]xsh
79.55 68.64 mo
(\000\)\000\027\000\017\0004)
[2.7556 4.8042 4.20059 0 ]xsh
93.67 68.64 mo
(\000$\000%\000\017\000\017\000\037\000$\000*\000\023\000\016\0004)
[5.33519 3.33783 4.27271 4.27269 7.1458 5.33521 2.8447 4.1622 4.4343 0 ]xsh
137.7 68.64 mo
(\000'\000\014\000\027\000\017\000\016\000+\000\036\000\020\000%\0004)
[3.63756 3.99448 4.88708 4.28348 4.44507 5.44803 2.19257 4.03705 3.34857 0 ]xsh
177.81 68.64 mo
(\000\010\000\014\000\)\000\030\000-\000\010\000\)\000\031\000#\000 \000\004\0004)
[4.7063 3.9837 2.82773 2.88724 4.4343 4.7063 2.8277 2.77676 4.63831 5.39471 1.84174 0 
]xsh
%ADOBeginSubsetFont: JAAAAA+*Times#20New#20Roman-Bold-13039-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (JAAAAA+*Times#20New#20Roman-Bold-13039)
%%Title: (JAAAAA+*Times#20New#20Roman-Bold-13039 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /JAAAAA+*Times#20New#20Roman-Bold-13039 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-567 -307 2000 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 20 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 20 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
1 <001C60D8A8C9B66995569196AA103C974D2E9B4397E75EFFB6B6859DD1FE9
A5C82EADD36CA99D48CBFB3A0AF7CB7AE2B006D47E68E07627EDD24D1AB33379
60DDAD824A295C44247FDD85FAC85B998C9DA931243BD873722D47DE7DB7BDFE
003586B973B3C2614AD71A014390E85E56A5B3C22DEFA945859D9DF9D91A0A43
287004A3C9F54541841354C0E0379B3C8719B1DEA83896F6AE00789CAEA3A519
708D8B1651D77DEED07885540D3F2C3F9D2F10EBF8F9CCA> |
5 <001C60D8A8C9B78E05E560D4461EE6738DC9E522A13F785AEE716CF87480C
D5F99D1150CB5218D93C5E72435EC8EAC8D3B2A341DF54A588815398BC0FDF2F
3608FC36F2199FCCE4CFF5C02F012DC85A00543A27F9391F6BFB02D70D5E5797
69D91BC8DBD91C09B3099045F0FEBB0F270618783556F3312F30330D14484B16
E680DC1A0F5B6448BA84C59B513C5DF43B1AA4C6B7CEF3A34E83A6557572146D
7CF9640F629F9005E356BF8B766D078CE251691B4A7B6A5929D49BE7018A522C
7581554BF9C25B9C6518D2E6756620F03FAB2ED53B15B41B5DD77134E13B2B8D
51853DA2ED8306F2E3972C01BC4F0AC8D> |
8 <001C60D8A8C9B6557A3A60B74F9E963F49CF1D4A14002579D629A125A9F0E
78A6B15DC651031B7FD71FF1F9888185634DEEBF22E739C7C533184FEC0E1076
E495B545BC60375660522EDF373BC9BC86F6F87CF670D4E90DED12D25A526D5B
FBB38B04CC39CC19785B446778CE77B313E9784E43C2290DE943E2139FF76676
44AA4E0D752001BC25AE733BF86819D75FF8A951488BB2DE2A059ED568F8D4D1
23A0404F945D90DB97B689A5DCEF040899DF3DC654B8904B8C27740970743031
DAF1BFE2B54F97DD261119915EAD977C8A24F1313E18764D3A7AA8FAA64FC1D0
DCBA55CD4D055BA89FB1EA85ABD25AAF5E61C91229C2467EF0ECAAD9515062F0
E0835F6EE527B6E996F5219232783E13959EDE151C2> |
7 <001C60D8A8C9B7B3D0EBC419A37A6D6A6D04188EA5D407026701EAAC38B2B
8686BD36DBD4DCC0F1F118A8481FC00B588DC70D27F52DB399756AA5035A9700
737342BE7E6FA8538F1502277621B5C73CB542158956EB1AB4C6A1F0BA487FAA
19EED48F19F7EE42248F6CD06BCFEDC87DA625CE359064652D353800CAAFFD48
F02A84E8DA2E9321A5A09885DBB3E1BF2AC3A6B1F08C3D9298682DA0D56E7C6E
4967DD9D9C9A9A33A94A448780CCF89868C77136E896C8E078271E734AAF52DD
98639DAA0ED1B7940A818DD366F7328A456CC3D12B27A61EB> |
6 <001C60D8A8C9B64FADB5DF9393325990E9858482CD9E1B7EE0D704B9D876E
ABCF210017A6F95E6A412EB7FD380300F58683D489998D0003E209BC84AE6E23
D9166C73436077EEB5E6CD48286F16B8B0E7013AF8EF97E0DBDCFA7165A348FD
ADC1A209BC6C3A197422109639A0D6C8B29BEC49EDD076D43F3AA6EB52981FAF
9324BF30ABA5EE1FE2C73F067B07747E8AD996FE495B0D0AD7893CD75D68037F
D648954A2767BEFF388B0E171BCE97BA06199290A08A1C243F1944621D1A81D5
2BAA10866B588B3D3060135FC9C0292DAF43D6BB3E443CB3C9ECB4888C526C80
51C6AC2B741B8647C64EFA0572A954A447700FA506C57DB4569911E7FBF5CF39
1B935622E3858D45EC9E5A40E0AE519729B5BB20BC6912B7F9FC8CD261746E7A
2> |
17 <001C60D8A8C9B625CE643E4F2072BD5625CB29DD827C099CAD9E67FCF2F7
1ED5771CFB75A99C6A9A7E080653B9930B137ACDB7813D434E4DB87AD7FF40DA
2E151677676C78FC7777650ABB0AA2DB748EDBC18C6233D7C164E349BCB71B75
6E29A4F81B842FFB3ED6828444961355E0C7BB09E86D0BD231B6587D224E29C0
BC14C5B9D2676CF22B3AF0F1E3ED778166457D92737B8BE76B722EFA7D591043
B574F1A6CFA91C33B759C4C34C602FA54A8BB39BC14A> |
11 <001C60D8A8C9B83E2DB942F929B0E59C2EA1E28EAAD1450A25A0854E1B13
98E0B811DB511906E4CF9E8737AF19432E79AC3DE58B5DB95409707DE3363247
1F9A1DEBF85927F2845C720F8204826CA79F1472BBF3E06D97871C6A0006E331
6F2B8BF6EF8495C129853351BCAE5C12AA1E09D7DFFD88FC28F52AD91F48A9BB
7ED86A9FB351EF32B31EACFE614DF0BA44131A20DC> |
14 <001C60D8A8C9B7438399DF935E4BF3D95A7588422A4C8C262D2017F71AF6
2C501E172C139177834A37B4AE283BCC0E0945D2206997844519ACE93297D99E
8386246E85A14865FC021EC1B66544F2033BDCE7133030AAB43EA38CE64833A0
7F9775D771562BF27291634FEC8CA2EEB3676B6E115A44515BA1569B718810E2
231186C0DB7724976A2B1F61C52BE463A2C5355F8070143A1D82392789C95EE1
D62CBAC8AD65561D51DEB74EA5986530176BC2A40D11503DF1C44B5C690DEFA4
2E9CAC> |
19 <001C60D8A8C9B8707C25> |
2 <001C60D8A8C9B78D34AA31AEEB3C69C1F2B4F29FFDE04B54D5C8E1C7AF38D
48A1FD16A3796A39638708CB8E7F5AA93324F52DB617986590D3A0C9F0DDBFFC
970F2E3FC84F39C445714919060ED5D979147F439ADB077B997206E1FCAC9D8A
C77CFDF4563951919793AEEB3A7329D478BAC0858E8941880C6B45F24C69D3BD
1442668F13C823C1C74CDACFE0E5E66ADE74B30C352F06209962D182B06A6279
48CEA4577530580969AE748DF1CEC5F5AC8BCC3F71EF0284AFB2EC369D48257E
715277754E28AA501343D8B42CB55952292302C5BE260CF270A540ACC40D89FB
3A080E6B3682AB7B97D9001D9F06257944680FFB0BA90ED34B8C334E350ED0A1
1EE97EE6D7E15A59E721FF777B4B4FD> |
16 <001C60D8A8C9B747CAEF77CD18C2AB290BAA5D5C88A6DF0E532915F5E367
550C37A72CC0C9C25AC484586F6334F1716BA21BF9A81B3D5202A7F1EB212F2C
7E221EBA2D722C47245DD636BC585B02C51F892D30195A0F537171C8244F327D
56659D7DCA88DF2C3E8C94407F3B11F6CDF128CAE3025CFC716C785D71966496
849D3348393A4A8738C9087276498048D42B4DA469CBF07E7E91CF6889724A68
5ADC66766E120EDC101308A2726E4F6C> |
9 <001C60D8A8C9B82A0D962D7440778F499FA1C53EEB5A8620C89D00F91FCD2
6DB1D3AFC0F9294D6A6F854827380F2CED608A145EFB0D0AA10E8D3362F8CF92
77815C2D898327C6307C743099F78B2A15034ED6279A7B318C1EFDB2ADCD3E9A
7B66F0403D03DEFF12CE0C40D48A1CD2D6025F2C7D0621AFA652EA2D48965EC0
62CE6B1A92EC046AF45D47CB7CC841C16509194C8A746926DF0B39B8B4009E06
BE37968D72A7CED71E763B17083F254A1> |
18 <001C60D8A8C9B7E2CE34A29B69333BE058A164A3CBFAB59586BA285ABE57
0A2616621502AE066CD540F3A56DBB58007022B5961D4E59CCE624156AB13951
33F11CCCF6E65220E2DFE0895D1BD62217C9A120C779159F8C551B0E06F0B715
A8B477D44ACAF6B299AABEFA7FFA81BD7D1D0504A26210CC0902DADDA1185DC6
77F62E0CBB9F19CC7D010EBF4B04C088050551221CC3BFBF10FEDB3A0988E08E
F477BF5C9DD30301F69C7D57AF28A452EC896714705BEB270F4ADEACA8317EDF
734CF0155C712E> |
13 <001C60D8A8C9B7C56CBB95B53ACE38E0E9E04755F53EC398B7C783EBB99B
6183C18E4C60BBF8A22F35F68781A73223704B347CF1F00E0BBCB3E2D24EFB84
87E389A225EEDF05B7A0F9861C06A33CB37AABC6EC2CFCACE679E5050DA25687
C5AA40C0FBC20A9DAA585A3F9B2DF99D2B709AEB180C639CC1C6EF7F74A2944A
FBCF0157C7FD411F9023FB30EE4BC64009E17C72E8D6A8B4> |
12 <001C60D8A8C9B7D7E8DC3661A2EF489D40D37C8A74FEB197A61CB0A79007
BDE68598776491018E3D7F0FBF984BFE719D888DEBAE4011C580C156F43021A2
72AB74344E208950D7F3F023F71D9EAC4CAF49DCC176A923E6F2024947091059
3F8DE00785089FEAC00539853BB3DA44B45C816E9227148AAE5529AA2572CE0F
71FAC3ACDC1B08F4F3E06E10A7F79286B9257E24B2D8CF6627B7C1991882CB44
0B5C25418D6ABDB4FC952C9081496C95BCAC93B1B515314DB686E1021A36087A
C4A1F9F7700B3888D66837EAB592A62EE0D66EA8E3E5332F4EE69245D5D2CA1D
2678E5752689A0CA446CF581ED719F6C069547FF7572916A26D1543202B5FD62
13DE7AE384C363378CD30092FFD3D11A1D04E6D931AA87EEB69224A8CB043F22
332E16DFED2C94C866000C18CC5E12488C1792188D145BFE38DB34422A230AC0
F7E3D4> |
15 <001C60D8A8C9B74526514541E0799958DA731924D290636C08ABC3524F9C
728C850F710E285B2CAF4AFCE48E7EBEAFF1ABAFD31A57673C6DD22201679DCD
0DB6E84D5030E8976B52D6C0A16F04E5EA88714CCD534A50EC51FB5DFC72FE12
E8B895FA0F6866214AACA4542A447C783A65F4B6EC5BDCA6F25F6D99068DEA68
8AAD93B663127273B84EDDFD> |
3 <001C60D8A8C9B65DE774693A0796F9FFF7E762B73737ADF5CA974511AF6AD
4DD3899ECE8A89EC05DDB6B9572D38D53751B8F70DA659724D384DC3D42FFDAB
06D025C24069C736B2D33CDB5791506D044BB2100055763FCED4D6D052BF3485
8956D4ECDC834CD5F4C5C471E6F860A59B4325521C55C77A16DB3A19F79E4365
9CBC83E8F8C2A5D70973CBA65F5BD1A99200E02967E4242B47CC2F5494E7D560
795DE5071CD7EAB7778D469915FAA18BA5B5D093B7A3ABA473B9DE7C71E862CF
F93EE4ACA2CD42DEF98032DDBE0FC18789FBE8CFC0D5D616617640016D6C78AB
62ED7D7A3E7178D5B38B27D59F9AA9B80F6> |
10 <001C60D8A8C9B7FBE1C7B1C3B4D5D5CBB357FDC5B0DC349A3F4CC71CB723
84735D434B23511AE70F979A8D555B4FD6D8C96763A23C1C4691AD4402DFCBD5
81DABD8B0A78C748A898E90204043CC243A1B1FC3A66A04F42940B9921CBFD8D
979E59BA0CE273AA18CB73BA9B694DB3C4664FD7DCD3B4B9E578AC099640761A
A9F80442530CA831D066F97865D47D1BE9E57FCF312DD68A7DA03D29C2F1EC9C
9D6824351FB766662AFF5E6717C932B9990835A7D1EA748676C59AA25F19A06D
CFE6C618E25570BC565EB5BAAED7F5AB60F59D06A7EEB6922AD28EF2A88EF4B0
D174ECCA92B31430539136BF4AE296BFF868> |
4 <001C60D8A8C9B6374B3A00A89A59A52645CD6804CDB7F72C39F5A1DF9F1FB
63893814FD77FCC889CDE020AA3B4864D937FFE2FB088E23078D80EA77C03A6F
E137E26FEB4DDE25695778F9EFA132DFDB6A8163070973F13DDA23FEE6DF93A0
7149C209C42261E3A1B7967AE6AE8F36D74260B9C7501BBBB6C991CAF03CE78D
FA6D3519DC03E4CDAEECF740BFEEB0F55EA30138ADDFD648E3A17CB453A> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /JAAAAA+*Times#20New#20Roman-Bold-13039-Identity-H /Identity-H 0 [/JAAAAA+*Times#20New#20Roman-Bold-13039] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNG+*Times#20New#20Roman-Bold-13039 /JAAAAA+*Times#20New#20Roman-Bold-13039-Identity-H findfont ct_VMDictPut
FZJXNG+*Times#20New#20Roman-Bold-13039 [9 0 0 -9 0 0 ]msf
14.76 90.4 mo
(\000\001\000\005\000\010\000\007\000\006\000\021\000\013\000\007\000\016\000\023)
[5.67691 4.7498 6.07283 4.7049 6.01886 6.21689 2.72488 4.7049 4.27286 0 ]xsh
63.56 90.4 mo
(\000\002\000\005\000\020\000\011\000\022\000\002\000\020\000\011\000\015\000\014\000\023)
[4.75804 4.74898 4.23605 2.9041 5.14503 4.75804 4.23605 2.9041 5.4061 5.53203 0 ]xsh
112.26 90.4 mo
(\000\010\000\002\000\017\000\023)
[6.07736 4.7634 4.2594 0 ]xsh
131.18 90.4 mo
(\000\003\000\013\000\015\000\005\000\012\000\007\000\006\000\023)
[6.14287 2.72298 5.40497 4.74789 5.20697 4.70297 6.01694 0 ]xsh
FZJXNE+*Minion#20Pro-13045 [9 0 0 -9 0 0 ]msf
169.59 90.4 mo
(\000\004\000\012\000\024\000\027\000\013\000\023\000\017\000\015\000\037)
[3.3349 4.40591 3.18195 4.49585 4.10889 4.22589 4.01895 4.87393 0 ]xsh
205.94 90.4 mo
(\000\011\000\013\000\034\000\021\000\036\000\011\000\034\000\022\000\027\000\026\000\037)
[4.56604 4.12512 3.62109 2.91907 4.02606 4.56604 3.62109 2.66708 4.51208 4.84512 0 ]xsh
245.39 90.4 mo
(\000\001\000\007\000\037)
[11.9142 2.07727 0 ]xsh
FZJXNF+*Minion#20Pro-Italic-13044 [8.5 0 0 -8.5 0 0 ]msf
40.93 101.46 mo
(\000\007\000\027\000\017\0004)
[5.3291 4.83612 4.23248 0 ]xsh
58.93 101.46 mo
(\000\011\000\036\000#\000\014\000\035\000\020\000\016\0004)
[4.25922 2.14276 4.59927 3.9447 4.44623 3.98723 4.39526 0 ]xsh
90.16 101.46 mo
(\000'\000\014\000\027\000\020\000\016\000+\000\036\000\020\000%\0004)
[3.60799 3.96492 4.85751 4.00746 4.4155 5.41846 2.16301 4.00746 3.31902 0 ]xsh
130.05 101.46 mo
(\000\010\000\013\000*\000\031\000-\000\010)
[4.83197 4.04987 2.9704 2.9024 4.56 0 ]xsh
153.95 101.46 mo
(\000\)\000\032\000#\000 \0004)
[2.72238 2.84149 4.53299 5.2894 0 ]xsh
172.71 101.46 mo
(\0003\000'\0004)
[2.78906 3.61356 0 ]xsh
182.18 101.46 mo
(\000 \000#\0004)
[5.21704 4.46063 0 ]xsh
195.55 101.46 mo
(\000\036\000#\000 \000\026\000\020\000%\0004)
[2.25015 4.7067 5.46307 4.42612 4.09464 3.40616 0 ]xsh
223.61 101.46 mo
(\000,\000'\000\033\000 \000\026\0004)
[4.81406 3.62408 2.78256 5.39203 4.35504 0 ]xsh
247.67 101.46 mo
(\000\030\000\)\000'\0004)
[2.88116 2.82159 3.6207 0 ]xsh
259.84 101.46 mo
(\000$\000%\000#\000\014\000\017\000'\000'\000#\000&\000\004\0004)
[5.33688 3.33951 4.64001 3.98541 4.27438 3.62848 3.62848 4.64001 4.34247 1.84341 0 ]xsh
FZJXNG+*Times#20New#20Roman-Bold-13039 [9 0 0 -9 0 0 ]msf
15 123.3 mo
(\000\001\000\005\000\010\000\007\000\006\000\021\000\013\000\007\000\016\000\023)
[5.67691 4.7498 6.07283 4.7049 6.01886 6.21689 2.72488 4.7049 4.27286 0 ]xsh
63.8 123.3 mo
(\000\002\000\005\000\020\000\011\000\022\000\002\000\020\000\011\000\015\000\014\000\023)
[4.75804 4.74898 4.23605 2.9041 5.14503 4.75804 4.23605 2.9041 5.4061 5.53203 0 ]xsh
112.5 123.3 mo
(\000\010\000\002\000\017\000\023)
[5.95734 4.64337 4.13937 0 ]xsh
131.21 123.3 mo
(\000\021\000\014\000\004\000\013\000\015\000\005\000\012\000\007\000\006\000\023)
[6.21318 5.52916 6.37506 2.72119 5.4032 4.74609 5.2052 4.70117 6.01517 0 ]xsh
FZJXNE+*Minion#20Pro-13045 [9 0 0 -9 0 0 ]msf
181.1 123.3 mo
(\000\002\000\035\000\026\000\012\000\024\000\027\000\013\000\023\000\017\000\015\000\037)
[3.13593 5.26889 4.85501 4.43201 3.20801 4.52197 4.13498 4.25198 4.04504 4.90002 0 ]xsh
227.29 123.3 mo
(\000\011\000\013\000\034\000\021\000\036\000\011\000\034\000\021\000\027\000\026)
[4.56427 4.12329 3.61932 2.9173 4.02429 4.56427 3.61929 2.91727 4.51031 0 ]xsh
266.98 123.3 mo
(\000\001\000\037)
[11.889 0 ]xsh
280.82 123.3 mo
(\000\011\000\026\000\015\000\037)
[4.69199 4.97104 5.01608 0 ]xsh
298.99 123.3 mo
(\000\022\000\034\000\033\000\037)
[2.66693 3.62097 3.59387 0 ]xsh
311.75 123.3 mo
(\000\025\000\011\000\014\000\020\000\021\000\026\000\016\000\037)
[7.72394 4.56494 4.15106 4.82602 2.91797 4.84402 4.06094 0 ]xsh
348.37 123.3 mo
(\000\033\000\034\000\011\000\034\000\017\000\010\000\037)
[3.5961 3.62314 4.56812 3.62317 4.0372 3.17313 0 ]xsh
FZJXNF+*Minion#20Pro-Italic-13044 [8.5 0 0 -8.5 0 0 ]msf
39.96 134.19 mo
(\000\006\000\024\000\)\000+\000%\000 \0004)
[6.30251 4.58553 2.84302 5.45258 3.35313 5.41003 0 ]xsh
70.89 134.19 mo
(\000\)\000#\0004)
[2.95248 4.76309 0 ]xsh
81.94 134.19 mo
(\000\)\000\027\000\017\0004)
[2.8757 4.9243 4.32069 0 ]xsh
97.3 134.19 mo
(\000%\000\020\000\010\000\016\0002\0004)
[3.31863 4.00706 4.68709 4.4151 4.74663 0 ]xsh
121.85 134.19 mo
(\000\036\000\034\000\(\000*\0004)
[2.19698 2.9364 4.07544 2.85986 0 ]xsh
136.93 134.19 mo
(\000*\000\027\000\020\0004)
[2.8447 4.87634 4.02625 0 ]xsh
151.94 134.19 mo
(\000+\000'\000\017\000%\000\002\000\036\000\020\000-\000\017\000\036\0004)
[5.43533 3.62485 4.27075 3.33588 4.22833 2.17987 4.02432 4.43234 4.27075 2.17987 0 ]xsh
193.08 134.19 mo
(\000\)\000\027\000%\000\017\000\010\000\016\0004)
[2.7879 4.83649 3.298 4.23288 4.66647 4.3945 0 ]xsh
220.68 134.19 mo
(\000\)\000\027\000\010\000\)\0004)
[2.97208 5.02066 4.85065 2.97208 0 ]xsh
239.68 134.19 mo
(\000.\000\010\000'\0004)
[6.02637 4.68344 3.60397 0 ]xsh
257.17 134.19 mo
(\000\017\0001\000\017\000\014\000+\000\)\000\030\000!\000\026\0004)
[4.23367 4.35272 4.23364 3.9447 5.39822 2.78867 2.84821 5.16022 4.31876 0 ]xsh
297.19 134.19 mo
(\000\030\000 \0004)
[2.9556 5.46307 0 ]xsh
308.8 134.19 mo
(\000*\000\027\000\017\0004)
[2.87219 4.90381 4.3002 0 ]xsh
40.43 145.19 mo
(\000\013\000#\000"\000\)\000\017\0001\000\)\0004)
[3.87698 4.59111 5.72157 2.7805 4.22548 4.34456 2.7805 0 ]xsh
71.57 145.19 mo
(\000#\000\025\0004)
[4.80992 4.12134 0 ]xsh
82.67 145.19 mo
(\000\)\000\027\000\020\0004)
[2.84807 4.8967 4.04663 0 ]xsh
98.1 145.19 mo
(\000\012\000\036\000#\000\014\000\035\000\020\000\016\0004)
[4.34351 2.16754 4.62405 3.96947 4.47101 4.01201 4.42003 0 ]xsh
129.06 145.19 mo
(\000'\000\014\000\027\000\017\000\016\000+\000\036\000\020\000%\0004)
[3.6076 3.96452 4.85713 4.25348 4.41513 5.41806 2.16263 4.00705 3.31863 0 ]xsh
169.19 145.19 mo
(\000\010\000\014\000\)\000\031\000-\000\010\000\)\000\034\000#\000 \000\004\0004)
[4.74896 4.0264 2.87039 2.8194 4.47699 4.74893 2.87039 2.9639 4.681 5.43738 1.88443 0 
]xsh
%ADOBeginSubsetFont: KAAAAA+*Cambria-13042-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (KAAAAA+*Cambria-13042)
%%Title: (KAAAAA+*Cambria-13042 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /KAAAAA+*Cambria-13042 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1109 -298 1373 1047} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 115 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 115 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
38 <001C60D8A8C9B6415B4B68CB5B06496E6BE482A941588C0E95C78A14BB04
E8CADA713AD826FC700B13AAE63172F55E1CD724929304B958FEC5C99F7363A7
4A013BFE46B1DF7DBEABE068CCBE8B0781FDC43F1167C1B7BE567273AD59D0AF
E7A9A30DB35082EB1F10D428B48DCD9A383562BE3DA0F8BE2300344A065C2160
5DEFB39A10A017ECBF8991C6C79EC7A56B913FE9962520676B64FFD41D57905B
DDA7DF31780C335A69F3065F63093DDD5673E793BE81BB1BCB719F131D> |
58 <001C60D8A8C9B7D98F624BDA68DED4F0956AEEF2821DF8D0DA35B3864D61
C9F2B7C2C4795F8337B140D2BD8B7B54C6D6354FED0CC374F46F5836D810DC81
601438C5277518D3009A0F8A8B6193E4B1F487348A1A13C4341DEDC871053DB6
B582DA46F0F4554EE7565292828141210C8DB63DA352BD0169CE37242F371E20
48CCD52F58281C781CFCA7F5D43005A880F3615837DB2E2A86651F26A03D06A1
D7ECE1791EC19A47350B18F8B3794233659CFBD5F926C7A732C89299FF258062
CBA98F17034DBD547334BB3DF500F063E1D734E13E7D1B151388BF93F0A02450
537F5870D597D8E1DE9F7F94287C> |
50 <001C60D8A8C9B7A9C0DCE8D0CA73B93119B951E7FE3CB56CF2A8770254A3
E34E94470EAB48888BD3B3A084F97C7AA140EAE0D65DB3B53A48AA1295043F1C
244C829C09BCE2A1DEE42543DAE545CA3E9865B3A81BF049F6D788227BAAA1DA
D96813A48A6BFC2FFDED65D9244D6AA287AD91112BDE4A82E06BBFBF4CAB9B0F
9AD1ED37901CF5EB2946E11EA8F33759928B54A5C76F81390A23B9496E51878C
4E6F5886A3210550A57A594AC4018AD01651F242A93A27A9DCAADE2F89C9291E
62A6DDEBC8686D4AACFB8CF2F5F87BB979B1DD600D31A6AAE40AD0029EE07A1C
3CB52DD846A6A62E118E8E3EE3CFC6931E57EB0CCEE4B687C3F7D29FB3D206D1
C6FB66782DE5A9AFA7ED7B6DB28CD85AD03CD3A7A6905B7C9131106D7EBC3AFB
33FF2F57> |
114 <001C60D8A8C9B8707C25> |
43 <001C60D8A8C9B765F52A3988A575B07CC085F4F84ECE11A3B16AD387AA39
07BADB950F8276AE4820508E00D3743DAE54BF12DF12C58F1085D6650766658A
1F24508ABC4E34527E5AD7F97968A12FA72B22332B8D945E898974E1F8CBC32F
CB0836E496DC5B7C99C143986A08B6B9B9F31043A59DDF12CAABE8800BA94A87
E667C148D44F412B5C19125627B58C409F173175FDE26801E1BD8E012CB0C0AC
E77D535532EB34CA08A99BE2F13666527D7864BFDA6BEE8EA22CAC4434C4DD83
66C0B02C64C5865DF818CD0EE12A71CB995F9E78B0E7F982EE149B10C8E64528
E2BBC7E3F90A37531DD70C747DA6B7CE2CEAFB29CDBD1680D32ED0B6813BBB73> |
91 <001C60D8A8C9B77FE2CDA8A272899416FD0D06E794B5B5E886AC7634C88F
1322440485CCDE1D2748DD5098561216726397501281D46183F6F3F15912F224
CC3DBC8C484741A77DE4CE6C387A15CD5CC878C5CAFEBB61524C18F4AF89FA8D
E9EF2B812030728DBA5B20F5961BB0010CABE92CB1BEF09EA38E3E51FBD5DC63
0A38C6CE126557E9AB932886F413245F89DC1757E21F6A8FDF046F4C0E2FF28B
C738DAFFFF8730D736AE649A98FC9DC20264E0DF54> |
104 <001C60D8A8C9B7DB133533BDCBD96D47EB49BC68E0569BCC0D8D8EC5301
53599F8A432614D06DE64529A4CD5ED24271039D0F73D6B001C982B1156EEC3D
812FC24838E11DBE57084FDC3A366E862BA9DAC3516C0BEBDFBE3565C353535B
70E547D7187FE145F3E388CCB4F648C99F757D868BAA951C26DCC21B47046585
3E86C695F203176FA9E93A884549F9ECC3257F49B9D882B7BF22679A16253625
F708E4E18612E389C> |
62 <001C60D8A8C9B81CBBBA6DEA4A5C6199B0FE15A27221D0D233285911F954
574FD74BAA24587895389C7B9BA5F756E70ECBC96C4A775F12CB2741E2122DAD
A69863F93E1DEF12EB1317EC608E0B512A90CEA081F9CD45514B4D45D79F13C7
04A07E617689C83FEAAE1F0E4090A083C899FA211786C8975C04DA5134CBDA66
69468A2B1AC771CCF13313> |
39 <001C60D8A8C9B79815F80625F4C384D8C7D3634725A23AC5CBA8C3DA1AD8
883260B33FDDCA342DCEC73FDFC40278C01FCEDBEEFCA2915B3D5224D8CA28B4
CCD13CCC76493D38C975769A5CBFED036AC44C2C47D0389D15DA196AD06A057D
389483EB8FBF7F627E23BFDC5665F2BA84DA1B474F41F61851D4013411F89E47
A57874ABA8CBD0D80457BB8D39E1E7B13FE424BA6B5B8A93F9B50400BEB2699F
68B3D747F4B7E73D29FDA3E2609EF9A58DF5983FD19AF7CC89102D6C2D4AEA17
451F7022F732908CFFFD9A021D62A498D19CC3B05DC5C6736645F078D20C2A02
B4EF9F4AD0E88EA27DB5524243762EBD1464B3EDCD26C59C5C32AD386994EF6F
917413> |
71 <001C60D8A8C9B82799728448FA9D334B1A7125F5D396EEBB30CE3C9DDC56
E7FE45ACE129E301AE203566F587C60C4E3B7A93C63E36C00E898068D038EE2B
CBC7C257143CC49A90410939D01E595808FA186CC4D77DBCD452F8C928A22390
B717665E21A4FF79853BB855A275B0607945> |
47 <001C60D8A8C9B794D33485EA10F7A5BBFE35ED0F3A08F220D1CCA2B0CF25
AA741DD759DF3C57780AC237B2BDD339237FC6A122297B7EE6AA21710FAF57DD
503F382237AADF2F91696595DE49063DB52912AD436623CF185552C1F6CB7761
E6464B49578A369923B3F0A99732D3574DD101C700AEACCB5C7A8D8596765F1A
591C3CFDA90AE331F2B20D0783C1B3304100CA90DAF9C87B9B51504FD10438F7
6A257A0BC6EC369D88388E4C4A05D0FC4D76B3850BB286ED2DACBBBF0C1C14D9
5FC4905C0437E22239A196EE7698683C950540318EB797E3808FB7B600DF650A
2AEB54D22D2CE6DB95F9FC9C> |
96 <001C60D8A8C9B761B29507204B99CBF37757794CC14630A121AD6E33FEC5
CCE3FD8AEFF5564987229A7F3FB83D9DF08AB6399F3FA9858F5F4A70CB1FEE97
745D611CA4A9FF40E1116BAFB2ADF72BCA27BCDD1D2B6A943062C8D575D22231
BF94FA7DACB855666176F3811747F11E8BE724A94FCCA3877C9229EB867F851A
7A9D26F530222D8B1EF23B4028B084DA39EBFBAF5AC3D68CC0429BC63CD09E36
7D50D561E2EED512C38C706078F262058ADD600038C1C3C2690C4F3B371C4642
BE05741500C83DF330E67C4CD8A05D08DFB05910CD15AFE9AE97918AC5F554F4
8081245175099054048EB32117D172DA75EE14B698CC9D239A0A2C3FFCE1998C
5C2BC331F37288B823251799E2162CA8B753B7A4229A1E0083E6C2FF23EC9881
C50963A69569AC22764882E8062E6ED1F2E854832B6663A21D46D1AA574A75EA
BC0E81233CE72C5C7BB5F39707D4C26F> |
100 <001C60D8A8C9B73549D4E887259FB81D138DF58B3B3E1D4806AAD805817
0F7E956AF3700CB7C89978497427DE796F5ACBD5C78B03B498ECB187C7E199CF
482E4170AE1727C7209EC3CFF215CE57D0C2C31603B8F498A6440A7D0C70C5BF
05644010A1CBEB642EF5A9694A959CE1988F2499EFA4C862FED83DFF975A948A
C001BDFD81BCEB3CD6E9FBFF9E9B9A0FA339B0522540CAF0C56D1657E0D6F> |
81 <001C60D8A8C9B7DE87D127418016C462A61C9B83B8FF87E70D0A53EFB0CB
B005FB8B87B590F0E90F8E85AA3A73F339124646E60A8CAD60C2CADCDB68B63A
5194C659DFA9AAB3A32F2A597E2EA2F460BC9E6C2687DD8A44D337A4E464D648
CCAF6016AA8DED9FB0B195D813836B9C74F80E79C8B1151C61CA0B4DA0D041E0
DDCDFC6F1563B1889B7AD34FD6C22E0BEECB5B8CCB989B83285E8B6D2FE84E4D
8640478C443ED050B6863208343D412BBC9160BE184638A1232B6AB746197671
E20EDE4E10ACBA03527314BCA32B68854AE86E38BC874F94C6C6C048BB95E859
23F44DD9E8023B74190F5D88D4A5E113727D2E929747C6B4682CDF7C8C975D63
4372177C760FE270A5B5> |
84 <001C60D8A8C9B7A8F22C72B36819D59BBE70C5A535093E019B3DDAFAF07A
CB051C84EF0A56CA2D59EA383A41E37C648AD38ACA421822FE7CA7E52E490BC7
70A9E663A56DB266346EB83DD9C1257A356DE190428CF42C7B5E163FE26908B2
0C8C6E1ADCACB45BC98955039B55CDD7C6BC4FC8E4D8BC651147D83A19B03C56
748080A85A849E6564FA4F06B14435D3AF7317E95ED3F4434A27EE49F9E2EB30
B7AA60E80FAA3261117EC416C351E38D9D9BD0349C9E26BD834E70746F0EE94C
F57FAD2C65DAA122F9A07B863282817D427C7097AB8762AFAA3B0681B66B80A2
F61DBCB5F7A57BA19F87D9420524E6DB308DD2EFA02865415F58355E06D73A0A
6A9853A6F09FEAE588D81CE0BFB249D191CC8A14FE77> |
42 <001C60D8A8C9B797476290EE5C734252F59CEDF933D3B451D91700E7D88A
0EE97CB15F9F69D8D8B12E7C537D4BF86FE7A0C65C50DAF3E578B0D5044D2424
5E9A7B152FB7AB6C0DC416F9DB18D1663179011A8B0A8DCBF9581B9D592109AC
86F340D8411083BF448D04E0CABC0BDD93944EA9D582E9059D56D60B541F402B
736F706DBC80C5CA3E8560DF08AD1D33F3C3E16D4E3D7E411E2663273BA57671
4E4E322DF3230285D0C28DF13209E36ABA1D9F9DABF656AE5A1C88A7960A565D
73976701D2E11E6E131675F4903F6108EEFEEA113C269E51F3883FC15BF2125E
03434E21CB6851AF16A9829420ABA3ABA0BB5A> |
108 <001C60D8A8C9B6F576E4656B85D2D9B6A397C96347A1658B6A6DA443EF4
765AAEC2D6457491F0430A459742CF5DA77CB7DBA7D89E9694AE6DCA4FF3D515
5C5A9E72D2BD1E4BDFD8C28F84E3B5F7744A621F4ED3AA326231C779769672D8
E0665313E6F0C4D9CE2FA72EBD29A66C681D2151F039F45341F2D8E5F291425F
A7AD793147AF21B5A8F90F37EE8DC3C156DA5BADA0943CD562DBF9A4C4536317
5086D9F5FDECB15AB40C450B8C80DA6C772688CA88C28AB6EA10EF25777D1023
64067909303A1DBC2C6DC3BFF531829DA3EF011C08B3F1130A00442AE5A323D9
614BE280152B3F7A6860E9FF0B1DBD7EE8BD17EFDC7A39790ED8902> |
105 <001C60D8A8C9B7931DAB285E5D269BCD1F412F7CADAA941283F9C6F74D4
F5741EAC8FDB20FE0D03A97F44548E66771F50D26A687E2706B9935F1C34C870
B35D3173DB10DE03C93EEB5E8C052E0F1EB77C4620AD80729D9D4124166237AA
A12CE711D2233F6475FD002830F058013290E8A3B3C4AD23BBD69D486CEC0096
0DA46E26F9169FDA6155CFBAA5DC41F77765921B1> |
82 <001C60D8A8C9B7DE87D1249ED1647696D8CB5AAA41330C8C6BAF8F0E1751
9BC44DE8A9F69A7EC1CD9446FAE1A76DBDB2A5570D5280B40DB3E509BDDFEBDB
55883878216F008BE9A27BBB73496533FD14045FAA6AD108E1A3B6733642DB20
CA66A9C4B592D7E748E45CF8735913E1594379D85EEADA3A74FCB297739D84F6
AE05F54FB19FA77DC84B659E5FF7CA61E1576708420114948375199C7E20A8E9
6E90FAE559D66D105660A47F4779F54C35005875C428A9AC3224C284C307A7BB
050DD586808711A2ED46E989D47FA24D2A5681724158001B2E8189842DCA5D16
AA1679D3AA7629A58EDAA3973D31B6BC7103DA37C0556EC41AAAD1CAA22A8E51
32E178A2125FC71665C73787B649F3754C515785> |
69 <001C60D8A8C9B7D54577A789A1F726581BCE652419BA3DBEF882946F379A
36F6673EEAAA9E6EC0989A76FD73516FAB6618674FACE3B8728EE9C226C80F40
D9FF5749A42121A4498833779187C7837BA6D016C4FD3083DE60AF0E8E1F737A
00D3E6E5BED641B628694FB04E0737764F71FCB2D63BE66C3D40C9D29B1B5DE2
629BC04FD0AEB695BFBD0BA347B2F65C1A9D3ADB96A40C6C1B690480B4468F2F
D04DCBB93098B3EF2AFE957F8B1DD408B39A3C0B9F44E92E5F0F584F1F21E39A
9EE8E9BB21D1ADAF53344133AF83A1269867CE6A0A1E62AB163F2EDD3B70> |
72 <001C60D8A8C9B81A1498BB27239D4D13B41D4C95C4DAAF76D6CF336B0F96
9832D121E23597CAE9DF04412C7C65C81C6AC6E16B11B7CDDB2AB8FC5F2A10E4
9776AFD7557B72DD9A0AB02EC5C1C2F7382F89DE1512426BF8D0BDCDDFEE44A9
82E5AE63312DF02B> |
1 <001C60D8A8C9B85C5CBA49B0091FB9CE00424F9B523ACBAB19732534FF96F
46332055302BE97E042FB0755CB132A5AEC3B3283FD930867B57C6197DE71B2E
D1A0F84023CBDC02F78222C28079294B4928BB515BE917C0450384E4DF50896E
681594FF02F5552FA805A05FBD9C440F0D09A6BC6E4291540C1CF6D5562A4BF0
95D26D97836236D0703B7A20DB1646D6E245F4A> |
7 <001C60D8A8C9B85744395981D958DA5D264155037AF22DBA8543DE517C841
84A0710911DCC69893F70F704D2A384DCA8F4FEE98BA05489A156D68566AB8EC
7CF25B26C0151EB62091B59139E517F892B7F1FA5DD00FE7D980445854098AA> |
73 <001C60D8A8C9B825FA7096108FD9C93AB1EA9CE34671CBFFA6DB954A8CC8
43AED9ED43F4E9A5D474E1BDEF6E3C0284DC2361AE382E9E7EF3139A656D7789
4A77E5D5A34995C07AE0827CACF0714020A3A2F3E4918CE306710FCABDCB4F27
12DF5356273ECCDE114504DCA55BA906D96CCD685C9D793309F68C43C09CDD15
D1C83102A7890944C8> |
88 <001C60D8A8C9B795A0A0428D2F94A9D613F402E4B04918B56329E8CED157
C31FAF683D2431067EF68BDA227E462784C489A0ED4187C72953293356691596
CC985BD4F1CB501BE25CC094240A730E05F0B538E56546F491469703A2AC5B51
028E8858F011417AB90A93D3209E71F1B5446BF09F6DE0C35480BADC4288CA7A
21E0ED2C9E999856A013DB29501D0647E063E3E5AF06F1ED6A51D927DEB570C1
27BCC66D474CE9803206A67CDE4C29B0F13A853AE3A88466D55E4899BEF96403
8A3152A6B99D40A50312B6ED20C5A86B2B8AEF1150A0C3FDB8DD7ACCEAA1E1BE
76B3EA4683A6F0658C5614D2A340E162BD6C34D52A8BF12EB5D97243DA54CB7D
32E37A08C02129402562A9CE> |
110 <001C60D8A8C9B795A0EAE259E26EB122DA4845C040C9623FC9D75233CF0
BCBB2B3C53311347FA31F67418E0F5A98BB18D1B48D3A6787D913E4A1BA344FF
F4F94F29F5FE5F3A5878B02D8E5C883CF84392013E842F9B0A9F28D8309189BC
8C92F8E964CD1AD9AB79D18E09A98B169D29C8C38E03C4DF0BC8E05E3BC1B14F
5A4194044A9A96BD2B5C58238332E0250C3539EA442B0A40971C1295923AA3BC
FB3CA5255581ABCCDEFD4964CC7ECD1B217798F448E36FCC389BB613B94A285F
E60DC509D5ECD0B5F0576D61ECBA217DEB3DD3592D189C02F924758A9BAA61F6
23C6B76B62C902FCE021F601F7EA30B584A12C9BB40BA72854DED47B4D08864D
2641F70E3AAB9B0D829033397F365902B5806AE> |
4 <001C60D8A8C9B878E8E3E58CB63F0D04B90E6412A255956312C2B93868FD8
480FCEFE4E103670967AA53E7EE32DAD408205C408E66F66D78B5B04A1A76CC8
0AB457986CDCCD5DAB5E006FB4FD3D6504D74A21BA520DCDF337098363846BCF
65C030EB939D773E7BACAB9874A013F> |
79 <001C60D8A8C9B59C101E6D687B40A6306257CBCDD73D3864E55CD96EEEA6
175B8418F0AA1193E64203B820C27F7E2D55ACD2F4327450ED659FAB214FAFA7
90B502634B95D4C22653A50B96E97D7E91E268BA1568B7AC5A18CE3B25108F6B
B7A3B1F948617904CB055E6B24A57FE1B1FEEF0B9540E0D285673983707AAAA1
90176FFADC735983570FB2859579DF7670BA3B45057B597479479C356E5605C8
A07EFCD8207F35600F9605039F476F863B3946D83FA06DBF443D2C13D031E9B3
AF012BE25C8132B95299A5A267B1ED3D268CD297E31E78BE5B788FE8B95FD881
CD04610C7EAAA4373C7895E7270D813CC5AFAB7F4BFD2618951A9D2581B49C1C
077B30B396F89EFBCD9ABCA0A8EA978331C5> |
17 <001C60D8A8C9B878E8E383256CECBA1ACA5FB8BF660F71DE9FECA8699D8B
0765CFEE0D17F2209081511EB015D228E422F1F09592BF7654> |
33 <001C60D8A8C9B734787395464085CCB122F21F0B818FBB3AC6C1F6FC6154
51EFFFBC7C4E01AD2D321C3066AFE0946CC772C7896E9F5A2518D2E0E2228A38
7482FDF9F430BA4530552B1642548281B5200D88073CC8F75F717B0B903E8854
B758CACA4F9D6076E4119F3417B6B4B45EDE2C8300D457F56E3C7633A03011C9
3C30CFBE442E5F542CBF03C54AE9437B876CDEF3F65D> |
54 <001C60D8A8C9B821B32E12C25500997BDDE704BAB6FEBDD91A01E8B9A0FA
22E54D9EBF42046CD1F1C060C0744783507F1816785F153F96AD1B433BB9BACA
32317B9A146E6957CEA3C44722281FD7ACEC1AF6E64B8118799F6319787516F3
86929A8BA7A7EDE31510DF8D2A4DD4866372C4BD43E0B880D720EFAD55C48EBA
DE2D51BE21E7AEC9B70E1773D2FA4DD75EA968BF3E1A6120DEA0BF8D299ED9B7
481BDB4DDAF6DFB9547598DD851E027048E128AA1806E9714B0F76DEDDC747A2
EDD550B8BCAD607939DC4F437444D8519A1F72220811413FDD1C2E4DFF5599AC
7190FCDE3A49727D7874A13A5605F9A779E9E86C44601A6276E26B63A4B169BC
97BB6D73> |
8 <001C60D8A8C9B850A9ECB051B9F7829F158A75AC76EF64370791CA96D396A
2C1746FEF2A226721CB5426EB0755> |
16 <001C60D8A8C9B874A685C54D4E5078FB7836D57EF4CDF416CE96F374428F
7BBED912F7> |
9 <001C60D8A8C9B84FD885298FC046C021E4E108871BA548ED3BF306D1D5AFC
BB690BA3B1B5B1395BF3F7A9DAC3004FC847884FC96670E4C692F7D1B4140607
EDA4B172D8168B58BD71845448F498897F261AD423A1BE70123601C9E7971C3B
39E350BA45E582B6689E64B> |
55 <001C60D8A8C9B84AC0FAEF936F02FED2C709F522BF932C7F1E275C3C0625
7E9F60EA6960F802D9F9E97DD95B66C44D1D27D03D224F5FFF98F1596EB93460
3C86DD0F7040F2DC6A425A198EE5521D5E02CC6474CD7E288E88229552868465
8D67E531E00E7D8873CB50924E8B6540B6DF8BE952642120021B2EE3BBF28D3B
F8D46EC8E149172BE8E6234DDE640395EB55A01D62F86FC902753A036E61AA5D
74458B53D76D17326F05486CCAAC2120FBEAA017AA50> |
94 <001C60D8A8C9B75D88BA5D9CB92DC786C503BD053A9AA4DBD77B0FEAA612
9E5682FEF1A4297EF78EA8991A10C00360BDE5BE165C3B276F0D137A9DCCA5C7
92B904086DEC8C3DDE855E637081398B9B162929FB80EAA1938B4E95973DF2F8
9504E577107642F9387BC5A00F302BB647779528CF9C390944D8B19D3E544067
A1040C5A6851CB24D25106A2305C9DF6898FD4E616FA90CC881222E7E40414A8
972EB65E057F4D7489EFDD73A27D2569A36CAED755D7C61AB583FA2DB5CE6ED8
8F872B9A7E8B47A2BAF076C6C03288B424B71F1696F49D761BA36B491C2D> |
68 <001C60D8A8C9B727F78EB6559261B18F32DA81A3C8F72EF632C4733834E7
E383CE08F37844A2294FE02B270C2F931F0D2D2EC646B66FCB84A5D5E54E594C
CC5E6886A0B68C32F36C333AAD82171A5431681F6D047A66BBFF75A34A340156
0CA4CD6CEE89A0FE09E19E7A05A2D66D5048E74642CE62E4D61960F4DC8095A7
2CF7C1F2A3FCB20144D3EF2A94882779BA47347B3B65823A24848642724DAD53
0ED81E7930518BF86248BC02100F5A031133119170A7A2BF140DDB7881> |
101 <001C60D8A8C9B72DDD6FFA63507335A00F70C78B5644A71CAD4E7A45BAC
AC101655DC313F69873942ADB3BEED3E8F261723749144C0A297C8E63A873488
0B7C34F23808BDA4CA41137627CEFEF67DCAD2F7A34ADF60779167F963926AFC
57E066891F21E637C8720200A9E5F55DBB32DDDDA9D915F2060217618EE71> |
30 <001C60D8A8C9B6133219C33CA60CC94B425C67A3BA418B652E6A544B91E2
205EC8AC9783A07DD1A1D731CF3088466487327622D8402B78216A866E8267A0
D4A2889BAB28CBFBD192839ADC7390228445346B8656AF76FF898A86CC7C3466
6CF1A5D1C7851B7D7384B0EF07C68D1A8253F4CB23DCCA986524E0520162BF44
BBCE937E16D830588C9401CE293EC3CF1623BAF8A1E99CCF79F4FFECA07D0320
772B8055A075984EBDD1596B9E23C83AB09D291C62B4F7603510CEA172497CB3
77BE4BF8420FDFE8283C3F3F46E0318446C63D8C38D3C3873497C550FFFFC819
B6F0391E2D96C6AAAC9D7298090D87C809601FA95FA6AD748BF73B709D34E81C
EFA18E0AC430C93779338180A6> |
57 <001C60D8A8C9B794D33BC66D284D8FC3C7B145AD8CDD49273B4EFF178490
4586FB6224D5D2469D64F1A232BF62A781F4444719595C2917E0D8B01F01C124
FAB40D22D93A45C3B9A30048D0E2BD689EFE4FB1519D9A98050C8FC271CCB346
201C3C854BD14727C6627ADD70ED901B2060A022B23FB878B48CC0004374DD86
B0091AA0DD0555E100CE200ED5048782F7B5EFD3CC546F799FEE9BE0586DEC89
EA5EC831631B337F6924F17B2DF9D48BC8D8DEBFC9CB9B63F0D4F765EC532E19
B128B6536BF67E7613158B2D70CE5C940F9C7092886ADADD5C49D8F1E150BC44
882A1BF3E45C86F69BB47BDD513595213B99360A54EE8978F0D0E445962B71D7
C40D47431022695B98C2AF5E9A0411EF56BC7AE806FF3C304FF1FE429EF88CC6
67AE0E4626D8C16ED401F5B7AFB814CF5E693F9D0784B5768A12DD1175C25DD5
8E09D4EC1430DE66A67C> |
10 <001C60D8A8C9B8517F144EFFF4846A907C769BCDECA29ECA683B8ECE4B20
8A79AD5BE4BEF39858E7DFE4F5E656ABDD007C6A0268CA71CEC6036ECEDF9134
B30525FE4A6D3E2D291CAB9772061A875780889C7D697AD0AE021EBA3F68B8> |
109 <001C60D8A8C9B79676FBD2B4BC00B0BF9CBBD758035437845C15088D52F
B241769A17C99448E05D1DAC910ACDB17E54BC0E2294B4247F4A7ACAC1AE429A
CC9E3CB6A2B153EEA4312B12CB814BDA8D67B2BC56CAC16060A235C76477B828
470A1D3B5313A0C5C5BCDA7D41C9CF3404B9DD64F7AADD3D7557A0CA8896C177
9957E4ECAFA3DD041BA0187D84E0BF7FA0A95EB50C9DD157202591DA77F2A523
DE30A07EFA6B9776F67CD455D6557016AC34CDCD729B4B0E8F36453B5B5F91DD
C451B72BA87BA0B2A2B3034E395C9AC6636B4717D72AC31EC6B04C38F5A9B643
CE9B5454D2D4A09537123060071937A78D8F5051A455A47874ABE0EF25BCC2D9
B6230F682507DFDB7904367861DCC> |
59 <001C60D8A8C9B7DA5D296CFDEE4158C16F2C4C7B1814AD927006E7C2317E
786565BD923153486DC7D6AB6B6609A30E5E61B41E34859F56E4128645272F7D
D2B8DB56978C38D83EC8CCC721955F8C6D1E56E19483A6EE28C777C15698A500
E16A1A9B3CDAD482DBB23D0AF52AEBE4E117716AFFEA85186E44264698251488
7E587D405C53B0E140AC6D7CF6D84993A3ABA9F42678BC497D5FAE32DBCF77BC
54FE9CC4F04DCC96653B30FBD7D07B1A2B580FDC8223B148196785CC11AD578B
9973007C5842ABFC7671D27108F3C7> |
34 <001C60D8A8C9B627523C0FB0598470425A5BD3B8EA95BAD8EDE136D5863F
66230153B8E643A89FED29C572237CFCDC038FB2C5B0937BB407A831C54F5064
DC8BDD7722C5D7BEA6CB1FBD5D83867982CE3DFCC39A8351E05C64398AD33ED8
C976AE7FEF71A0E0C52C05B528DECE1207DAD8EB2F568CE0476374B1D35800C8
3AF7588A0072E9F2237263F20754181C9D3798436B95868373BCF27FC7DB7767
B35F3B026BC9B44E5BDF50E710066D83EF60175CBA29613ED13E203C1E39D831
8A98D036D5D71E0ECE183D0C7BB10C96ED4D60C1EA5D44059FC59855CF07D1E1
0E720B37E7B682462040B84BBC077C0825D6307A822C98F62279C29B797EA832
75D5FF2DDD97B0EA49813DF106553B833478EDC387742416FCFB2A6EA66F4D7D
EC54DA68AD5E4344B3F70BBDFDA2899AFE22A724FFAF113859B8F266DB14BA29
7BE0B923F6871ABAF98EF7B7> |
2 <001C60D8A8C9B845C82028C149C221E8F6C24CF5997EAC8CD0FBA567A232E
BB45B6977A77AC6B111FCDD48AEDBDEB177FBF2FC7C68E28EDDF33354A3A1B18
FC9175E36B5FAC5A94285F54895AA2943871221EC30DEDE91E2D31D2DD0755BF
16CC9A98D315EA5E35D96409936D8CE682571A5BAE7941C4E08624D5D13151C4
EDE4D5768139397590EFD9BF04D> |
80 <001C60D8A8C9B5964B299F80D311D1389676DB09580B46FE7A4046637103
0A9642CC56155058777E99A806C0A2762FBCA982C9E680B15410445EECFA11FA
2C628AE11A0F859FA7D4806E036826AA1C56242D5DB30530F0F9FBFD296F4DC2
18ABA4F9DC6B1CB80E7A09F21A54B812A587721D4AC74CEAFD6BA6830CA1783B
FC297DD6175812649E20369C2E474689E09803F55E453748C1C335CD04DFC418
446E5670CBA8A06ECD8F0D7096FC732F402AC2DBDED4E0979323771356D6B668
ACC26832CB1F786F2DF1B4FF1A28EAA3F245392C576301A1E5FA21D5EF9AD2EA
B4D46A8BE712915406B2E694FAF304A9283B8B4E174D77ED0764DE5359650864
7EA84B5BCA9E8CB5707AD200BE9A013F2A7A82054A41E34D5C7ECAA3313B01E3
D22BD750F9670D33F71BCA46EAFC56C46DDFC49BDD> |
11 <001C60D8A8C9B85D12CBC7E159F413BE6771A341AB90AE6962807030BA57
F2F184BEF382F10AD2B7D76D52BB0DF8BDED9C20EA33303C0DB712944270BC97> |
3 <001C60D8A8C9B821B329A70FBC49C235178DCD3D62DDD52626BE42F747B12
52C71065B8A9E2BB32D276CE0BA54EFBD91F781A5F050D79348D538B21480EE7
42356C8A321538F54D1400054BB5637419EC15FA5212BDD191F576D7C0982F5B
85A61488A73F5905D01499373BDB122812E31C0DC2A17526F9132EDD38971077
1A497F49DD82E> |
18 <001C60D8A8C9B887F06462E8701C7D4A429FAF80B9D2E39DEC1728D6BBF0
5AA46D98694552D3E4D3A4B7A3> |
102 <001C60D8A8C9B73E8B365E1DDA0A8062BB4F78FDCD51B2228B318BF0F7B
3B64DF0F48532FE001E3E711BABE1893747C340E77CD0C8086426A82E0068BF0
D3329E2C8CA0A6CF99E11CD6DE0271F293DCAB0A8FD4A42656C4710D2A644B95
031B8A0E762AF0B94268723ADD86865CAFB86736956234B0B6B80BE6B85022E2
DEE0EDDBA98DE23717C3B6FA496D244EF39EA5CAFFA81D52AB37E539E31D166D
C46EB18001D8F0A> |
86 <001C60D8A8C9B7BF86142B58EE80F38C10B227464DFBD7B8CD941B91EAC8
EC904AFBE55A609E5F20E311C4E132B6D080E83135E000A87022A35F05DA3CAA
B870624BD5BB214261C5A473F2DF6866A14C3CF44D4644E045991E8E04633CDB
EFF24582D59CA820E36DF58CE1BA8C9591592A6A96591DE4940C6FC862A612> |
112 <001C60D8A8C9B8293C4B613E665A4A89382E03D40886AFAAE7E629F0073
C65C195444DFDF771D025554C3DF58019> |
19 <001C60D8A8C9B86A96743DA20738D31971E3F97FF1CFFB76AFDA9EA567FD
652AACC0739C970795462E3868BDE773> |
48 <001C60D8A8C9B7924C43444D11AB22E4E826DCFB3FC830F13081E3F28CD5
F36774B430FA18B297813347A61AF3B027EF5D84338277AFEA90B4BE45CB9842
8FA9FB7FCD38EA8AACDD542A741757C8C8837F1CC76EB6C1C5D9DA008CB28626
897ECC004BE1EC7E245875DCE72C3C4453FDF31C8F104B4A0D35D9EC92F43600
964206B52F25AA331790F00150C537E68311D677A9A195D9A503DF62C85E908E
499E2B58E9136D0E0165EBCB589531591D767206C2DC09656786F255038A28CD
882286396F9FE237A95A44479A77A19CBADE9A7A151D601C44F6EB64B7A741C5
94> |
26 <001C60D8A8C9B874A685A9C8EB430DA28EE27D059BEDC7590BF91CB7E344
7C30355093369D7E38A0B12142500B793528462D2E054EA730B079ABCA4DAF8F
676391F006ADB27E9829449FBC9BC060022ED1BF2953B82EB8A9556024A15CFE
E14420346A4DC5B1D817306891E1527E99BE3980482ADD8775C89087274BA859
32ADAF1957977610D5EAF55CEF3B301B80291CDBA53A0BF4CA6B59> |
12 <001C60D8A8C9B85AB9E1557B9A556AFC090EEFA908710BD6C02802E7AE0E
FF3DD4E4C590DC404AF37BCE0797395189B40B09148929AD2C7CD3D5AA3A38B2
0B3EF687898EF1A7EB08731C5E943F7DFAA8D904> |
63 <001C60D8A8C9B826CBCB3B3C50A18B3D71E059DD6A776682F3111DE6EED2
A28260B2A6F2232F5A132FCD873459CF8CEDC509A181E4D86693277F50856EE5
6493A79CC4ADD4D344EBAB17759FDA0FF38A91C73AD473A8BCC946F1A68500F7
BD36D29E4453D3ECC55939FB75D8C9D64EB42B6D9DBAE288D1248E5032D8853C
D72AE0E6E49279A44E71D01CAE212F172173938B928DDBDDF593BD8BEBB5D360
C92706D854F70A5F6E0BCD63CD9486222245E591B25B4213B3DD4B5E998B68A5
F33D139C1A5B5B5C5A1301568CF5E244CEB959A23C7446410BBDAA412F54A1B3
E0> |
77 <001C60D8A8C9B81E5FA4E67514B978701D07C34E224B675998BBE4EF1283
EB85736C3633459F84D033AD7BA971488C8D80AEAF1D3A03CC0CE34CB7949F83
B1048A77AB2761F4FE7A0D32AC4A423D850B3A77BAFA504E84781CF929EFEFF7
E4C93CBE8B7487B721A2A98D01411EE6398DBB6B3AC9147B9474FBE3D5BC1F27
CCA54D63048BFDB01293C86607F2D5A4BB2F8E9148CAE7D30A29902DFBE18E9F
1B0FB5C9D849E666038130640DCD75A4B2D801438AB89B0F35A215808C2EA8A2
0052674EABB220ED5996F72FC24ED96C9D922F82ECBE6FD8F4ABD5BA6B46B147
4A0A005EE9E567F7F5A34673570C5622CB2493667D01C98CA530096A4B3A2410
FE4B61C49D06FE09C5F6B38D00F654332E83C856806037817A114489CEBF7832
A256A4A224DF78F38EA0550967FBA938458A33> |
111 <001C60D8A8C9B77AEA5E976F1A92017A4EBE61DC4F2CC8D47BE74CC5B6F
BDDC502111392C1FBEDB60D860532283732E76D6AB0F96A47D0FDCD8C5629EB2
365EBECC607CCFDCBAACC634FB1275567A878F32034F29071F2E83A602D028A0
CFEEC16078D424CDBF927E347D06FA313BE1594F7940BCDE830001EEBFD4C6D4
18603D9E5CE253605512671D851EF85C8FEA05422EC9CCD11A3FEA3A46488F67
91933AD9BCB> |
20 <001C60D8A8C9B88A65BA8B929327FFEA05A9CEEE7FA53F8EFE5456892DBB
F47238C565FA4413657C908E9938> |
35 <001C60D8A8C9B6DFB307A7CC85D265D9A5B360914B5006BDC9EC26D41CC4
E8876781CABC9E678440E4F8305E78D90E6F30CA689A8240B8532A86FC4C6956
DC6DE8FD259876DCEC3A1586A65A70F0073CFCF70349230C2412CDA1A4D699E2
DE0B3D0CD910EC23806AB9303706D32100DD015892B467D9878772FCA790694E
FE85987AEF7622DE86E2F122109403911CA59C67B65C9677807BCD1401C6D11E
244E33B1E708F433BC750B9728483D0D77855AEC6699CD376F15B3BD29C31BC0
094D2969652FEAB5909F99B22D14C002B2> |
106 <001C60D8A8C9B79D2DA7844B278B05BCA55ED3085CE0BFDF60CE53DF315
75686FE94E780358A977453EA9D51756B7DFB3155FB579C53F1D429AD68E0647
CE77EDBFBC5A88F6C38ED9ABF5349B02D22CE53CC80FD0441EC11DA588E0F30F
9F3815A2C73C97ABA008079ABBAE557476771A406055ACFF88B2BFC0D7FF4B7F
4073826817663E8911A2E56ABFFA71A447F9042EAA4092D41E6> |
83 <001C60D8A8C9B7DF55974D0CE68B2C969527B3F37B56C1FED2C335E1A1E3
A9DDBABE38D01695BE7AAA7B145D2A56BAD0AF15BFC1929C9CF783FEC55B63A9
E0ED90EB4B31CA86762EA5370C3B699374370B7BD2D65F4E3520A71807F3BE4D
C2680F36D8B3CAD15D480FF4A6778DE9809F540BC1392CCFB111D18F50B76CB1
F20780A01F25283783004B245B4EA4C7298AD6AD05B9DF5AE93A5496DADAD441
773F7E02C7F4AC834E27B480633C4B805F5844587866D22544DA5212> |
103 <001C60D8A8C9B73E8B297A388C847AFF45F0DCC327DBCBCB444A68D7C38
69865C6D223702D27843284A91108B218D0B1F87E54524EA73A36F1FCC335434
0CE7B933123259D3621032412604875182F79F09E6DDCF156ED0A3A7100745D5
C946518F1CD0AE992FAACE45CB8E3C64CFEDC6DC6CD643280592980AC1BE213C
EFFCCD71A3C735800B647C805570FDF93A834085414634018D97D919DAA6DA68
29FBC75DDCFB94E5604D2F7608545D48BDAAB2B258CA9A5DAFA52BD02403506A
437BFDE129A3A222C8DD0> |
97 <001C60D8A8C9B76C90527F6FB2B60FEEDCB42DD1C406DA0CF6B53B0D211E
E805C32ABD1EF53725AA34533EED2C40C672A4EF1E5029909015E8B8A74B8CEA
35B64E9D29BF9B4971D8BFDD39E9593E66F549BF4D9772890AC2BDCEA8DC203D
6CF1B22FDA2CD333F34C315C3687F7F64A65431929EFD6703BA011B237A92F62
C845FE88D192C0EF6CA002E9D729914FC378EB6A5F79295AAECC79B6B343869E
8D7A8CE1E457B3> |
40 <001C60D8A8C9B78D34A555AE8D7EE27C8DCB2D7174CA8875515CE6C4EA32
3B48363E8AF635B18AEF598F1F8351DC6188E045C91169CEE062F32E997637B0
0EF68FB658590F18E18DBD3997BE8A459983F7E5E908178667BAFF8EE243E140
ECFA0F334D5D7840EE240E763B6D3F4C274E4967C4A98861EEE1D06C33826F64
755A444DFFA421DCC5CB0B6CCC75320CB2A1E3C4DF3D1E296160928AE055AAED
38F3AF76375391A88A6C548A83D6F676E88A9C1B1A6BC0142BCB714FFC2E93BE
00B8B300141CEF15839D> |
44 <001C60D8A8C9B761B29A06FADB7024DE28EB7459800E8635B8EE8A64D211
DBECAB3C02B7D6EE3D1AEB2B5B68DB49A024E77141F07C5833814B2E7A476B04
232A77C523679D734B7DE1312E1B2165375182A150D8F3A1EE8319BF40F9AF8C
F56A2C0FEC808D9A683A> |
64 <001C60D8A8C9B80D906206B5DF877263408B42CCB1F82B2EFCA480257B65
5805BEBB44D99C119EEB526EDBD118A297416A555C8F2C85EE203013E3096EE7
B27C4CC7EC148814754CD6AB0D39ABE430513002C2BA25EF046F33D522CA62DB
B00D4822E3BBDAA86290C1B77AE8DA8E2E0D2FFAE64900FCF992F5E0256F68A8
B2A84B2FCDCFF18A> |
92 <001C60D8A8C9B76E37E1427DAE86589CF9A0AD39BE803D5D055EC7E56615
6E04E423FEEA39A47FCD4E84156472ACB32DA3CE7E528F6A8EC601767CA6A43F
B65F95AE015BB437F27E8C5DAC669867F5DAB8B46D8C94E5EC67B7170906F73B
51D702EA74D6625F90CB71D7A735E3B1C01A28283DAD93250FECA8D13A921D01
C2B40D39B0FD2E6BF2ADB29699F2757CFF14D6EE179C4F81580DDB91079C0A76
8BAF68459CD059DC8FF3AB63B672A09831F0091C6978A4B3EEBA7DE14A0DC0AF
F539> |
60 <001C60D8A8C9B7DF5598411F440CEA7AA642206BAE580EED93E4BE905B02
A8B48262784B5E2055E2B609574BEA6797364A031D82E302F0D256A5E3F9DA5C
294B9EFA706D9C6147D7C20EE427DC948F802E3F66A9FD70219F32738948958D
CCBF8BB5567A2DBFC88E4FAC92AE7C0241C7B7994860C7D51D7B5D9F9E975ADF
42634A6602B993FF1B51677A5077B09F40144BD5B8A488ECA319BC8F302CC1EC
DAC63EBBEC1BE3C591F823A4DD08843AF3D45B571170CB040F1A9320BC9EDC98
DC675401A2CAC83982C5F5715E1B23C8CB12D6AA430D946FD033CD65A0D6794C
3A3082DB0F8D84F2E6C77DF6B05E34BA38DC137F9D6292321DE88372775243B2
83EA9F4D37> |
74 <001C60D8A8C9B81A1498B4C056523B6E03458C043FEAAE99EE893AB70D0C
6F3212814E3BC6904729CCD91441F66FA2627A6F747878826862E663E7CFAC86
34711E5F08E51AF01665E7FF3C197F4337E3BB164B166DD7BA9F4170C3B9A63E
1D84444C5464428C1B8CC7829420D3005984A1F5F476E6F6BD29A65BC7A9A58E
3CD9290A6AE503659411F142> |
49 <001C60D8A8C9B79815F814E2E2B11954306552D06AE1DBEE7E334876592D
12A5C9C15194181840D60BAED258BEC41B2CA826E9E017D2F8FBD6235DDF7B72
5477C152DB0F1610205E31920C4A954EB541337CE60E35EB3367CCC3760F8E0B
39BAF3EF25261CC700909566FE84927DD18803A409A6A9CCA19DC35346D47AB8
ECD4F79849DEB0CF58ECE67D4D3C41B19721977FCAA8357CAF8D2328A46D9E98
322FEEBD4DBD90F2C6638F78765322ED0F4A239936D4225772F0C3FB98E7E85C
F7ACE7709D6B15F2AD3AD9F2CFEECB6AF70AE4B91B64041AE8464E883ADBCC49
0A7FFCF6F1722FBA68882818C2C791A2618DF5E799> |
65 <001C60D8A8C9B82356E24D15D3E16C71C78B52F71B4A69250A4F0ECAF5E1
E4B31C257CC36DA815EF24F413E4D9878324D5A617EE5021C92BED25B7EFA965
B3ABDC2174A9F68E9E7A9B22C4DE2607A791B18E1CF50ABE44852380C8D894F6
136B4FB3FEFD4D2D813D4FA18B691692F3753D6F5BFB3DF1861B034F21160B12
58F5A7A13886555C1E11B01533AD3C30E9CD42725A2764D7F72B387FE69A6900
AC708DDDCE62513B9DE544E242687203426361> |
87 <001C60D8A8C9B7876E1ED8466DFEC453E4D9EA8A0355A12AEBFD1026B3BE
65DA88A2C9B682935A18F03F6D6F1B2B2FEDEC01B5F48919CAE87F3BA073C737
2B3D1B1230D1602EECCF4F6D0C5BB31F8362A0EC0B62DFE728B72F634ED627C2
8CFDF33B9DC26A68882E5978908A3EE8BD50CDBCFDD9A720EA0F892F4A5F8BCF
C6E4B4067B4BEC048B87673FE07E5A58C8E43CA0820EDA7A5B551BC4175E5604
588CD28F250C75> |
66 <001C60D8A8C9B82356E2494AC80FE0EE972B42449ABE637B1623C5ECE107
4AAA77857FB84FEE1ED9E17F1B0CC56F21FA0A39C89539569F1B46F5C92FCDE7
23944E2301DEACF59C9CD0954EFB279959C5B8AE43C9BFBA47F9A42969D43725
1A24B3291923755AE2AD5CE7ABF51E89C8CCD1BF998B02511173CEC9F1D3B84F
17B92E79FAD36A51CE0FA7B33B459843E5B83D5CE7B5EEC1DBDA439CA8E59C82
497FD537E2C70F281FDC21BB8C3DBEC12BBD28EA96CA04FC> |
27 <001C60D8A8C9B8707CDCEEA314ECB714773FE3E1B4A8275007A2D6DCE852
2C24BF274AD555FB3638058628B227B3BB8EEF8A989F5CE2C47C5CF2C8BCED79
20F341AAC96ABA8B15A34E4CD86EE722149538DE02C6E014185889B0668E611D
C0578AD47FF67A6D10AA7F499B4A1F6FEC980F16528744AF3A9296148985AF9C
FF6ADB4555E4562B2C20DD4CC14051F08166F2FA5BF3E69FDBC96614B2> |
29 <001C60D8A8C9B6C2567B76CFEF5AFFEC219DF0BA0661DC1D34FB76A9E55F
27F01073A0928D16A3771FCD0C4DE4811B793C9C73D4D23495AB8B320A06349F
9695ADA6E89E55DEDB710F2D4DC67B50CE72D8DDDB808DA552073CC526E14FBB
0F87B7326A1FD3FA570B7A4C17058C8865CB1781AC7DBE070A7057899B1F9342
C57595E5A3054316F26F0602F65E1C890278C61FF5F866645590D998733E51BE
A9764AC0CE8559DA621F04F1A425C72F88578907617DFA2AB725F8899EAF6AA2
4A863D8226FAF4264CCEDAF47BE52503ABEDB0FB2A9FC7618E31AA309FAFD35D
927364243C48D364DABB90480C0FB51CBE68DC73908DB4B624> |
32 <001C60D8A8C9B658EF0507D4FD004FA6E200420EE6493E8E8C9BF98B0B45
2AC6FCF09D2371F790C7AAD0DAF32B47B1E51F924F1B658096B16C35AA6A77CC
AA4F2D53B4525F5D5CC9C44D52D5B312703A66D58134B363583BF470440921C7
778EDBD69108240FEBCA45E0296D389BE3CD3BAD710F7377AB4E25E717F5963C
7E47A08DC83A372E806583F2E87D16F3D2E6F4DDCD1CEB98DB97FE60A2E4EA65
D19F24E7ACB831871F20DF3F42AE32DF4A84959982EF413264C71D1BB6F035D0
33B79646D41D3CFE6EEDD2482BA7F4F0CE304CF44740F0FE928F3E82FBC00141
58467B36B3EA54E8FC105B7D585EC2858CA7CE652DE376B9E3D66EC31C00B0B6
F15901C635D724977BCFC1D39292C35A3488FD> |
23 <001C60D8A8C9B77FE2CE4A7181EE6AFDEB474716015E8D899024BA25ADF3
215DAB9387A93170C1F3C21D5D81651BB876162805165F70964FFFF63140FA38
EDE95EA9D30D52DCB9D8EBD929ABD135E3FE565E8320FDB11C5DE00BC8591C99
A4799F91D5DB3D2B270438CD074AF4F7C5585D3AD8AE14C45E5DB12AAE3F683C
01F04DBC74511A9531048D50EFF6933478E7D43745FE50E6E288B11DCCE9B071
555022005A736A33F7FE6F6BE97942D725931651CD04C7B0B0B86B9873C438C6
900F457E9C91474378361934F564E7B1> |
21 <001C60D8A8C9B7AD0A3B4A8FE23A35C891F8790701EF6E75052263741E9B
D5D8F1CC9EE9571CD7E169F0E09B97ABC9BCDC9B96D27816F65480A8146BCC81
12E5143A7156E3D6D59EF97EBF0E97CA8DAFA2372FBB75C2911D8FC9830466A3
240B438A13EA087D93081988AC0E0B67> |
22 <001C60D8A8C9B6EEDBB3A69D0A285BEAE5138DA59BC9FAEEE6D14768866C
3A871B518860CF2CD7C0C639D1C1C3A34E53425FC0C128DC078F2F4B3F174ADE
8CBC8A386A58FF0C1C4BE964BE6BE109EF91CBE074DE96C28BD94A3DC88100F8
9C9101E6512E00DEA6DC8F0F1A9335ADECE74E78337EBFA1B5D2A2B73D1D768F
17030C501252330E413AB0DBDE11B74E05E46C0B93A06AA6FF2C9D37FCF8A399
8B77695DE956DC8B5729A4E7B97CF5D994CE> |
90 <001C60D8A8C9B7E5221652E164824F7B243423BEB875E020C0C9637F70DD
50E4972214AA71B9A4B39FE552260E6CFE10389852CA3B2A660078DF5E67FD38
70D396FF8CCE1C1DDF4EE5B19C1C98FD82186C7154427C4BAB9277449B6382DF
0057640E1B24B218F7080F45FCD65CF243A62345AE876E313B694338AD358E3E
AF6BF5BB46947D158332279C84A0EB1051F3A50AF1EBCBD88B9DC308F92C2802
F8EA729932DA4067D31984E90EAFD7175470A775678FD290977E1E6CF4993222
133D3766231A8554B126046BDA7F0B2FE96FA78524C639BB092401FFB99A543E
7B3A842E625CF1C515B4804C7FEF8760A79C90487B3087024A08ABF64CBEE5E0
D10131173C1C9582814C87ECCCA141AD12AA43D49961B97711F5060E77BD7717
ECF69EA12020675382E29A9A9DE0349CD1DF4D8F98BB> |
28 <001C60D8A8C9B8856D4A0AA8B9E953ACD288227534F5E6766777E00D522D
FBD1572A1354D6943238EB2BE42E0B8C1AA66F48CC85D60FA94B764EF01D75B5
84F7BA09CC68427607E5DBB6ADE36AB1A0793E231191566D7B84B189377FD98B
B52CA966F27C7FF30113A668C9119E0E292868523305D5A2A198C62726369AB0
246921DF86E6DE4ED87D3ED5A844452C6E9E5F8F07798C85F5D73CB264A94B88
65C95C64> |
75 <001C60D8A8C9B825FA70FCC8B7C0D444E66FFF763184F29F887B6A4127E6
BBF4D0E1997C2FAC42BEF391A85FB1853D9C8607B6B0C0CECA3C47DB85DB8A09
8D72F5136A9FDAD49F7D5B17B8B4C1BA4E9E1F1C333624EA6C1821C646054C3D
B48B7F8FB0434791DBA295FE6344F0955D5925CD025E414FFBDEC29DAB77318D
F7EBD2775EC44B1A6984C5656EBBCA94A4B5B30E0C1573> |
67 <001C60D8A8C9B81BEA6E15157E8727B8655F3C231B2DF2F2B440E12A92E2
2251397AA028BDFADEE292D15AE6FFF19619FA22F98298DEC82A12B6E04296FF
8DCB149F71EADC74F115CAD79614A8F1DD28FA78F5C3DE4005C3EBDE2E972991
AAD31E9E3A8028EE653A2F273B88936C63757D57DD67997130A8E749C3A92237
13F997EC43BE7F7B44D5B510D2AB7D673F4D1CEE2CEB09D93E0C9E78A5F8E248
E2DAE78CDE3ED6BC0CDDB99C5E18645FE8E0ABB18D0AB8C9D7A0FD> |
5 <001C60D8A8C9B86A9674116F7C2977EB9B63CCC72C7544595B8234506CB66
46560C77EE6D1B8B034C7B910AD6E3E9651EF0BBE12358150B6DC40FFCEB37E7
E7F44ADF38E47514D86DCF583BCEDD7A83D9B23B74A9BA11F1B4B1FA25B3AAE4
AF156C6B945463902C464C19C> |
98 <001C60D8A8C9B766CA33A971862B288D7168C529C29F7403D424B3B5047B
540405498BD3EBE250CFEE6F1E524268FFEB7688775285172FFE767A67886F49
6E7D33960776E509133D96F2C49AD2DE3A62CF3B4BC858F2097BFE786DADCAD0
79491A8F13FA04E2EA01EE27229D8759CFC014A5D811AE48F5977B9333DB11E9
5B4DE858080AF011E4BE2585310A7624145B287BFCF4107D7F802DB52C0DD634
33687155C0148B4C3F73553DB39686081AA94122E158E24A441849C901AFC61C
AAAF4AE19C432AC6020898448BA40C1AD8D6F58F5EC8A99FE5D8C1A8E09E4C9F
2E25CE798E209FEB13E608802225099FEEBCC5C0E0FD73068B956E699F1B2EB0
4CAD3B124084618B47525606D141DE58B30432E4C55DFDD5> |
45 <001C60D8A8C9B76E37BA266E95CA8B16BF0041ACEA949B45552616688308
05E87950AE83BEEE74DA6C353BC739899DC6428D7825EF3AA4832A5515CDEACB
B882DDBDC0E71B63E2D2042F78CE099E4E1481F1CC74C4822B74A6E00593C33B
1F89B41D9B80331809F65340A44DF0ECB9B7978297573844F86C11C1E2E157F4
669DAFC1B4F18E88DD043D6DEDDF1DE3CC63570274FDF6579F7FA766E39C0BF0
3CD09C78C2537A48717ADF6DC9CA67BF806E618621424F9BE24BAFA7> |
31 <001C60D8A8C9B63C43B91C4B968AD4CEB0FB5276AD37F87111B29975123A
866BC593A0CBEB645EB495A488170D8B0BDCEEC60D42C751E58CAB686FE3C493
402B89814104C25236E18AFE755724335BCA435DE5B01CA2FBFE8BEAA007D983
222AF32642488E5CD46F089961E879E8C0B2902CFCE71F6B74DC8319EFFD50A5
B0E0B3F0993CFD4C582E8EDD0DA47F0A24BE076A613CD2B4DCA6B6FE2EE64AFB
F3E97F9466C3AD8581C0E6CB2FA8F19E727999F3942BE7D1F25C21385E51B123
1C7EE9F198208473A2B8452A0632CEB001385C22EB1EB4C7EEE18CEE2B0D6E2E
6E6409756EAEE09883506DA59A98694BF9360E6B086A1005B0F86EE9878F7123
033BCEB006468D743CA5DE99D0A354> |
78 <001C60D8A8C9B73F59D0635B5D66E11DD69A7195ACF2594EEE6F848183DF
350A0C8C9E3AD393AE8E4E7AF8A047915B92720378ED8032A68CAC10D122DF77
7AB3116A87EB01BB5D3ECD090E5BC533E7938A7A7DB9A88C520E6685004859CE
95200CF555AB513E6A84301F251DE2FEFCFFD68AFFC17FD07ED0B2FB24B8995A
6B3A7572A1FFBE66B1E38596D219CC9FF662DF641F526C0D3CB781BCECD67376
EAEC441DBA2BA14E58241A318B95689FB214ED9523A0168F287A72D9> |
56 <001C60D8A8C9B723CD7F16CFC8D77A5E64AFA107E84B3E8DAEFB83D42E40
2B05E624E0EE399BF2A045EF303E393BD2617C01A1A75B58CBDABC230F6EF529
3D12BC61C7CA0C2007137BA47EC460293F3DDB72C05021DA868B9B84D49C1AB2
E4EB10B83FD8657641D388918D71D27AD24DA8D8266EF6332210248B354ECB5F
FFFF62867F9572824FB69E36B4142BA7EF1C30BEAEE5351C5776B3A3A6C470F9
09BA685109E9C34DE5A34252EBEB73F69FDEFD627F9FD11BF7AD9A550D606EFA
DC79D90ED0CAFF82D578762B4C393EEA236E45F2159908E1B0C865A4C4D2D8C7
B17A9104391C7F4A2F4EDBD5FDEB5D6465E98C44B0A3344DD8C6202F6E959C33
325E5AF54335DFAC697148CD569055117414E1EEEEA2AA64B528CF1E948CE0CD
485252F90399CDCA487620A93C022CA259C21CBB5CE9E323> |
37 <001C60D8A8C9B7F51B4CDD13EA3AA6540E35509810D153A85AD66AEA11FF
C50653A631FA6C6FE6F05D51ABAB772A2C2AFBBEF2AB929F0C8BE2665DB89956
19FB52F05A03749F8256BFAB5F63E765F131D8FFF6ED9D6BED8EFD63CAFF5843
F69DB64C49F1A3B390B1AEFB135EEE147054A43888B78224AFE3197FF774D4A9
BE5569AA8D76CBB419553DB4AFF93CDEF2CB6728B10F056EEF24CB0081F1273D
8D55EB0EFEE79C5F1A7392148F7D76F3C6AE7660BAFEAF3417479A20937704D5
37E2603DA61BF9166FBD95E3C026550C869E5A> |
113 <001C60D8A8C9B835D351CE74E34C0611BD03F0F96680058C13251796EF5
D5FA20374126BB5E9EF8E867108AFF1DDC4EC3BE84D> |
13 <001C60D8A8C9B859EB3B1104D468E10D89E73E8FD6957BE7B1C5BAF4CCA3
44228C5ECFC79342D684F4AC5E4F6B8225F8BB7D9E9F1180> |
76 <001C60D8A8C9B7E897E20352AFF79B53850B39CDDC44425B93C59BD036B1
E19C2FE45538B1B1EA91BB9E48C8820548CB6BD5CF919157D6A02DF88F981C15
14357BD4AED4FAF5707CD827DCDF9764D014E37024F427AAC5DC0DE405CBC1FC
F2716B8B671F3ED93A6A84944742E394F9C355EDED3817F732DCCB5119128D56
09EA39472B28948543974C6AA67469EF278210AD294DB71B387E229610138B0B
49B0613FD41C0DB04BCE0230CDDC44> |
36 <001C60D8A8C9B61FE1BF3A6244B032B0133114029EE3BCB894FD89464D17
A454B788D590D2574C8D939B6F0BEB659B8BBA57936027C8527B6908E35758B6
D160DFBEF67254CE70FD9BEFD9E966D91F146A610E8BB9B25838EA94469A95FC
6B8E765831B92F8071EC7C2B6596548E4A300CFF55592891DBBB9AA286BB1BC1
1F8D8569DB3819562F8AD7F215D6EF00D15C9B26BB9760> |
6 <001C60D8A8C9B887F0641A557A89C9AF528CEA6D0D65DDAF1B57A9B32E6E0
5E864AA195A4243180AE9110B4C951ABFDDD761BF18D053B06D48065A2752110
38E2AE3D67E3371D15DC8BDB4B80D31E40D4873B7B1DB04358049562F174767A
DB0A01CE21FDA3E1CDFEF2BD56759CC8D3FD20ACB1A9EB0C7C40E9BC1E77254E
99910D7640CE7FE46CEBA977FC013940EE7D3DCFA4F2421E11D2550C4CC> |
61 <001C60D8A8C9B7DB133AE3CD2ACDD5C5D3C1C5777787EC193B3E023848CE
C7828D9C5395B547ACD4C90549498885A915AE3113C93EA84ED9CF3E77E371F7
7451D63A4F4A6E3207BAC86963D45682A6A74161EE4AA42E11516BA33B22D124
7A959DCA2DEB859432D9E6F16204ED91B9FDD3EF71B8CA19A7EC5B5DB9634715
69D4D45FEC899B0AE7AF77F25774B80DFC1D98CF4F400CE7E3B0525CE07BEAB2
F4D1BBBF01E78D6E6F62EBFB3C64C384E97FA0424B97D999BFD3E46400836362
9308B63554CABC04A145874DFBC6600C1B00BC317D60664E35F2FEA74EE7FE5F
DF758F6C40D4761343BB3D7BD51D8C1597BE14FF3A4A494F67C0BA7D99F3D1EB
9F5A61> |
70 <001C60D8A8C9B673A567817214E664E4A87B6891F1B8F4ED7BF6F8B56E64
621C6400E3AEC15DBFC155695862E66C2698ED3CF7CE2C2BBB408E672EC48975
774E4CC14BC645F4D3AE32053B08F3673A497CEB34D1F015DCA6F86BF6E28E51
F57D9C6C2262AFA7804DB7D65A24CDA3F29281C2B8235E9538904C24ED80D9F0
E9D036236E77006B0EE443B1DD90CFEF06567B4931EFB76E371D26899FAA7E16
0ABC50B28CCE6E883A31A389017154BF4FC8FCBA744EDF65A8C6B83DD587D4B1
B4EAE565F48A4915F79BDF6BE13E856E986EAF560CF77D38D45571D95D6383FA
BD57944115DCDECB4B5F350F3301DE9B732C2F71A4678C2DBC4D027E8F83EEBD
ED029033CA781E03EF97CFCC323EBD36F46045931ABF69FE0ED3312094993261
3413C9D55D9F25B82E9B1BFD28AE7AD27728D5841FC56E7B03F35B86E0E25F02
FE414BED5F1ACFADE8FBAED652> |
89 <001C60D8A8C9B790A8795BA452D1C3451506CD1E106EE6F7F105FF34A1C1
5AF37A5D74F93A27DE8E475F747DA96CD4399279B6910A7723E7BD4875144E21
2A2CCEEF57F9361BCA0A26D6EEDA7CF1620ECBE26C6FE388F9CA0380A5492F23
795B5390F3CDC691D8523A487EC31B30E498FB5630B662FA4DD70EC0F147D11B
A20C2765FF8729738D0BCE14B8C954217658EF9E7F970F4B013201694E952628
A805D7D986B8A208CC3551522075156E3E4BED11F8AACC45FD8987C8F6DA59B7
22374E324B9947248CC91EFF9123966D884F7F7D4E73CF2D174E62309AEA9D44
49> |
85 <001C60D8A8C9B7A73DB95B5CCEB4A97A8C680862E033F2807B50A825955C
7DA104AD7790BF7EEEE776C02BDE54CCDE6826247741BE9F91977EC50CD94902
ACD859D7C92FD95657FB14E7984D0CF012> |
93 <001C60D8A8C9B760FDBB2B84C769DF5318D451E49D7D60691C7B17E4880F
7F3D95FF55FFDEED6E7A3AA81BDA95981157BCE14847FCE932291C7DA8884D9C
74BD8463C64A0E489DFC65B6A62457B6D83376878AB44DD8F52E33B64FA04AD5
F474938D021C67D600C17482C9C24E65B8C45292C67F5019349E55B8545A0D05
480CD58C3A5CA07070A85353607D5D50C103603BB2430FBD2CB6A8D5A6C22F95
9FE0D08929BF8C6304047EFE37DF7DA0B5A2D35813932CFFDF98ECDA232C0DBE
D46D2DFC6EB7CD70F93AF3AFBAD09357F00D4FB3D227A8426BC35B162603B661
BA169A4FA1D085C5194BF392B245D02601A2C26398> |
14 <001C60D8A8C9B85D12CBDBC0D9FB20E8510A67E1D76E6AF93761E2C01B81
B2F95A7200713FE3328F307FF1DA9EF63E152375C0993D7C3F51CCECF20C1D34> |
107 <001C60D8A8C9B79676DAE3A92D56CC729967516DC63E932CF9C9F43D612
B0816E306D8668DD944FB5EEDB3C8409257BA1D96F063789648E0794109CDE42
52FFBBEBF38E7354A33A6E5ACF147C68DAFED1237CE423FCA53A61B8536F8F1B
BEF27FECD683A22F5A461EBA0519D13C6F642DF12E7488E9C37F1BE71AE6798A
EC8878785B532E0BD485014DABC398ED10A8576C15DE107A3DB7E00745F5B955
7A9EFAA9E107FC7033C2510D9A766> |
46 <001C60D8A8C9B7686E2636D3B2C3E2C2BA6C29110AAD4653C8E929EFF56E
3F0E18CAD24EA98C092C7F7E8A3A69F9A539A235E1A29430D901AC98F1F3221E
9FA5796B32AC5E2B43D6C0097AB1AAE30E1C6C3D9744A38B468355BF8BCE4B7B
C44F53DDAE01DADA48E978A50EE92D1C32AEE44990193FE9DD6F759D31> |
51 <001C60D8A8C9B7A3FAB283DF88A9767537AD6F1DF7E9C23E9218F3E20F9E
ACE053262D45F57326D166DB2590F6F51B74A17E823B8AEA061E5416C9381702
EE9F9C3C7CA76A697CC7BD8DC9C143C394994EBC8DDCC1A5DBE335231F637ED5
4E83DCD3FFD20A7F94687BB394F9E7CDFEAEDFC6AB0BC8CB44DC2BC43727C0E9
FC62649890A8608EDC5BEF94A0E7729A9E99551BAD1F4AB6A5C898> |
52 <001C60D8A8C9B7AC3526E459365B330683362504821B14002EDF16CF6B82
A83D3BE5D9CA0324321F73D5BE807346DFBE14FA2CB6D9310B885190FF87D407
C6D75163420A0C2236F8AC8DC5C63E361489839E3AE5CBACE274F89172CAD248
8BA2D36B3D811CAE45EB2B48F5F1D5316E32643BB9275A8829D098EEECB16330
1FBFB0BD22268011879C8D9E00D4615963> |
99 <001C60D8A8C9B77D5F94BA33A026312F42F088584113695C54CDC1393B97
748EF79B63BABD3500970F60B77B9F650CA36250C26811B0C53C5EC7215E21E6
929CFEB84872A5CE83A569E4A68DC7CD4CD9DDCEEA2B1F416BA6AD63238079BF
3CF1D296928645B12E708A45C67A08422DCC12E1689A086FB81AC2CFC72A1DE4
BF0FDE9656C8C56D26539386953BBCE579648158A338140D615D5FCC703C7EA4
92119DC3D01E390F67B4AB778D71FFB50F392F19> |
41 <001C60D8A8C9B7924C4352093506A02610291402AA74397CD4366424FA7E
AD2070BB6D0D318B210B9621449C9DB535270E2E516BCCF3147EB1FF9701FDCF
F3B8D47A671AA04CA466D87CC7E76B04F6D8AC30926B16519BA2D675F1D29B66
48D63179FB9C1B293A5452CFB95A3EBEFA5A0F74169F850B9605864BFAC149EB
74F23034C2D9793D270884A2E43E093CBFB43B574B505976A8905BA36DA10B08
7E9C969761809E88B90515BB693B265027C0573B5DFFE395B32E790EE4F24495
D3F432706ED4438E9041A064BB2BBBD4C4B56DC893147594B209789D1CC08F9A
7B8B4693508C> |
53 <001C60D8A8C9B756EDAAD6038C4C35AAA45269C55170A98B44B491FA3219
F75211EAB55E40061393986882A28D11EF1194597B89C5B5F066AA64DF4216BF
5B00CDDCDD1DF2B53198EEAF7261EE15094F0C73B8F8A91DB4A0628FB0715AAA
A958EB291AEA36FC979A9409DB038D26168C71BCB807D99F9A9E771DE9402A92
64B3D3F5EF6C9664C62200A4B65080A9A9524C3DBD6AE813C712A3DF2718C7C5
8966DCDE77D1ABC49528F843E4984898B3804F4F8825397C> |
95 <001C60D8A8C9B75A179ECAB3F185D1539D137C10C98D3DA44554B9C0EF45
5497619A603279385C04A70BD7BF5E997882ACB20FA53E9D33A0931187C118C8
706CBDB7328AFA1F85DE4D2CCA41CBD6B41A9E23CD34743A3F85C7AEA8A5C71C
42B59D305E2E1AC5BCB1099B59788081B34415DCF4547593E10589D7E8DD8B24
9F08A76780958D81E1C15B8676B9541CF483DF329A2F5D7236B3121CC32B39FB
3B96033DAA8671725DFA54D95F77DBE68AB16DCDF13F9E35DD496E858177D8F0
FC29688695519DCD7FEF05E92C1F9DB3> |
25 <001C60D8A8C9B7E46D3A556B3824FC4B411EB86DA9273C0E9A4240FDEE97
AADFD5815C0AB0FA075942BEAF717C451494D48C8E5DC9D2C06C6D1599240EF2
F505E6C2A2840762D1B55E57FCC009EF5BFE1937CE478D21AD7AC27589159F6E
FB36B19A39BD4C790C7FF2B07B3352534B7436626E4BD052D04CC9F5F2F1CA32
C0987017291958E78D1ABCCAA4212E350629EA59A93AF5DE35412C204D3EC765
41FA909F651E7908DAC57092440FE5F761B3742C14BEC8003C0F0745A8D01FA2
A80069B07A9E0BC3B363923FAF11C9BB7648685EB707D292E8D1E288183FDEEA
DCC4A1B84D0D467A4317731F1B8158E1> |
15 <001C60D8A8C9B85D12F31A223812C07B7BE53FCE01A39A3A6A1A5B3B3481
0A6DA600547704B18FFF554BB3A7BC15EC5872AF09AF3DE89C8629D1C5D06EF0
4945A0E8ADD1B07CD4070EF2> |
24 <001C60D8A8C9B7500429994DF0C5F0FD50AF0DECF5E79AFC2E287982E218
57AA1FF31069E9AB12897CEA3905EB376BCE5049CE6B3CA7070BF6340E6499CA
AE00E7F0401915BFA8F8A5ACF43C0B148642B21098CC601FD7CF1CA0C8C0E609
C2259FCFBDE4CF1FE9D577AA2CC31AAD3BC4B3663D00EE0C0206D2FD30792777
23F88AC2955721495F5E0573C006CD45BCE5E156873DEAFB7DE0E17BFC0DBD9A
0CAC7A6C5FBBC77924C92242F9669F00B2D3> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /KAAAAA+*Cambria-13042-Identity-H /Identity-H 0 [/KAAAAA+*Cambria-13042] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNH+*Cambria-13042 /KAAAAA+*Cambria-13042-Identity-H findfont ct_VMDictPut
FZJXNH+*Cambria-13042 [10 0 0 -10 0 0 ]msf
24.6 177.28 mo
(\000&\000:\0002\000r)
[6.47079 6.05087 4.93088 0 ]xsh
45.19 177.28 mo
(\000+\000[\000h\000+\000>\000'\000G\000r)
[4.40628 4.46625 6.10626 4.40628 3.36624 5.49622 3.27621 0 ]xsh
79.41 177.28 mo
(\000/\000>\000`\000d\000>\000Q\000+\000d\000>\000T\000Q\000r)
[5.5838 3.41385 4.49387 3.97385 3.41385 6.12381 4.45389 3.97385 3.41385 5.06378 6.12381 0 
]xsh
132 177.28 mo
(\000*\0002\000d\000l\0002\0002\000Q\000r)
[5.53101 5.03098 3.95096 7.73102 5.03098 5.03098 6.10092 0 ]xsh
173.46 177.28 mo
(\000`\000+\000:\0002\000/\000h\000G\0002\000[\000r)
[4.44916 4.40918 6.12915 5.00916 5.53909 6.10916 3.27911 5.00916 4.46915 0 ]xsh
220.5 177.28 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000r)
[5.54382 4.45389 3.97385 3.41385 5.59387 5.54382 3.97385 3.41385 5.06378 6.12381 4.49387 0 
]xsh
274.81 177.28 mo
(\000'\000R\000/\000r)
[5.54855 6.12854 5.58853 0 ]xsh
294.85 177.28 mo
(\000E\0002\000[\000R\0002\000H\000r)
[6.14258 4.9826 4.4426 6.05255 4.9826 3.36258 0 ]xsh
327.62 177.28 mo
(\000d\000:\000[\0002\000'\000/\000`\000r)
[3.90045 6.10046 4.44046 4.98047 5.47043 5.51041 4.42047 0 ]xsh
365.57 177.28 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
14.39 189.23 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
39.37 189.23 mo
(\000T\000Q\000+\0002\000r)
[5.01801 6.07803 4.40811 5.00809 0 ]xsh
65.52 189.23 mo
(\000'\000Q\000r)
[5.66681 6.2468 0 ]xsh
82.8 189.23 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000\001\000`\000r)
[5.49774 4.40781 3.92776 3.36777 5.54779 5.49774 3.92776 3.36777 5.0177 6.07773 2.72781 4.44778 
0 ]xsh
142.53 189.23 mo
(\000h\000`\0002\000[\000\007\000H\0002\000i\0002\000I\000r)
[6.00922 4.34921 4.90921 4.3692 2.69913 3.28918 4.90921 5.44922 4.90921 3.19916 0 ]xsh
193.02 189.23 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.82919 6.02921 4.3692 4.90921 5.39917 5.43915 0 ]xsh
229 189.23 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
242.66 189.23 mo
(\000`\000d\000T\000X\000X\0002\000/\000r)
[4.34921 3.82919 4.91913 5.42923 5.42923 4.90921 5.43915 0 ]xsh
282.74 189.23 mo
(\000*\000n\000r)
[5.81131 5.8313 0 ]xsh
299.55 189.23 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
320.07 189.23 mo
(\000E\0002\000[\000Q\0002\000G\000\004\000r)
[6.12381 4.96384 4.42383 6.03378 4.96384 3.2338 2.40387 0 ]xsh
358.12 189.23 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
14.63 201.11 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.89618 6.09619 4.43619 4.9762 5.46616 5.50613 0 ]xsh
49.94 201.11 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
62.55 201.11 mo
(\000Q\0002\000i\0002\000[\000r)
[6.09833 5.02838 5.56839 5.02838 4.48837 0 ]xsh
93.64 201.11 mo
(\000/\000>\000[\0002\000+\000d\000I\000n\000r)
[5.53421 3.36426 4.46426 5.00427 4.4043 3.92426 3.29422 5.52429 0 ]xsh
134.21 201.11 mo
(\000[\0002\000`\000h\000O\0002\000/\000r)
[4.46487 5.00488 4.44489 6.10489 8.92487 5.00488 5.53482 0 ]xsh
178.33 201.11 mo
(\000*\000n\000r)
[5.81131 5.8313 0 ]xsh
194.66 201.11 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
214.46 201.11 mo
(\000E\0002\000[\000Q\0002\000H\000\021\000r)
[6.14517 4.9852 4.44519 6.05515 4.9852 3.36517 2.42523 0 ]xsh
252.75 201.11 mo
(\000!\000Q\000`\000d\0002\000'\000/\000\004\000r)
[3.93402 6.07391 4.44397 3.92395 5.00397 5.49393 5.53391 2.444 0 ]xsh
294.99 201.11 mo
(\000'\000r)
[5.46997 0 ]xsh
305.47 201.11 mo
(\000Q\0002\000l\000r)
[6.02417 4.95422 7.65427 0 ]xsh
329.26 201.11 mo
(\000`\000+\000:\0002\000/\000h\000G\0002\000[\000r)
[4.41925 4.37927 6.09924 4.97925 5.50919 6.07925 3.24921 4.97925 4.43924 0 ]xsh
14.87 213.31 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000r)
[5.4599 4.36996 3.88992 3.32993 5.50995 5.4599 3.88992 3.32993 4.97986 6.03989 0 ]xsh
65.3 213.31 mo
(\000>\000`\000r)
[3.50922 4.58923 0 ]xsh
77.35 213.31 mo
(\000+\000[\0002\000'\000d\0002\000/\000r)
[4.41925 4.47922 5.01923 5.50919 3.93921 5.01923 5.54916 0 ]xsh
115.44 213.31 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
128.81 213.31 mo
(\000R\000T\000d\000>\0006\000n\000r)
[6.07635 5.01631 3.92639 3.36639 3.33636 5.52643 0 ]xsh
160.33 213.31 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
179.73 213.31 mo
(\000h\000`\0002\000[\000\010\000G\0002\000i\0002\000G\000r)
[6.09085 4.43085 4.99084 4.45084 2.83081 3.2608 4.99084 5.53085 4.99084 3.2608 0 ]xsh
228.74 213.31 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.94424 6.14426 4.48425 5.02426 5.51422 5.5542 0 ]xsh
263.72 213.31 mo
(\000`\000n\000`\000d\0002\000O\000r)
[4.43298 5.513 4.43298 3.91296 4.99298 8.91296 0 ]xsh
300.03 213.31 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
323.8 213.31 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
343 213.31 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.89618 6.09619 4.43619 4.9762 5.46616 5.50613 0 ]xsh
14.61 225.41 mo
(\000:\000'\000`\000r)
[6.17325 5.54321 4.49326 0 ]xsh
33.83 225.41 mo
(\000*\0002\0002\000Q\000r)
[5.50278 5.00275 5.00275 6.07269 0 ]xsh
58.25 225.41 mo
(\000`\000d\000T\000X\000X\0002\000/\000\020\000r)
[4.43695 3.91693 5.00687 5.51697 5.51697 4.99695 5.52689 2.47696 0 ]xsh
99.74 225.41 mo
(\000&\000:\0002\000r)
[6.59073 6.17081 5.05081 0 ]xsh
120.69 225.41 mo
(\000h\000`\0002\000[\000\011\000G\0002\000i\0002\000H\000r)
[6.09573 4.43573 4.99573 4.45572 2.86575 3.26569 4.99573 5.53574 4.99573 3.3757 0 ]xsh
168.74 225.41 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.94424 6.14426 4.48425 5.02426 5.51422 5.5542 0 ]xsh
202.52 225.41 mo
(\000`\000n\000`\000d\0002\000O\000r)
[4.43298 5.513 4.43298 3.91296 4.99298 8.91296 0 ]xsh
237.63 225.41 mo
(\000d\000:\0002\000Q\000r)
[3.99597 6.19598 5.07599 6.14594 0 ]xsh
261.91 225.41 mo
(\000[\0002\000O\000T\000i\0002\000`\000r)
[4.42535 4.96536 8.88535 4.97528 5.50537 4.96536 4.40536 0 ]xsh
303.16 225.41 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
321.34 225.41 mo
(\000`\000d\000'\000d\0002\000r)
[4.37531 3.85529 5.42526 3.85529 4.9353 0 ]xsh
346.87 225.41 mo
(\000T\0006\000r)
[5.22629 3.5463 0 ]xsh
358.38 225.41 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
14.87 237.56 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.89618 6.09619 4.43619 4.9762 5.46616 5.50613 0 ]xsh
48.57 237.56 mo
(\0007\000^\000T\000O\000r)
[2.85233 4.75235 4.96231 8.87238 0 ]xsh
73.2 237.56 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
91.46 237.56 mo
(\000T\000H\000/\000r)
[5.08179 3.45184 5.60181 0 ]xsh
108.49 237.56 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000\004\000r)
[5.49973 4.40979 3.92975 3.36975 5.54977 5.49973 3.92975 3.36975 5.01968 6.07971 2.4498 0 
]xsh
161.3 237.56 mo
(\000d\0002\000H\000G\000`\000r)
[3.90839 4.9884 3.36838 3.25836 4.42841 0 ]xsh
184.35 237.56 mo
(\000d\000:\0002\000r)
[4.02725 6.22726 5.10727 0 ]xsh
202.71 237.56 mo
(\000E\0002\000[\000Q\0002\000H\000r)
[6.18988 5.02991 4.4899 6.09985 5.02991 3.40988 0 ]xsh
235.96 237.56 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
258.77 237.56 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
277.03 237.56 mo
(\000T\000G\000/\000r)
[5.01755 3.27759 5.53757 0 ]xsh
294.06 237.56 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000r)
[5.48645 4.39651 3.91647 3.35648 5.5365 5.48645 3.91647 3.35648 5.00641 6.06644 0 ]xsh
343.82 237.56 mo
(\000+\000'\000Q\000r)
[4.40887 5.49881 6.0788 0 ]xsh
362.95 237.56 mo
(\000*\0002\000r)
[5.69839 5.19836 0 ]xsh
14.91 249.47 mo
(\000[\0002\000h\000`\0002\000/\000\004\000r)
[4.42078 4.96078 6.06079 4.40079 4.96078 5.49072 2.40082 0 ]xsh
50.87 249.47 mo
(\000'\000Q\000/\000r)
[5.54672 6.12671 5.5867 0 ]xsh
71.14 249.47 mo
(\0007\000D\000R\000'\000H\000H\000n\000r)
[2.89001 3.73001 6.06003 5.48004 3.37006 3.37006 5.5101 0 ]xsh
104.68 249.47 mo
(\000/\0002\000+\000>\000/\0002\000`\000r)
[5.50659 4.97665 4.37668 3.33664 5.50659 4.97665 4.41666 0 ]xsh
140.6 249.47 mo
(\000l\000:\000>\000+\000:\000r)
[7.89841 6.31836 3.55835 4.59839 6.31836 0 ]xsh
171.18 249.47 mo
(\000d\000:\000[\0002\000'\000/\000r)
[4.11835 6.31836 4.65836 5.19836 5.68832 5.7283 0 ]xsh
204.98 249.47 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
217.02 249.47 mo
(\000[\000h\000Q\000r)
[4.51385 6.15387 6.12381 0 ]xsh
236.68 249.47 mo
(\000T\000Q\000r)
[4.92752 5.98755 0 ]xsh
250.69 249.47 mo
(\000e\000:\0002\000r)
[3.87833 6.31836 5.19836 0 ]xsh
268.54 249.47 mo
(\000X\000[\000T\000+\0002\000`\000`\000T\000[\000\021\000r)
[5.50629 4.44626 4.99619 4.38629 4.98627 4.42627 4.42627 4.99619 4.44626 2.4263 0 ]xsh
317.46 249.47 mo
(\000\036\000n\000r)
[7.35428 5.51437 0 ]xsh
333.24 249.47 mo
(\000+\000T\000Q\000d\000[\000'\000`\000d\000\004\000r)
[4.36798 4.97787 6.0379 3.88794 4.42795 5.45792 4.40796 3.88794 2.40799 0 ]xsh
15.14 261.3 mo
(\000>\000Q\000r)
[3.48633 6.19629 0 ]xsh
29.52 261.3 mo
(\000'\000r)
[5.46997 0 ]xsh
39.85 261.3 mo
(\000d\000[\000'\000/\000>\000d\000>\000T\000Q\000'\000G\000r)
[3.91479 4.4548 5.48477 5.52475 3.3548 3.91479 3.3548 5.00473 6.06476 5.48477 3.26477 0 
]xsh
94.51 261.3 mo
(\000`\000n\000`\000d\0002\000O\000\004\000r)
[4.45419 5.53421 4.45419 3.93417 5.01419 8.93417 2.45422 0 ]xsh
134.52 261.3 mo
(\000l\000:\0002\000Q\000r)
[7.76643 6.18634 5.06641 6.13629 0 ]xsh
164.43 261.3 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
184.47 261.3 mo
(\000E\0002\000[\000Q\0002\000H\000r)
[6.14182 4.98184 4.44183 6.05179 4.98184 3.36182 0 ]xsh
219.33 261.3 mo
(\000`\000d\000T\000X\000`\000r)
[4.4548 3.93478 5.02472 5.53482 4.4548 0 ]xsh
247.72 261.3 mo
(\000'\000r)
[5.46997 0 ]xsh
258.16 261.3 mo
(\000E\0002\000[\000Q\0002\000G\000r)
[6.17523 5.01526 4.47525 6.08521 5.01526 3.28522 0 ]xsh
293.09 261.3 mo
(\000d\000:\000[\0002\000'\000/\000\004\000r)
[3.88992 6.08994 4.42993 4.96994 5.4599 5.49988 2.40997 0 ]xsh
331.31 261.3 mo
(\0002\000i\0002\000Q\000r)
[4.9704 5.51041 4.9704 6.04034 0 ]xsh
357.68 261.3 mo
(\000T\000Q\0002\000r)
[4.94431 6.00433 4.93439 0 ]xsh
14.91 273.14 mo
(\000[\000h\000Q\000Q\000>\000Q\0009\000r)
[4.42673 6.06674 6.03668 6.03668 3.32672 6.03668 5.49667 0 ]xsh
55.91 273.14 mo
(\000'\000r)
[5.46997 0 ]xsh
65.27 273.14 mo
(\000h\000`\0002\000[\000\012\000G\0002\000i\0002\000H\000r)
[6.03439 4.37439 4.93439 4.39438 2.78442 3.20435 4.93439 5.4744 4.93439 3.31436 0 ]xsh
113.62 273.14 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.85437 6.05438 4.39438 4.93439 5.42435 5.46432 0 ]xsh
147.63 273.14 mo
(\000>\000Q\000r)
[3.48633 6.19629 0 ]xsh
160.59 273.14 mo
(\000>\000d\000`\000r)
[3.27393 3.83392 4.35394 0 ]xsh
175.76 273.14 mo
(\000+\000T\000Q\000d\0002\000m\000d\000\004\000r)
[4.40475 5.01465 6.07468 3.92471 5.00473 5.51468 3.92471 2.44476 0 ]xsh
216.01 273.14 mo
(\000d\000;\0002\000r)
[3.91083 6.10077 4.99084 0 ]xsh
234.37 273.14 mo
(\000E\0002\000[\000Q\0002\000G\000r)
[6.17523 5.01526 4.47525 6.08521 5.01526 3.28522 0 ]xsh
268.01 273.14 mo
(\000Q\0002\000i\0002\000[\000r)
[6.03821 4.96826 5.50827 4.96826 4.42825 0 ]xsh
297.54 273.14 mo
(\000Q\000T\000d\000>\0007\000D\0002\000`\000r)
[6.0379 4.97787 3.88794 3.32794 2.86789 3.70789 4.96796 4.40796 0 ]xsh
335.32 273.14 mo
(\000d\000:\0002\000r)
[3.78723 5.98724 4.86725 0 ]xsh
353.76 273.14 mo
(\000h\000`\0002\000[\000r)
[6.06674 4.40674 4.96674 4.42673 0 ]xsh
15.08 285.13 mo
(\000H\0002\000i\0002\000H\000r)
[3.35785 4.97787 5.51788 4.97787 3.35785 0 ]xsh
40.58 285.13 mo
(\000T\0006\000r)
[4.98627 3.30627 0 ]xsh
52.33 285.13 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
70.87 285.13 mo
(\0002\000i\0002\000Q\000d\000\020\000r)
[4.98383 5.52383 4.98383 6.05377 3.90381 2.46384 0 ]xsh
102.88 285.13 mo
(\000"\000'\000d\0002\000[\000\004\000r)
[6.89163 5.46158 3.8916 4.97162 4.43161 2.41165 0 ]xsh
134.91 285.13 mo
(\000d\000:\0002\000r)
[3.90717 6.10716 4.98718 0 ]xsh
153.27 285.13 mo
(\000E\0002\000[\000Q\0002\000H\000r)
[6.18988 5.02991 4.4899 6.09985 5.02991 3.40988 0 ]xsh
187.04 285.13 mo
(\000/\000>\000[\0002\000+\000d\000G\000n\000r)
[5.50339 3.33344 4.43344 4.97345 4.37347 3.89343 3.24341 5.49347 0 ]xsh
225.93 285.13 mo
(\000[\0002\000`\000h\000O\0002\000`\000r)
[4.42719 4.96719 4.4072 6.0672 8.88718 4.96719 4.4072 0 ]xsh
267.66 285.13 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
286.02 285.13 mo
(\000E\0002\000[\000Q\0002\000H\000r)
[6.14182 4.98184 4.44183 6.05179 4.98184 3.36182 0 ]xsh
319.27 285.13 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.94424 6.14426 4.48425 5.02426 5.51422 5.5542 0 ]xsh
353.49 285.13 mo
(\000\002\000'\000Q\000/\000r)
[3.01193 5.53192 6.11191 5.5719 0 ]xsh
15.11 296.87 mo
(\000*\000n\000r)
[5.81131 5.8313 0 ]xsh
30.66 296.87 mo
(\000>\000P\000X\000G\000>\000+\000'\000d\000>\000T\000Q\000\004\000r)
[3.40195 8.862 5.56198 3.31192 3.40195 4.44199 5.53192 3.96194 3.40195 5.05188 6.11191 2.48199 
0 ]xsh
90.99 296.87 mo
(\000>\000d\000`\000r)
[3.27393 3.83392 4.35394 0 ]xsh
107.48 296.87 mo
(\000h\000`\0002\000[\000\013\000I\0002\000i\0002\000G\000r)
[6.10016 4.44016 5.00015 4.46014 2.7301 3.2901 5.00015 5.54016 5.00015 3.27011 0 ]xsh
156.97 296.87 mo
(\000d\000:\000[\0002\000'\000/\000\003\000\004\000r)
[3.93311 6.13312 4.47311 5.01312 5.50308 5.54306 3.34305 2.45316 0 ]xsh
198.49 296.87 mo
(\000'\0009\000'\000>\000Q\000r)
[5.53802 5.578 5.53802 3.40805 6.11801 0 ]xsh
229.05 296.87 mo
(\000l\000>\000d\000:\000T\000h\000d\000r)
[7.742 3.40195 3.96194 6.16196 5.05188 6.14197 3.96194 0 ]xsh
269.61 296.87 mo
(\000Q\000T\000d\000>\0007\000D\000+\000'\000d\000>\000T\000Q\000\022\000r)
[6.11191 5.05188 3.96194 3.40195 2.94189 3.78189 4.44199 5.53192 3.96194 3.40195 5.05188 6.11191 
2.35199 0 ]xsh
330.88 296.87 mo
(\000\036\000n\000r)
[7.35428 5.51437 0 ]xsh
348.46 296.87 mo
(\000h\000`\000>\000Q\0009\000r)
[6.11237 4.45236 3.37234 6.08231 5.5423 0 ]xsh
15.04 308.75 mo
(\000`\000+\000:\0002\000/\000h\000H\0002\000[\000r)
[4.40536 4.36539 6.08536 4.96536 5.4953 6.06537 3.34534 4.96536 4.42535 0 ]xsh
62.39 308.75 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000\004\000r)
[5.48767 4.39774 3.91769 3.3577 5.53772 5.48767 3.91769 3.3577 5.00763 6.06766 4.43771 2.43774 
0 ]xsh
119.28 308.75 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
137.4 308.75 mo
(\000E\0002\000[\000Q\0002\000G\000r)
[6.17522 5.01526 4.47528 6.08521 5.01526 3.28522 0 ]xsh
170.67 308.75 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
181.45 308.75 mo
(\000'\000*\000H\0002\000r)
[5.55603 5.5661 3.44604 5.06607 0 ]xsh
204.02 308.75 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
216.22 308.75 mo
(\000O\000'\000>\000Q\000d\000'\000>\000Q\000r)
[8.92944 5.49942 3.36945 6.07941 3.92944 5.49942 3.36945 6.07941 0 ]xsh
262.11 308.75 mo
(\000d\000:\0002\000r)
[3.78723 5.98724 4.86725 0 ]xsh
280.14 308.75 mo
(\000>\000Q\000i\000'\000[\000>\000'\000Q\000d\000r)
[3.34122 6.05118 5.52124 5.47119 4.44122 3.34122 5.47119 6.05118 3.90121 0 ]xsh
326.92 308.75 mo
(\000d\000:\000'\000f\000r)
[3.91754 6.11755 5.48752 3.82751 0 ]xsh
349.48 308.75 mo
(\000d\000:\0002\000[\0002\000r)
[3.88702 6.08704 4.96704 4.42703 4.96704 0 ]xsh
15.35 320.57 mo
(\000'\000[\0002\000r)
[5.51865 4.48868 5.02869 0 ]xsh
34.55 320.57 mo
(\000'\000G\000l\000'\000n\000`\000r)
[5.50064 3.28064 7.71072 5.50064 5.5307 4.45068 0 ]xsh
70.61 320.57 mo
(\0002\000m\000'\000+\000d\000G\000n\000r)
[4.99878 5.50873 5.48874 4.3988 3.91876 3.26874 5.5188 0 ]xsh
108 320.57 mo
(\000'\000`\000r)
[5.68954 4.63959 0 ]xsh
122.17 320.57 mo
(\000O\000'\000Q\000n\000r)
[8.88702 5.457 6.037 5.48706 0 ]xsh
152.45 320.57 mo
(\000[\000h\000Q\000Q\000>\000Q\0009\000r)
[4.46686 6.10687 6.07681 6.07681 3.36685 6.07681 5.5368 0 ]xsh
194.35 320.57 mo
(\000`\000+\000:\0002\000/\000h\000H\0002\000[\000r)
[4.40536 4.36539 6.08536 4.96536 5.4953 6.06537 3.34534 4.96536 4.42535 0 ]xsh
242.66 320.57 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000r)
[5.50598 4.41605 3.936 3.37601 5.55603 5.50598 3.936 3.37601 5.02594 6.08597 4.45602 0 
]xsh
298.24 320.57 mo
(\000\002\000i\0002\000`\000`\0002\000H\000`\000r)
[2.93152 5.50156 4.96155 4.40155 4.40155 4.96155 3.34152 4.40155 0 ]xsh
337.32 320.57 mo
(\0006\000V\000[\000r)
[3.29071 5.06073 4.42078 0 ]xsh
354.08 320.57 mo
(\000[\000h\000Q\000p)
[4.43039 6.0704 6.04034 0 ]xsh
15.5 332.52 mo
(\000Q\000>\000Q\0009\000r)
[6.07162 3.36166 6.07162 5.53162 0 ]xsh
39.31 332.52 mo
(\000h\000`\0002\000[\000\010\000G\0002\000i\0002\000H\000r)
[6.04568 4.38568 4.94568 4.40567 2.78564 3.21564 4.94568 5.48569 4.94568 3.32565 0 ]xsh
86.64 332.52 mo
(\000d\000:\000[\0002\000'\000/\000`\000\003\000r)
[3.92822 6.12823 4.46823 5.00824 5.4982 5.53818 4.44824 3.33817 0 ]xsh
127.92 332.52 mo
(\000'\000`\000r)
[5.44952 4.39957 0 ]xsh
140.65 332.52 mo
(\000d\000:\0002\000[\0002\000r)
[3.94714 6.14716 5.02716 4.48715 5.02716 0 ]xsh
168.01 332.52 mo
(\000'\000[\0002\000r)
[5.51865 4.48868 5.02869 0 ]xsh
185.72 332.52 mo
(\000X\000[\000T\000+\0002\000`\000`\000T\000[\000`\000r)
[5.53986 4.47983 5.02975 4.41986 5.01984 4.45984 4.45984 5.02975 4.47983 4.45984 0 ]xsh
235.94 332.52 mo
(\000'\000`\000`\000>\0009\000Q\0002\000/\000r)
[5.50888 4.45892 4.45892 3.37891 5.54886 6.08887 5.01892 5.54886 0 ]xsh
278.67 332.52 mo
(\000d\000T\000r)
[3.85559 4.94553 0 ]xsh
290.44 332.52 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
308.2 332.52 mo
(\000'\000/\000/\000[\0002\000`\000`\000r)
[5.4808 5.52078 5.52078 4.45084 4.99084 4.43085 4.43085 0 ]xsh
345.82 332.52 mo
(\000`\000X\000'\000+\0002\000\023\000r)
[4.41956 5.49957 5.46951 4.37958 4.97955 2.55951 0 ]xsh
25.08 344.45 mo
(\000&\000'\000*\000G\0002\000r)
[6.5686 5.51865 5.52872 3.29865 5.02869 0 ]xsh
55.68 344.45 mo
(\000!\000!\000r)
[4.07806 4.07806 0 ]xsh
68.37 344.45 mo
(\000H\000>\000`\000d\000`\000r)
[3.37555 3.35556 4.43558 3.91556 4.43558 0 ]xsh
92.65 344.45 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
112.39 344.45 mo
(\0002\000i\0002\000Q\000d\000`\000r)
[5.00427 5.54428 5.00427 6.07422 3.92426 4.44427 0 ]xsh
147.14 344.45 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
171.38 344.45 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
191.18 344.45 mo
(\000E\0002\000[\000Q\0002\000G\000r)
[6.17523 5.01526 4.47525 6.08521 5.01526 3.28522 0 ]xsh
226.07 344.45 mo
(\000i\0002\000+\000d\000T\000[\000`\000r)
[5.53009 4.99008 4.39011 3.91006 5 4.45007 4.43008 0 ]xsh
263.55 344.45 mo
(\000d\000T\000r)
[3.85559 4.94553 0 ]xsh
277.23 344.45 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
297.11 344.45 mo
(\000h\000`\0002\000[\000r)
[5.98679 4.32678 4.88678 4.34677 0 ]xsh
321.61 344.45 mo
(\000H\0002\000i\0002\000H\000r)
[3.35785 4.97787 5.51788 4.97787 3.35785 0 ]xsh
348.48 344.45 mo
(\000h\000`\000>\000Q\0009\000r)
[6.11237 4.45236 3.37234 6.08231 5.5423 0 ]xsh
15.52 356.51 mo
(\000`\000+\000:\0002\0000\000h\000H\0002\000[\000r)
[4.40353 4.36356 6.08353 4.96353 5.51346 6.06354 3.34351 4.96353 4.42352 0 ]xsh
63.35 356.51 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000\032\000r)
[5.4628 4.37286 3.89282 3.33282 5.51285 5.4628 3.89282 3.33282 4.98276 6.04279 4.41284 2.45285 
0 ]xsh
120.48 356.51 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
138.91 356.51 mo
(\000X\000'\000[\000'\000O\0002\000d\0002\000[\000`\000r)
[5.54123 5.51117 4.4812 5.51117 8.94119 5.02121 3.94119 5.02121 4.4812 4.46121 0 ]xsh
195.13 356.51 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
207.67 356.51 mo
(\0002\000'\000+\000:\000r)
[5.00763 5.49759 4.40765 6.12762 0 ]xsh
232.3 356.51 mo
(\000h\000X\000+\000'\000H\000I\000r)
[6.13785 5.55786 4.43787 5.5278 3.41782 3.32779 0 ]xsh
264.27 356.51 mo
(\000'\000[\0002\000r)
[5.39856 4.36859 4.9086 0 ]xsh
282.54 356.51 mo
(\000>\000Q\000r)
[3.72635 6.43631 0 ]xsh
295.42 356.51 mo
(\000X\000'\000[\0002\000Q\000d\000:\0002\000`\0002\000`\000\004\000r)
[5.50949 5.47943 4.44946 4.98947 6.05942 3.90945 6.10947 4.98947 4.42947 4.98947 4.42947 2.4295 
0 ]xsh
357.16 356.51 mo
(\000'\000Q\000/\000r)
[5.54672 6.12671 5.5867 0 ]xsh
15.35 368.46 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
35.99 368.46 mo
(\000'\000+\000d\000>\000T\000Q\000r)
[5.44983 4.35989 3.87985 3.31985 4.96979 6.02982 0 ]xsh
69.36 368.46 mo
(\000d\000'\000E\0002\000Q\000r)
[3.97324 5.54321 6.21323 5.05325 6.1232 0 ]xsh
101.52 368.46 mo
(\000*\000n\000r)
[5.81131 5.8313 0 ]xsh
118.09 368.46 mo
(\000d\000:\0002\000r)
[4.02725 6.22726 5.10727 0 ]xsh
138.62 368.46 mo
(\000h\000`\0002\000[\000\014\000H\0002\000i\0002\000G\000r)
[6.15677 4.49677 5.05676 4.51675 2.79678 3.43674 5.05676 5.59677 5.05676 3.32672 0 ]xsh
189.38 368.46 mo
(\000d\000:\000[\0002\000'\000/\000r)
[3.94424 6.14426 4.48425 5.02426 5.51422 5.5542 0 ]xsh
225.32 368.46 mo
(\000`\000n\000`\000d\0002\000O\000r)
[4.43298 5.513 4.43298 3.91296 4.99298 8.91296 0 ]xsh
263.1 368.46 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
276 368.46 mo
(\000?\000d\000'\000M\000>\000+\000>\000o\0002\000/\000\024\000r)
[3.3168 3.97675 5.54672 3.39676 3.41675 4.45679 3.41675 4.5668 5.05676 5.5867 2.31674 0 
]xsh
327.06 368.46 mo
(\000#\000T\000d\0002\000r)
[8.20923 5.09918 4.00925 5.08926 0 ]xsh
354.77 368.46 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
15.64 380.15 mo
(\0002\000j\0002\000S\000g\000a\000r)
[4.99146 5.43152 4.99146 6.05148 3.82141 4.32144 0 ]xsh
49.57 380.15 mo
(\000\(\000[\0002\000r)
[5.22705 4.40704 4.94705 0 ]xsh
68.16 380.15 mo
(\000j\0002\000,\000d\000T\000[\0002\000/\000r)
[5.47379 5.03372 4.47372 3.9537 5.04364 4.49371 5.03372 5.56366 0 ]xsh
111.02 380.15 mo
(\000\(\000d\000r)
[5.50476 4.14474 0 ]xsh
124.38 380.15 mo
(\0002\000m\000'\000,\000d\000I\000n\000r)
[5.02914 5.53909 5.5191 4.46915 3.94913 3.31909 5.54916 0 ]xsh
161.53 380.15 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
180.44 380.15 mo
(\000X\000T\000@\000Q\000d\000`\000r)
[5.5542 5.0441 3.56415 6.10413 3.95416 4.47418 0 ]xsh
212.99 380.15 mo
(\000l\000:\0002\000\\\0002\000r)
[7.69745 6.1174 4.99741 4.3074 4.99741 0 ]xsh
245.06 380.15 mo
(\000d\000<\0002\000r)
[3.93356 6.07361 5.01358 0 ]xsh
264.14 380.15 mo
(\000E\0002\000\\\000R\0002\000J\000r)
[6.18546 5.02548 4.33548 6.09543 5.02548 3.40546 0 ]xsh
297.96 380.15 mo
(\000l\000T\000h\000J\0001\000r)
[7.6947 5.00458 6.09467 3.37463 5.48462 0 ]xsh
329.57 380.15 mo
(\000T\000d\000:\0002\000[\000l\000A\000`\0002\000r)
[4.98306 3.89313 6.09314 4.97314 4.43314 7.67319 3.28308 4.41315 4.97314 0 ]xsh
15.59 391.77 mo
(\000*\0002\000r)
[5.69839 5.19836 0 ]xsh
30.58 391.77 mo
(\0007\000W\000[\000+\0002\000/\000r)
[2.9068 5.34683 4.46686 4.40689 5.00687 5.5368 0 ]xsh
62.41 391.77 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
75.81 391.77 mo
(\000O\000'\000E\0002\000r)
[8.93723 5.5072 6.17722 5.01724 0 ]xsh
105.86 391.77 mo
(\000'\000r)
[5.46997 0 ]xsh
115.64 391.77 mo
(\000`\000+\000:\0002\000/\000h\000H\000>\000Q\0009\000r)
[4.45236 4.41238 6.13235 5.01236 5.54231 6.11237 3.39233 3.37231 6.08234 5.5423 0 ]xsh
170.23 391.77 mo
(\000/\0002\000+\000>\000`\000>\000T\000Q\000\021\000r)
[5.51086 4.98093 4.38095 3.34091 4.42093 3.34091 4.99084 6.05087 2.42096 0 ]xsh
215.08 391.77 mo
(\000!\000Q\000r)
[3.98331 6.1232 0 ]xsh
229.42 391.77 mo
(\000X\000[\000'\000+\000d\000>\000+\0002\000\004\000r)
[5.52979 4.46976 5.49973 4.40979 3.92975 3.36975 4.40979 5.00977 2.4498 0 ]xsh
273.16 391.77 mo
(\000d\000:\0002\000`\0002\000r)
[3.89191 6.09192 4.97192 4.41193 4.97192 0 ]xsh
302.02 391.77 mo
(\0002\000i\0002\000Q\000d\000`\000r)
[4.95621 5.49622 4.95621 6.02615 3.87619 4.39621 0 ]xsh
336.31 391.77 mo
(\000T\000+\000+\000h\000[\000r)
[4.95483 4.34494 4.34494 6.04492 4.40491 0 ]xsh
364.99 391.77 mo
(\000B\000Q\000r)
[3.134 5.89401 0 ]xsh
15.66 403.47 mo
(\000+\000T\000O\000*\000>\000Q\000'\000d\000>\000T\000Q\000`\000\033\000r)
[4.36615 4.97604 8.88611 5.46616 3.32611 6.03607 5.45609 3.88611 3.32611 4.97604 6.03607 4.40613 
2.48611 0 ]xsh
83.25 403.47 mo
(\000l\000:\0002\000Q\000r)
[7.52411 5.94406 4.82407 5.89401 0 ]xsh
111.25 403.47 mo
(\000d\000:\000>\000`\000r)
[3.74405 5.94406 3.18405 4.26407 0 ]xsh
132.02 403.47 mo
(\000T\000+\000+\000h\000[\000`\000\004\000r)
[5.0206 4.41069 4.41071 6.11072 4.47064 4.45068 2.45074 0 ]xsh
167.05 403.47 mo
(\000'\000r)
[5.46997 0 ]xsh
176.07 403.47 mo
(\000`\000>\000Q\0009\000H\0002\000r)
[4.26407 3.18405 5.89401 5.354 3.20404 4.82407 0 ]xsh
207.27 403.47 mo
(\000h\000X\000+\000'\000H\000H\000r)
[5.92407 5.34409 4.22409 5.31403 3.20404 3.20404 0 ]xsh
238.13 403.47 mo
(\000>\000`\000r)
[3.50922 4.58923 0 ]xsh
249.46 403.47 mo
(\000O\000'\000/\0002\000r)
[8.74405 5.31403 5.354 4.82407 0 ]xsh
277.59 403.47 mo
(\000d\000:\000'\000d\000r)
[3.74405 5.94406 5.31403 3.74405 0 ]xsh
300.44 403.47 mo
(\000X\000'\000`\000`\0002\000`\000r)
[5.34409 5.31403 4.26407 4.26407 4.82407 4.26407 0 ]xsh
332.68 403.47 mo
(\000'\000H\000H\000r)
[5.29541 3.18542 3.18542 0 ]xsh
347.82 403.47 mo
(\000T\0006\000r)
[4.98627 3.30627 0 ]xsh
359.33 403.47 mo
(\000d\000:\0002\000r)
[3.78723 5.98724 4.86725 0 ]xsh
15.99 415.47 mo
(\0002\000i\0002\000Q\000d\000`\000r)
[4.86725 5.40726 4.86725 5.93719 3.78723 4.30725 0 ]xsh
48.72 415.47 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
71.67 415.47 mo
(\000Q\0002\0002\000/\000r)
[6.07315 5.0032 5.0032 5.53314 0 ]xsh
96.49 415.47 mo
(\000d\000T\000r)
[4.09561 5.18555 0 ]xsh
108.73 415.47 mo
(\000*\0002\000r)
[5.69839 5.19836 0 ]xsh
122.88 415.47 mo
(\000:\000'\000Q\000/\000G\0002\000/\000\020\000r)
[6.12473 5.49469 6.07469 5.53467 3.27466 5.00476 5.53467 2.48474 0 ]xsh
25.57 427.17 mo
(\000\035\000`\000r)
[7.96326 4.55322 0 ]xsh
42.5 427.17 mo
(\000T\000Q\0002\000r)
[5.06439 6.12442 5.05447 0 ]xsh
63.42 427.17 mo
(\0002\000m\000'\000O\000X\000H\0002\000r)
[4.9826 5.49255 5.47256 8.90259 5.50262 3.36258 4.9826 0 ]xsh
107.07 427.17 mo
(\000T\0006\000r)
[4.98627 3.30627 0 ]xsh
120.02 427.17 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
139.9 427.17 mo
(\000h\000`\0002\000r)
[6.09802 4.43802 4.99802 0 ]xsh
160.13 427.17 mo
(\000T\0006\000r)
[4.98627 3.30627 0 ]xsh
173.25 427.17 mo
(\000`\000+\000:\0002\000/\000h\000I\0002\000[\000r)
[4.44626 4.40628 6.12625 5.00626 5.53619 6.10626 3.2962 5.00626 4.46625 0 ]xsh
222.52 427.17 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000\004\000r)
[5.46585 4.37592 3.89587 3.33588 5.5159 5.46585 3.89587 3.33588 4.98581 6.04584 4.41589 2.41592 
0 ]xsh
280.74 427.17 mo
(\000 \000>\0009\000h\000[\0002\000r)
[6.78131 3.35129 5.52124 6.09131 4.45129 4.9913 0 ]xsh
317.23 427.17 mo
(\000\027\000r)
[4.44 0 ]xsh
326.76 427.17 mo
(\000>\000H\000H\000h\000`\000d\000[\000'\000d\0002\000`\000r)
[3.36472 3.3847 3.3847 6.10474 4.44473 3.92471 4.46472 5.49469 3.92471 5.00473 4.44473 0 
]xsh
15.92 439.07 mo
(\000l\000:\000'\000d\000r)
[7.59369 6.01364 5.38361 3.81363 0 ]xsh
41.97 439.07 mo
(\000:\000'\000X\000X\0002\000Q\000`\000r)
[6.09116 5.46112 5.49118 5.49118 4.97116 6.04111 4.41116 0 ]xsh
82.82 439.07 mo
(\000T\000Q\000r)
[5.16754 6.22757 0 ]xsh
96.97 439.07 mo
(\000'\000Q\000r)
[5.66681 6.2468 0 ]xsh
111.62 439.07 mo
(\000!\000\025\000\026\000r)
[3.89679 4.92676 7.61673 0 ]xsh
131.1 439.07 mo
(\000[\0002\000Z\000h\0002\000`\000d\000\025\000+\000T\000O\000X\000G\0002\000d\000>\000T\000Q\000\021\000r)
[4.44687 4.98689 5.66681 6.08685 4.98688 4.42688 3.90686 4.9469 4.3869 4.99683 8.90686 5.5069 
3.25684 4.98688 3.90686 3.34686 4.99677 6.05682 2.42694 0 ]xsh
227.44 439.07 mo
(\000#\000T\000d\0002\000r)
[8.20923 5.09918 4.00925 5.08926 0 ]xsh
252.51 439.07 mo
(\000d\000:\000'\000d\000r)
[3.9032 6.10321 5.47318 3.9032 0 ]xsh
274.83 439.07 mo
(\000d\000:\000>\000`\000r)
[3.91235 6.11237 3.35236 4.43237 0 ]xsh
295.74 439.07 mo
(\000>\000`\000r)
[3.2692 4.34921 0 ]xsh
306.28 439.07 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
324.06 439.07 mo
(\000h\000Q\000+\000T\000O\000O\000T\000Q\000r)
[6.10474 6.07468 4.40475 5.01465 8.92471 8.92471 5.01465 6.07468 0 ]xsh
15.9 450.55 mo
(\000+\000'\000`\0002\000\034\000r)
[4.40201 5.49194 4.44199 5.00198 2.332 0 ]xsh
42.74 450.55 mo
(\000>\000Q\000r)
[3.24646 5.95642 0 ]xsh
56.56 450.55 mo
(\000R\000T\000[\000O\000'\000K\000r)
[6.09009 5.03006 4.48013 8.94012 5.5101 3.31009 0 ]xsh
94.58 450.55 mo
(\000T\000X\0002\000[\000'\000d\000C\000T\000Q\000\005\000r)
[4.9823 5.4924 4.97238 4.43237 5.46234 3.89236 3.36243 4.9823 6.04233 2.55232 0 ]xsh
145.69 450.55 mo
(\000d\000:\000[\0002\000'\000/\000b\000r)
[3.93539 6.13541 4.4754 5.01541 5.50537 5.54535 4.40536 0 ]xsh
185.58 450.55 mo
(\000-\000'\000S\000r)
[4.35059 5.53055 6.10062 0 ]xsh
206.18 450.55 mo
(\000*\0002\000r)
[5.69839 5.19836 0 ]xsh
221.59 450.55 mo
(\000-\000[\0002\000'\000d\0002\000/\000\004\000r)
[4.3013 4.45129 4.9913 5.48126 3.91129 4.9913 5.52124 2.43134 0 ]xsh
262.63 450.55 mo
(\000[\000h\000Q\000\004\000r)
[4.45877 6.09879 6.06873 2.43881 0 ]xsh
286.83 450.55 mo
(\000'\000Q\0001\000r)
[5.56122 6.1412 5.56122 0 ]xsh
308.72 450.55 mo
(\000-\000T\000O\000X\000G\0002\000g\0002\000/\000\004\000r)
[4.28116 4.98108 8.89114 5.49118 3.24112 4.97116 3.80112 4.97116 5.5011 2.41119 0 ]xsh
362.44 450.55 mo
(\000'\000G\000G\000r)
[5.5545 3.3345 3.3345 0 ]xsh
15.6 462.2 mo
(\000l\000>\000d\000:\000T\000h\000d\000r)
[7.76459 3.42453 3.98453 6.18454 5.07446 6.16455 3.98453 0 ]xsh
55.31 462.2 mo
(\000E\0002\000[\000Q\0002\000G\000r)
[6.17523 5.01526 4.47525 6.08521 5.01526 3.28522 0 ]xsh
89.06 462.2 mo
(\000>\000Q\000d\0002\000[\000i\0002\000Q\000d\000>\000T\000Q\000\023\000r)
[3.33969 6.04965 3.89969 4.97971 4.4397 5.51971 4.97971 6.04965 3.89969 3.33969 4.98962 6.04965 
2.55966 0 ]xsh
153.73 462.2 mo
(\000\037\000'\000+\000:\000r)
[7.21558 5.55557 4.46564 6.18561 0 ]xsh
180.66 462.2 mo
(\000X\000'\000Q\0002\000r)
[5.50079 5.47073 6.05072 4.98077 0 ]xsh
206.43 462.2 mo
(\000>\000Q\000r)
[3.48633 6.19629 0 ]xsh
219.5 462.2 mo
(\000 \000>\0009\000h\000[\0002\000r)
[6.78131 3.35129 5.52124 6.09131 4.45129 4.9913 0 ]xsh
254.78 462.2 mo
(\000\027\000r)
[4.44 0 ]xsh
263.3 462.2 mo
(\000[\0002\0007\000N\0002\000+\000d\000`\000r)
[4.52454 5.06454 2.96448 3.88458 5.06454 4.46457 3.98453 4.50455 0 ]xsh
300.98 462.2 mo
(\000'\000r)
[5.46997 0 ]xsh
309.75 462.2 mo
(\000/\000>\0007\0008\0002\000[\0002\000Q\000d\000r)
[5.59448 3.42453 2.96448 3.8446 5.06454 4.52454 5.06454 6.13449 3.98453 0 ]xsh
353.36 462.2 mo
(\000d\000>\000O\0002\000r)
[3.98453 3.42453 8.98453 5.06454 0 ]xsh
16 474.16 mo
(\000`\000d\0002\000X\000\020\000r)
[4.43207 3.91205 4.99207 5.51208 2.47208 0 ]xsh
41.33 474.16 mo
(\000%\000d\000[\000'\000>\0009\000:\000d\000r)
[5.90454 3.98453 4.52454 5.5545 3.42453 5.59448 6.18454 3.98453 0 ]xsh
83.27 474.16 mo
(\000'\000[\000[\000T\000l\000`\000r)
[5.52261 4.49265 4.49265 5.04257 7.7327 4.47266 0 ]xsh
117.83 474.16 mo
(\000[\0002\000X\000[\0002\000`\0002\000Q\000d\000r)
[4.52454 5.06454 5.58456 4.52454 5.06453 4.50458 5.06451 6.13452 3.9845 0 ]xsh
165.29 474.16 mo
(\000`\000+\000:\0002\000/\000h\000K\0002\000[\000r)
[4.44656 4.40659 6.12656 5.00656 5.5365 6.10657 3.29651 5.00656 4.46655 0 ]xsh
212.63 474.16 mo
(\000'\000+\000d\000>\000i\000'\000d\000>\000T\000Q\000`\000\004\000r)
[5.5545 4.46457 3.98453 3.42453 5.60455 5.5545 3.98453 3.42453 5.07446 6.13449 4.50455 2.50458 
0 ]xsh
269.94 474.16 mo
(\000`\000\010\000`\000:\000'\000X\0002\000/\000r)
[4.43542 2.83539 4.43542 6.11542 5.48538 5.51544 4.99542 5.52536 0 ]xsh
312.49 474.16 mo
(\000'\000[\000[\000T\000l\000`\000r)
[5.47455 4.44458 4.44458 4.99451 7.68463 4.42459 0 ]xsh
346.88 474.16 mo
(\000[\0002\000X\000[\0002\000q)
[4.52454 5.06454 5.58456 4.52454 5.06454 0 ]xsh
16 486.06 mo
(\000`\0002\000Q\000d\000r)
[4.45007 5.01007 6.08002 3.93005 0 ]xsh
39.55 486.06 mo
(\000h\000`\0002\000[\000\010\000G\0002\000i\0002\000H\000r)
[6.04568 4.38568 4.94568 4.40567 2.78564 3.21564 4.94568 5.48569 4.94568 3.32565 0 ]xsh
88.06 486.06 mo
(\000d\000:\000[\0002\000'\000/\000`\000\004\000r)
[3.98453 6.18454 4.52454 5.06454 5.5545 5.59448 4.50455 2.50458 0 ]xsh
130.08 486.06 mo
(\000'\000Q\000/\000r)
[5.66681 6.24678 5.70679 0 ]xsh
151.45 486.06 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
170.73 486.06 mo
(\000+\000G\000h\000`\000d\0002\000[\000r)
[4.39056 3.2605 6.09055 4.43054 3.91052 4.99054 4.45053 0 ]xsh
206.44 486.06 mo
(\000T\0006\000r)
[5.22629 3.5463 0 ]xsh
218.75 486.06 mo
(\000h\000`\0002\000[\000\015\000H\0002\000i\0002\000G\000r)
[6.16455 4.50455 5.06454 4.52454 2.83447 3.44452 5.06454 5.60455 5.06454 3.3345 0 ]xsh
267.87 486.06 mo
(\000d\000:\000[\0002\000'\000/\000`\000r)
[3.94043 6.14044 4.48044 5.02045 5.51041 5.55038 4.46045 0 ]xsh
306.99 486.06 mo
(\000d\000T\000r)
[3.85559 4.94553 0 ]xsh
319.95 486.06 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
338.95 486.06 mo
(\000[\000>\0009\000:\000d\000r)
[4.41269 3.31268 5.48264 6.07269 3.87268 0 ]xsh
366.29 486.06 mo
(\000T\0006\000r)
[4.98627 3.30627 0 ]xsh
16.12 497.89 mo
(\0002\000'\000+\000:\000r)
[5.00763 5.49759 4.40765 6.12762 0 ]xsh
40.26 497.89 mo
(\000X\000'\000Q\0002\000r)
[5.50079 5.47073 6.05072 4.98077 0 ]xsh
65.8 497.89 mo
(\000[\0002\000X\000[\0002\000`\0002\000Q\000d\000`\000r)
[4.45084 4.99084 5.51086 4.45084 4.99084 4.43085 4.99084 6.06079 3.91083 4.43085 0 ]xsh
117.37 497.89 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
135.89 497.89 mo
(\000[\0002\000'\000/\000n\000r)
[4.43819 4.97815 5.46814 5.50812 5.49823 0 ]xsh
165.15 497.89 mo
(\000G\000>\000`\000d\000\021\000r)
[3.26614 3.35617 4.43619 3.91617 2.43622 0 ]xsh
26.04 509.68 mo
(\000\035\000d\000r)
[7.67166 3.74161 0 ]xsh
41.99 509.68 mo
(\000d\000>\000O\0002\000r)
[3.8588 3.2988 8.8588 4.93881 0 ]xsh
67.09 509.68 mo
(\000&\000L\000\004\000r)
[6.55106 5.66116 2.45117 0 ]xsh
86.4 509.68 mo
(\000d\000:\0002\000r)
[4.02725 6.22726 5.10727 0 ]xsh
105.72 509.68 mo
(\000E\0002\000[\000Q\0002\000H\000r)
[6.18988 5.02991 4.4899 6.09985 5.02991 3.40988 0 ]xsh
140.17 509.68 mo
(\000'\000H\000H\000T\000+\000'\000d\0002\000`\000r)
[5.49973 3.38974 3.38974 5.01968 4.40979 5.49973 3.92975 5.00977 4.44977 0 ]xsh
184.82 509.68 mo
(\000d\000:\0002\000r)
[4.02725 6.22726 5.10727 0 ]xsh
204.5 509.68 mo
(\000'\000X\000X\000G\000>\000+\000'\000d\000>\000T\000Q\000r)
[5.48141 5.51147 5.51147 3.26141 3.35144 4.39148 5.48141 3.91144 3.35144 5.00137 6.0614 0 
]xsh
259.95 509.68 mo
(\000d\000l\000T\000r)
[3.99902 7.77908 5.08896 0 ]xsh
281.02 509.68 mo
(\000X\000[\000T\000+\0002\000`\000`\000T\000[\000`\000\023\000r)
[5.50598 4.44595 4.99588 4.38599 4.98596 4.42596 4.42596 4.99588 4.44595 4.42596 2.56592 0 
]xsh
335.94 509.68 mo
(\000$\000Q\000r)
[7.69882 6.28876 0 ]xsh
353.86 509.68 mo
(\0002\000'\000+\000:\000r)
[4.92767 5.41763 4.3277 6.04767 0 ]xsh
16.32 521.47 mo
(\000X\000[\000T\000-\0002\000b\000b\000T\000[\000\006\000r)
[5.44769 4.38766 4.93759 4.23767 4.92767 4.31763 4.31763 4.93759 4.38766 2.2377 0 ]xsh
65.51 521.31 mo
(\000d\000=\0002\000r)
[3.91434 6.09436 4.99435 0 ]xsh
84.61 521.31 mo
(\000F\0002\000[\000Q\0002\000K\000r)
[6.40427 5.00427 4.46426 6.07422 5.00427 3.29422 0 ]xsh
119 521.31 mo
(\000h\000Y\000-\000'\000J\000J\000b\000r)
[6.10397 5.57388 4.31396 5.49394 3.38391 3.38397 4.39392 0 ]xsh
155.9 521.31 mo
(\000g\000U\000r)
[3.88321 5.07324 0 ]xsh
169.6 521.31 mo
(\000h\000b\0002\000]\000\016\000J\0002\000k\0002\000K\000r)
[6.02768 4.31763 4.92767 4.37759 2.65762 3.30765 4.92767 5.43762 4.92767 3.21762 0 ]xsh
218.56 521.31 mo
(\000.\000T\000/\0002\000r)
[4.37119 5.01114 5.53116 5.00122 0 ]xsh
242.56 521.31 mo
(\000g\000:\000'\000d\000r)
[3.87924 6.16928 5.53925 3.96927 0 ]xsh
266.47 521.31 mo
(\000[\0003\000O\000T\000k\0004\000c\000r)
[4.3956 4.99557 8.85559 4.94553 5.44556 4.90555 4.41559 0 ]xsh
308.82 521.31 mo
(\000\)\000r)
[5.52994 0 ]xsh
318.52 521.31 mo
(\000d\000:\000[\0005\000\)\000/\000r)
[3.91083 6.11084 4.45084 4.86084 5.54077 5.52078 0 ]xsh
353.18 521.31 mo
(\0007\000_\000T\000O\000r)
[2.84271 4.7728 4.9527 8.86276 0 ]xsh
16.31 533.41 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
34.35 533.41 mo
(\000[\0002\000'\000/\000n\000r)
[4.49814 5.03815 5.52811 5.56808 5.55817 0 ]xsh
63.37 533.41 mo
(\000G\000>\000`\000d\000r)
[3.29559 3.38562 4.46564 3.94562 0 ]xsh
81.6 533.41 mo
(\000'\000R\000/\000r)
[5.54855 6.12854 5.58853 0 ]xsh
101.94 533.41 mo
(\000`\000d\000'\000[\000d\000`\000r)
[4.45587 3.93585 5.50583 4.47586 3.93585 4.45587 0 ]xsh
131.81 533.41 mo
(\000[\000h\000Q\000Q\000>\000Q\0009\000r)
[4.46686 6.10687 6.07681 6.07681 3.36685 6.07681 5.5368 0 ]xsh
172.6 533.41 mo
(\000>\000d\000\021\000r)
[3.36273 3.92273 2.44278 0 ]xsh
186.15 533.41 mo
(\000\035\000d\000r)
[7.91168 3.98163 0 ]xsh
201.14 533.41 mo
(\000d\000>\000O\0002\000r)
[3.8588 3.2988 8.8588 4.93881 0 ]xsh
225.28 533.41 mo
(\000&\000\031\000\004\000r)
[6.53015 5.68024 2.43027 0 ]xsh
243.41 533.41 mo
(\000T\000Q\0002\000r)
[5.06439 6.12442 5.05447 0 ]xsh
262.61 533.41 mo
(\000T\0006\000r)
[5.22629 3.5463 0 ]xsh
274.12 533.41 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
292.32 533.41 mo
(\000h\000`\0002\000[\000\017\000H\0002\000i\0002\000G\000r)
[6.09039 4.43039 4.99039 4.45038 2.72034 3.37036 4.99039 5.5304 4.99039 3.26035 0 ]xsh
340.13 533.41 mo
(\000d\000:\000[\0002\000'\000/\000`\000r)
[3.90045 6.10046 4.44046 4.98047 5.47043 5.51041 4.42047 0 ]xsh
16.44 545.23 mo
(\000\002\000d\000:\000[\0002\000'\000/\000r)
[2.9924 3.94241 6.14243 4.48242 5.02243 5.51239 5.55237 0 ]xsh
55.09 545.23 mo
(\000\030\000\003\000r)
[4.89563 3.29559 0 ]xsh
67.92 545.23 mo
(\000*\000K\000T\000+\000E\000`\000r)
[5.5098 3.29971 5.01968 4.40979 6.16974 4.44977 0 ]xsh
101.32 545.23 mo
(\000>\000Q\000r)
[3.48633 6.19629 0 ]xsh
115.46 545.23 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
135.02 545.23 mo
(\000E\0002\000[\000Q\0002\000G\000\020\000r)
[6.15724 4.99725 4.45721 6.0672 4.99725 3.26721 2.47729 0 ]xsh
172.96 545.23 mo
(\000&\000T\000r)
[6.60278 5.07278 0 ]xsh
189.3 545.23 mo
(\000Q\000T\000d\000>\0006\000n\000r)
[6.07849 5.01846 3.92853 3.36853 3.33847 5.52856 0 ]xsh
221.08 545.23 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
240.72 545.23 mo
(\000h\000`\0002\000[\000r)
[6.06674 4.40674 4.96674 4.42673 0 ]xsh
265.22 545.23 mo
(\000H\0002\000i\0002\000K\000r)
[3.39111 5.01114 5.55115 5.01114 3.30109 0 ]xsh
292.16 545.23 mo
(\000T\0006\000r)
[4.7464 3.06641 0 ]xsh
304.87 545.23 mo
(\000d\000:\000>\000`\000r)
[3.91235 6.11237 3.35236 4.43237 0 ]xsh
327.25 545.23 mo
(\0002\000i\0002\000Q\000d\000\004\000r)
[4.94385 5.48386 4.94385 6.01379 3.86383 2.38388 0 ]xsh
359.84 545.23 mo
(\000d\000:\0002\000r)
[3.90717 6.10718 4.98718 0 ]xsh
%ADOBeginSubsetFont: LAAAAA+*Cambria-13041-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LAAAAA+*Cambria-13041)
%%Title: (LAAAAA+*Cambria-13041 Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LAAAAA+*Cambria-13041 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1109 -298 1373 1047} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 39 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 39 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
10 <001C60D8A8C9B68CDD3538A0B2A6934AD94552D2061897B1C2D46A6A450C
2D72E1A44C57400CE305C398018C5D2A69C76B378088FEF1782494E48657492B
83CEC87C1DB559034A604B69F7B60F0AA16E629B29826F72458970218320CA9E
D34EC49699A13A8415A90DA8CD98642FC2BA7D95FE6EF1AF5545776510482B33
F2F1A2DF5617C4820F2D3CC1C6206F6D1A38FAAB66A4BB1702E6F3B6783B0BBA
A0240AA4F9E8BFE61E863286F773278C31E65891114AC3ECE93C258844AB92> |
11 <001C60D8A8C9B6EA91CFB440B9D86E8FF374D1255F9D6EB7DCBE4C61C617
B80006F7884BA5FC999F600B7D8E1E60324BC93A33D9865F439653D33EB85153
F270D77E8CB30DFD772A8ECFD11FDEE3AC003421D02F780698E6402AE2A74F8B
68D4307DD8CAC0108D63D7DCE3BC85C8EE21C098298A69A106BEF39112C1182A
7444A238A4644700B0B9EC931C02353A772FC3E1C67C0BB64E1503A51EE4E9> |
13 <001C60D8A8C9B50624698A7F7343711A516E83EF74CFEB1A0B7587A70EF0
7341A2CDC459AF307D91157313AAD3F11EFC8CABBED65B0E3ECEEB609A84BCDC
E42F9809C742A3C6C53ADEBF3B8A300313274937E94BC24E168F69A95AAC193E
22A9E51DFA32C9ED75783CE5F49FD7872F3D6CE08C3ADBAEF311432A383ADB30
59BADECBF359615FC1ABBC741A75CB427986CC6D977F0B73E1A60E4FB7AB1944
1784634EA2611A83A94BE8C3D4AA7215CC21C9A710EBC37A78C6EA55AAC1ABB7
5237F44EC511FA052A37E1EEE2E073496399D16F7114C1E6D4E649CA2A6D6639
313CE226B4839A32775FE18D2FB95ED32A38FD771CBBCA38A44A45DF8657D6EE
8D7ECCADA1286D04DBB143511F200DBC3DCEE9AE4FCA1818BB55F46EA37832A7
2D05A729DF6FED6AD6B3424B0669150C2B681E> |
38 <001C60D8A8C9B8707C25> |
16 <001C60D8A8C9B609220816B1B0475AA36186CBA9B50D29BE3568E493D749
5B6F43C6256CC3C94FAFFEA3916F0AEDB8B8E1E13AF8580A71E98A6461D74263
3539025CFCB1075ECCFBAFE5AA3744F9721373EC8C00EE9D45164FC691E933D6
D55E22004C19758B548E5F4F5865842D6AF20176AF066179F639850F2E8230DE
5ED8CE952F750A30C8EBE8812510F9D5A1D6DE2903AF56BBA2398BE54A5DAF18
17B2BA9FD7463D15D683BC371B91F0225A4E435D0FC11972C943F2D86F27DDB2
7F42372130DD651B3E4785AEC0EEC18803FFFCF2CCAC09C9468D29F0DC4EBEF1
B66FEE2830169F3C7BA9725A723FD8EF65AA729CFA215A06BA14CFA4D8ECC0DC
7BC2A96CBA18EEDCE51A50CBD2C334D5D84D7086B42972F264CFB3F84E190CC5> |
28 <001C60D8A8C9B7A9C0D31A025455DC5C8777B788C0F926CF486711AD4E7B
07DE2C8ABD68AF1D49B340A97F0479F9321286CADE5617478FC3D49750A21794
7A0EFD97558CE1D2D2FEE31C02BD5A2261140E2FEE85BCA8FB310D8DCAB10D2A
33A253DC2422C7D914C96576FB857661A38E67CA77609BFFD91E64BBCBF05A6B
EF86DF3281D9EB021859C1A045BE2188186A2F8717181B9359F05A53C9212AE2
33F304A77529DF3F67BBC90BDDA9E13BE7AFD96489A0E1EEF069> |
18 <001C60D8A8C9B7E7C1A0A8A9ACC40043EA86A1CF47E9BB80D94C251B6368
5D133F877251BA1E64579DD4F54B91F998D831E5EC82CD2EDD747BB85FD9721E
7B0F0FFAAAE3A34BBEB478A05CD50847F6C506C8CDEB14CB3B433D5924B385A8
A7D1805780441B2AA788AB0B8E92ABAC8966A1F8B111F6BE3CD1278AA042BC2E
09392559F4A4B9F0FBC16C898010969AE93C55979D371A934A45EBD4483F4A65
C9857E1CF9B4988126476AEA4E3F25D44F864B6B95C2FDE426539B4EF18205C8
23A547D2220F6AF724FBA7C4B69AF3A920BDDE7E42D971786C47037C9BDBB5D2
638BB63EC61B987AFD618A484D295DA69A9872968A569F23237BA485CB30E4F7
BFA98BB45805C2302D24EDC4B24C95EED7243A62572F6422234949B582EC> |
25 <001C60D8A8C9B67B16C33ABEB34ED6E4C1221CE4BD139C8ACFDB4A0F6B92
744879592063FFA929DB1EA76489D0FCD84659955954FD402221DA07A24AC0D8
9CEB7EFB0A6341A229DBCD9BB08F22CAFF96130397AD97A26064DB2BD9C5A698
953371AE76CFF468E114BFDF1E193365D1731828EBFA57A20A0E2DEA279BC181
ABAC858D241715A3699955FB1848BF4E30350EB232ABF3805714DDBEB434> |
31 <001C60D8A8C9B7AB67621972E40C8AA950E67F3699B469DFD5E682F280E3
8B754D1FD71D80D1F420E076B70168D0036DF06F88069150F4DFEE08E264DA30
741F690A4E8A2FAB3CF89E2A876D8F388C743CEF1DB341066A9B8DA1278B2744
19499C399A541D03B8AA0F747342FEC98E3F480E95406E3656294100395D095A
5222D611127D7832667C959F6345ABE6D3188735AD97B9AA58AF0CA8885B2050
5911AA340F63613DCA09804CC0A7777C919A4E4790E29A1AE68A0B51CB7D9547
92368595B0751F3F5707471C8E80B172958839E6CB99F3167D804F65ADE9BE71
CF3284D2901831FFB0C30136FBCC709D292BD0160F11647F48F5AE719F3EF86C
A1FC6770B204455459EBDB275B87> |
20 <001C60D8A8C9B74E6151F259121BE90EADC2A0E5DBC4F9811666D124CC0E
BE542B2AF022F833BAB933F840F24735E5B47AD6EAC6E7DECBE0E858D0B6A632
1A24B55A9E9ACE0F775361E140459AB8FBBF08836AE0BE5E3908F51BBF3471B8
7E5BA4C72087A923BF0B7772E8192CF468AB90BAF550377E5B5D2CF63F84F591
377B64CD97AF3F2C75948A07102A05F8ADEECB477CA97656FFE0AAD0403CE62B
64DEF6B198B163EB002CA3E6377D155FA5172BB521F1001FC243AA0DC408C838
B51B20870FDF9F0DBF07E13542A1900B54D215E9843C4EF7C6D1205171AFEE0D
271026A977F0AA7D3F54294520D712ED6CF98BD11EEFEA6B3D0B4D5FD05F8C5F
92A78324B7A5F46D> |
33 <001C60D8A8C9B71B40B0888DDD3D83547D28A889F05423DC89E2FE0F7601
99BE86A145B09BE4E3D27479B312BA54259DEC02B0A24CB0DFB914A0A483B1AC
5342583832E4449F48226634EE4E96BB9C9B4443EF72766F40D9E8504DD856CD
5BA5C787F8B8F3E5E51A2A95D59EED767B6CBFE8C6E32F024CBC39383D2BD647
7AA84B224D33A8857BD5766B3ADC83CA51DE19B9> |
22 <001C60D8A8C9B811DA5DDE044EF64218BFA890F473F63C9AEC21B544EDAD
9435EE8EC17BE6E7F9C7EB77EC7AC7DC89BEED418B31ECBC6590C2629F05E6D4
3782375A00EA658483CE6597E4BB362EDBB488B2ECA47FAE1FB67F847F0E372B
CE9DAE7ECDA3169A1AACF05332EFC02B4B44413D7B7A31353AA91CB9932AAE8F
3A8B043E929DAC0CB64F> |
26 <001C60D8A8C9B7EE7C19574543183F174A80ADB685B4FD2616E2A31630A5
C36FE7443D427D4EF8DC949BFDFE5D183E7BACEBE36B524F3E1D1E0A91AF084C
E01A3644667E4ED0E0C691C79F17C558C84286D8E748EF9DB8D4881F38E99696
52FC70445BCCA0E00E9A1C8A0FF9510FED28518768E87BAC93DDE4A7EA6A77AA
BFD84397BD6438FB3271F747DAC36732AAFA891095338A633F126FB1BC3205C0
4BD778634BEBDEC2FB3B63EBE598BA5943513AF7084BDC190D02C51F6992E691
3CAF97F5A8CC2D8A27F3814820A134A659D1CC61500E303817FC1B05A4852BF0
07884CA26BDB62822CA715839AB23A4C0C0AB0BA3C0481FE8431020D9AA5FFDD
7611A8E1F670A1B76BEB86975D3EF6950F47A1A7> |
24 <001C60D8A8C9B5C7C404E3EACA6C4ECCFAD45CE15C565887A24E06E593B4
043ABF9C0C3D38C94D2D4EC42D004B4B139AD7542B716D2D50FB2523F7F7BC22
4B53B14E77CB04E50369FA75FF52F4A71AB1B7D9A07516B0E241FE13AD5B9178
FB5402FC718A62AEC09613D7837E4595175206AFE61E74B9F5FBE1C29E89EB5A
E0822FFBBAD23BB89B7BABD2B0DFBB54C8C38652B8498BF7A11736B0BAB54BEB
E27550D67F70E19ADA9BAA8F351C2AD5DEF6C803C09AE2FAAA7BA3D2B104C46E
51691CF4AE7ED71A03A45B7C08CCFA73C1A015C9406F0659BF84AA61C05E5AAF
D2FAAA7C27D1FB5D414BA4912C66A62CBA9B3D2722481A906DE53A4FBF63175B
883742DA63A093178D69DA0F18E0D4DCDCD99EE4E324> |
27 <001C60D8A8C9B790A868DFC1B89B0CB8A52A8719AC763FC617DB890741E2
020B41D503AFB760F61A39C8D89B6CE9EFE24BFD2A00F657E0DFE66FBFE950A9
C5FB95AD73AC06ACB3CED6BAE866D43C834719E5451A530282C514AC4141FF08
D3FAFB873F1E017E12AA815FAB555151DA9385F4459CB99BB997EA1D967E0A5D
A71471CD77D09C0FC49EE9FE80552D0C04D0900993876E230CED74CCC0296997
7D81C88204EC0DE563F1403252631976EF556C93D89BDC145353119B458A48E4
050A7FDD8DC1E241B1A92601FA0403353967571450208C9CAD31174B77E7BF52
07ADBEB3BA65F8FB0D496BD496655A> |
35 <001C60D8A8C9B64EDFFBBAD13204846C4EB60816C3C95284B129A11503A7
4C518C673069763F638B00C6EFC758C0FE60E4E902BAB42CB15E3FAB996AE626
37F955D16A53E75CD9A880135CFB65E44CF31A53C1DFBD2204B1E0687BB613A9
3411055D4460F23F5D03C4A892CA1D0D8153CF36E3EA85ACCC1B4BEFCF42250C
1A17E6AB411D682D40A697B37F2CD0DC8572F48615D01831971108F7358AD640
10E0BB11562785504D94EF8B8C339688DF4FD345A06F074D4CF593D13ED542F9
272AA3F4EB3C84F3476CE9506CDAAE5E51328C4775527EF4B3E7B607BC18F64B
436E3D1C262BDAE4D16B46064ECEC2F69A009D65160B69> |
34 <001C60D8A8C9B76356853809347F17F91B9FAFCF3B777D9CDDE2300EB5C8
F6E26A0ACF2D376CA3D8B97AE6A377150840DACC9E014496ECCCE4B0983C9F94
33E959E4194E1D2F54250D405E28BB6EA1567105A2496C497C31B24134E4006F
E223B0EAEB6C2EE4DE45950CB45A1D71909B205B84CECA67CDFFE1C4F02236E5
EC08AD5F0737BC2267B98B2F71C32A04C9693071E384057716AB38DA7EB74869
BBD98738DAD2B192E75A2EB0B2BFA95244FDB79C5CA6F1BB41DDCAC7> |
21 <001C60D8A8C9B7A59EA8510C3B5C9B8C0C1A1C3EBC03FA4B0AF834B35929
55DB02DD701C0FA7FBD406314EC95D942427A3F77641C0D597C7C075B3D80D02
9089344DA5CC3499E670ED0FDECC200D22EBEC3EAD9B8C160002ED3887B3F409
226C1BAAE99676FCC1DF8007CEC4AFE9E83DDAE212588D3DD07F930D5B42A0FA
B0C034C041A0738115DC1F695C74B64D8624CC9D2FB8D5EECB3E652E53F52516
AB7ACC4A1F6001F675277C9F0C2BE3958C885ADDEDD1155E576C35FD571D92BD
168F0F9FD600E7A7F4FE530CC21E7BD9DD8EAB32E93D95E02D7C7D5A436570AB
022F672B90EEFE70CDBB4BBCC1D63AD091CB239B6DB51773DE6537BA69818B48
41D5397AA7D1FB499345109C97> |
29 <001C60D8A8C9B74383999DBC7A4143FC2F5185D3B1E61DDBAE806BAA5D64
F4526F11708987BBDAF92CDFF47271A1462EF2B26BA9516112DBE6EF140C894B
BF6AF65F18815FD4290A2A3F6C22D6104EB7369D22654BC8ECCFA0F479E50167
77D1C3252DEF2B122EEA64D0E8EE99CA7B7DB3EA0F882B26C2D2C88031340EAA
C15038D42714AE63092085B1700F1471F6C72FA4AB66CD2B6BCAB3B03F927D07
686414C8D4A91745669B410D9E072646BCCEB7D49EA9EF2C9D11151916553C07
775950FFED331938CE4E67ED97459AA894921F98EFD07103105B13C7A1D94C56
13F97F43FD6EB2C0C5> |
15 <001C60D8A8C9B66F6319E7E2E203B0EBF131584F41738DD9627A60769A64
8D6DDF7F803DAD4C400B7AE36537F7BB9E03EBA6B7ED426127F6E097D9E272DF
0632E71606D6BAEE54E35AA69F8CE373A287C8FE738410A1AEF518A5CD5352E6
AA755D82B8B0F435042B97C1DF010DE6C4663D7741EBCB29A0E1F0F8EF813DD8
90A50840E504EAA83517C4424A028FF5C548C412161FFC030EE357B09B6E7E7D
0C5EE27326F0C145AC2C8A986EE93658E97425C8690A4A70538B8251D56E7F06
8434> |
36 <001C60D8A8C9B7DF55984C3FC28951B4DB02A42AFC277562F78FDE667F8B
07316A74DBDAE96D07B509A079FFA173FD0C4EC90C8896E0E92C2CDD70E6C7B6
97546CC65B8E49393E914B033D87FDA368A0506204D68C838A74700201A691C8
8057AEF18C07DD30F82C9BC2874EFA3BF85FEE28A1D5D0313FE6F1AD931C4837
0BE747A1A32ED7BD757250D48F17CBB4B2BAC8270104D25709471832D1CC27C0
5A4C332735DF64D1D0> |
32 <001C60D8A8C9B77847F2A46C9FACB0E2FA3AB117DFF1EFE55FE8332B4714
B8D82027D83666DCA0A67130A622F7E3F1B4D9E8257D0C40BF1D6B66DE7658A9
F633A88FCDC1132330012F1FAA053ACAF117C075304A857235638C0E2CFBE32B
627420A11412311933BB5DDC82EEF71982F5B9B8359F1B8FE2C5640DE25CF8AD
C4835E16AE1593FDE473E0BDF0D72558F98FA59AAAC28B72BD4346A1021239A9
DC8A34D38FBB7F61C33A91F2CDF1A27435094B50FA1E192D7BCFB800C4BAA943
905AF04D2DF5AB60D23AB107B2E86379BE3A97D6DC9D01E521FD1C57E01E1122
945B93853A7F46E2FEE0971E3F401BC47FCD81515204687D82CF224918EF1738
947CDFC2A28676EB369C8F5C0CCB3465> |
1 <001C60D8A8C9B8476F03DF6D91C593114D75F862A44A7DF67394A1E3C52B1
A2B98169801C2C3CDF9F2552B1BA9A725FEE11668061114B3A5CF20519CCDDC4
D67434D5124E5A2134B86BE51BEB6AF85870870D174CDBDB5C42BF2DAC8CA1BE
B0572> |
17 <001C60D8A8C9B6A6CADE53A91649B138390B4536E10BFC8568580C3E531C
EFA385966D417F8BAC22ED7070751553DE435A6D731B5F24EB7D26F537C4C28B
4BD4594BB2DE47DC1D2A412FB9C536975D6EA9E99B2070333AC9D5DD4168565B
CD4423D959DD34E4E723A1BB190ACE71986AB4670563915D93F34181B586B243
11AF7B3C946411B9363709BDC0388A66A0ABD05EE06DE3FEBC09BEF863E15F4C
8AD7FA771C9DA328B5D3BBD894A79C5020C92D181B246D1741EBE24FF219C2> |
23 <001C60D8A8C9B8194703BF2B17DB74F9061E413ED5C7961D90A1080C51DE
5528E6718A5D2C3C3795AEE58B710CAB83F8EAFA8F4D217F7751CE93AE5A7104
17B200AC0DE80847071CF1CFE07CD1B8DC9791FA20815107C87115B7895C5E> |
6 <001C60D8A8C9B75BE519D71ADD565EB351FA7BC6FAF7C579AD73BF3D15932
D278C0C9D8FFA520C8BADF091942248D59E2214205C38CA5BDFA39BA087F07A3
3E2156559B4BAF22FE6F5CF11E9D9C54D27C8814CFAEDB70F6D694513934D9F0
0D1D2F6B50CD31AF67694C10BED40FF5F5363FC5301E5A54F0D3F4DA5E1BDDB4
06663D38ACF60D05D5C38226D47F03108D724892A7540EB405B> |
5 <001C60D8A8C9B67E8BC3D12E0843F99B3F68879025F068161A39A27367EC3
DF176AD4806689745B9E667362B42302E7A5ADD8AD14CCE8AA6347BC467A241A
4961B8BBE4D7D490291A698DBE22DCE1F8361A93C7AF5C1302066F78C3CEA331
8D264E3F27AFBCEC39914D7B10C5309D1BDBDB1472625087C> |
2 <001C60D8A8C9B87A8F72228F1DB600FEB53FBE2DC071386ACB58302B7ED77
47C7A39E47D77E199166B2CEE8C69554705B387E5FE14A8A882799D5BE7AC923
B80F4CA470D6B689068531E126A465CE409579B4F6F87ABDF0B20DA443CF67B5
C> |
14 <001C60D8A8C9B59EB73FBD58B70E262FAA5AFECA89B29B082FDC770E4BF7
5777B41FCD807C3491E7E6974ED758EAAC1134661DFB120E0738D2DB252EBD64
C648C2BED3211497580141C86646480DD023946622446050D802515F27FE65B9
CD99A637434CA0A23D8C1250A8C36E59172E8944F35267A55C0E1FA9CDE1BBB2
DD4107596C8DD5BE0AA559F44ADAF0DCD66B33FCCAF86A405F2D7301E60B0462
424F293C79EAC20817B6A0F109F18BE2653F0C287AB00AC2988286C832506E27
A7C0875D3F8F9847385D9E76FB4A8207875279F185BA7F35A3C8B1C4466BAECF
C144F84E62DBBD38BE96A3F349D1C57E> |
4 <001C60D8A8C9B85FB151B51CF3C819F4C39352A7EFF9E6E56CE1212C57656
E4BAEAA6204A6C195CA20D3D060EB7E> |
7 <001C60D8A8C9B78E05E58EB367BDC8836946E8E88FFEDCD270E83A54A0D7F
5093F6A7A72A34F39248482BE8D6F0CFF4BB33045030B0D6A1BA52F36CB931F5
1A4A2E9DE8749201A1D5317280E1997DD85D9DE82002B263B833427E6AB12A71
5312066C87F12DB3E898F96E34FE492335B24D118C03134D813966F67FA93A6F
7860B52023897768F308B54D68FE8785D3DAF16A128EDE206EDFD06C8A84110E
960> |
3 <001C60D8A8C9B8666CCB6EE4951D9AB445779CF00E7CEC666FDB530DD47AB
11BDFC170D9CDDD31BDE9B2357B786322F6307F8EAE7B449087D250D78082857
8735BCFA091A094D4B0CBE992A2B4> |
12 <001C60D8A8C9B611AF737C83B43763567762CC98E214565B2F73AF8AB675
C52B5EE95147A9EFEF1F5A038CD491DE2E49E6733D3C7635F3D7B101E1705133
979149E1B4297323ECD612146A61FA9F91C99A25C20A1934A2856DFAF6FFE3B0
55A474B265C9BEA4E8AD78A98B2A17F04876FE22A7BC8ED2A83D698D3E590B13
F624F770D7B972D5FB6BC3CDE66FAB99A3BCA7F2E36BA5E20C15BA716CB53A49
1F9BC3F11B1F604AA3FE0A8D6DD7D737EBBCA319B95158E969C6B270C8A4E789
DED33AF798DC90B4B47EFD2AA1EEE5A24F52483A6CC58298C9A785A74592B35C
6689998E609D4AEA97A1CF4A514AAB419FB12F30D00388CE17> |
19 <001C60D8A8C9B7D103291C4D153530A6CD6CF92989425B249925F8583289
E3B65927FF9068BB3DEE0E7AE5D16C5BE9E7CD2A2CD5F085540991BA2C22226D
63E0954845E2CAEAA94836E98CC346A422565691464B859929CCABEF6F1F26DA
E4F46DE9FFCFCCCCAE48D14CB5591C71EF830A4842959460696BB65696B5C2A8
EA6087DB321D88A938355620B2944A3421A89865BD8299F955128C6C8EC38362
BCEF95293990810957662C5812D8996FEE76EBA562C984C8FD78E900084FEDB7
C7D6AB8E49F648959BA09DC6944D511078BC7A24AD916B8C8E3E83E6> |
30 <001C60D8A8C9B742B24DB34F77D3D3ACC9F953851D9AA953A2DE66A9CD1E
93344075EBE5ADDE0DC4B63D45129E9210D716CF80089A9C415FAA0FFCB092C3
11A8FB939761309FFE39E344A6015CA1F3AE61A5B005E3F6CD8C2D4751BF96DA
E75D0DCC31249DEB55C65D8EC9E8B7D706861AB008467650606D75C2A190060B
F7291BC620E2941C8D7755031D80569203DC298913DA5718FAAA876A2F53BD75
978A881FCF370C8AFD04ED30DA622FBEC5C869D4E3874F569C79E44F7C5100BA
43> |
37 <001C60D8A8C9B7C12A5D812F5B2B6119EE72B86708951A29E983C81B773F
F2E58C06A19AD0AD974248C6FEEAD28586D0E95CDCB66B047208EECB20643B9B
5354182BCC7E916E9089E5EEFC0AB61CC05DF408FD57DC925BD69D51BD133F56
6B32841F2BA07C8F47CF60626A41357773DB3DF1735258E74485173E400238AC
E31C48B7AFB116DC0B8D2F9ECFDC169460B08C697001F28CC8C6BDF84A717127
A0472C21F7C4D8AB4943AC44A4B6CFE81F79875D81280CAFB99A991B7F7F293B> |
9 <001C60D8A8C9B7CF7CC31E15BE6BA6D2494A9C4A5EF65F5E57C93733009B3
9212C9ACA624946547C9C631D869AF331AD110F5CF4BB5C0AABDD867830AB2FE
1457779597565AD3B2AC72171C7648F97F0F9D5AF4BA7034A43F68ED4BBB2AE8
51029723A8C44949C0171B06EE469A263B139A8E13FA1345BD4F9F8891A31335
A83BE0114B99539D648C5D8214D24FE9F895A9EB2450FF12500B5228D4C25329
ED4779A5C6826CC5EB5B0BD505D063E8E02560B717F47C62768814CC3E43D3DA
1D5060F71CD8B0196C97177F6873C3440A44537DBEEB6E97324018DEA9D2FCD6
72EDAFB369D94D937B24C6A429CAFBB0C15592646FCEC49DD87C76F65782DB06
2B9455B30> |
8 <001C60D8A8C9B7DF5598FACB8657FE8BC0B1EF98D96CBE2FF4E6772FE87B4
E93C4EA1CD877A2E87A1BDAFD2E81F6077B90DBD500180AF295067510E9BE7F8
785CCD648D0EBAE35A48F1E0210620FB53A938F5FA2D83780596C8FC1181DBA7
E0502AFC495171D90B7F842A9727FEBAC2BB4A6748014309C497230B3BCD4A4C
87D0E1A908B661ACFDE9896712C66967403C66BA527F765C59AF6BF5EB84EFE3
FFE7A23BD10F903DA8120C725DAC595A452C9DB209485EA4031253D5488386B1
1> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LAAAAA+*Cambria-13041-Identity-H /Identity-H 0 [/LAAAAA+*Cambria-13041] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FZJXNI+*Cambria-13041 /LAAAAA+*Cambria-13041-Identity-H findfont ct_VMDictPut
FZJXNI+*Cambria-13041 [7.0001 0 0 -7.0001 0 0 ]msf
15.96 559.64 mo
(\000\012\000\013\000\015\000&)sh
36.6 559.64 mo
(\000\020\000\034\000\022\000\031\000\037\000\022\000\024\000!\000\026\000\032\000\031\000\037\000&)
[5.07907 3.49706 3.95903 4.53304 3.48306 3.95903 3.23804 2.92305 2.44003 3.91011 4.53304 3.48306 
0 ]xsh
83.93 559.64 mo
(\000\032\000\031\000&)
[3.60387 4.22681 0 ]xsh
94.82 559.64 mo
(\000\013\000\032\000\030\000\033\000#\000"\000\025\000\035\000&)
[5.30316 3.88918 6.71715 3.87506 4.65919 3.07013 3.5041 3.29411 0 ]xsh
131.89 559.64 mo
(\000\017\000$\000 \000"\000\025\000\030\000 \000\001\000&)
[4.45795 4.24796 3.17694 3.09995 3.53391 6.74695 3.17694 2.07089 0 ]xsh
165.02 559.64 mo
(\000\021\000\032\000\027\000&)
[5.73373 3.89975 2.37369 0 ]xsh
182.79 559.64 mo
(\000\006\000\005\000\002\000&)sh
195.03 559.64 mo
(\000\016\000\032\000\004\000&)
[6.21674 3.89975 1.88364 0 ]xsh
210.64 559.64 mo
(\000\007\000\003\000&)
[3.69775 1.84274 0 ]xsh
218.81 559.64 mo
(\000\014\000\025\000\023\000\036\000#\000\022\000\035\000%\000&)
[5.12424 3.51428 4.32623 3.31131 4.66934 3.94824 3.30426 4.21429 0 ]xsh
254.33 559.64 mo
(\000\007\000\011\000\011\000\010\000\004\000&)
[3.67053 4.11154 4.11157 4.2236 1.87851 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/FZJXNG+*Times#20New#20Roman-Bold-13039-Identity-H uf
/FZJXNG+*Times#20New#20Roman-Bold-13039 /CIDFont ur
/FZJXNC+*Arial-13040-Identity-H uf
/FZJXNC+*Arial-13040 /CIDFont ur
/FZJXND+*Cambria-13043-Identity-H uf
/FZJXND+*Cambria-13043 /CIDFont ur
/FZJXNF+*Minion#20Pro-Italic-13044-Identity-H uf
/FZJXNF+*Minion#20Pro-Italic-13044 /CIDFont ur
/FZJXNI+*Cambria-13041-Identity-H uf
/FZJXNI+*Cambria-13041 /CIDFont ur
/FZJXNH+*Cambria-13042-Identity-H uf
/FZJXNH+*Cambria-13042 /CIDFont ur
/FZJXNE+*Minion#20Pro-13045-Identity-H uf
/FZJXNE+*Minion#20Pro-13045 /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
